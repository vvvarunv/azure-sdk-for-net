// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Management.DataLake.AnalyticsJob.Models;

namespace Microsoft.Azure.Management.DataLake.AnalyticsJob.Models
{
    /// <summary>
    /// The Data Lake Analytics U-SQL specific job properties.
    /// </summary>
    public partial class USqlProperties : JobProperties
    {
        private string _algebraFilePath;
        
        /// <summary>
        /// Optional. Gets or sets the U-SQL algebra file path after the job
        /// has completed
        /// </summary>
        public string AlgebraFilePath
        {
            get { return this._algebraFilePath; }
            set { this._algebraFilePath = value; }
        }
        
        private string _compileMode;
        
        /// <summary>
        /// Optional. Gets or sets the compile mode for the job.
        /// </summary>
        public string CompileMode
        {
            get { return this._compileMode; }
            set { this._compileMode = value; }
        }
        
        private JobDataPath _debugData;
        
        /// <summary>
        /// Optional. Gets or sets the job specific debug data locations.
        /// </summary>
        public JobDataPath DebugData
        {
            get { return this._debugData; }
            set { this._debugData = value; }
        }
        
        private IList<Diagnostics> _diagnostics;
        
        /// <summary>
        /// Optional. Gets or sets the diagnostics for the job.
        /// </summary>
        public IList<Diagnostics> Diagnostics
        {
            get { return this._diagnostics; }
            set { this._diagnostics = value; }
        }
        
        private IList<JobResource> _resources;
        
        /// <summary>
        /// Optional. Gets or sets the list of resources that are required by
        /// the job
        /// </summary>
        public IList<JobResource> Resources
        {
            get { return this._resources; }
            set { this._resources = value; }
        }
        
        private System.Guid? _rootProcessNodeId;
        
        /// <summary>
        /// Optional. Gets or sets the ID used to identify the job manager
        /// coordinating job execution.This value should not be set by the
        /// user and will be ignored if it is.
        /// </summary>
        public System.Guid? RootProcessNodeId
        {
            get { return this._rootProcessNodeId; }
            set { this._rootProcessNodeId = value; }
        }
        
        private JobStatistics _statistics;
        
        /// <summary>
        /// Optional. Gets or sets the job specific statistics.
        /// </summary>
        public JobStatistics Statistics
        {
            get { return this._statistics; }
            set { this._statistics = value; }
        }
        
        private System.TimeSpan? _totalCompilationTime;
        
        /// <summary>
        /// Optional. Gets or sets the total time this job spent compiling.
        /// This value should not be set by the user and will be ignored if it
        /// is.
        /// </summary>
        public System.TimeSpan? TotalCompilationTime
        {
            get { return this._totalCompilationTime; }
            set { this._totalCompilationTime = value; }
        }
        
        private System.TimeSpan? _totalPausedTime;
        
        /// <summary>
        /// Optional. Gets or sets the total time this job spent paused. This
        /// value should not be set by the user and will be ignored if it is.
        /// </summary>
        public System.TimeSpan? TotalPausedTime
        {
            get { return this._totalPausedTime; }
            set { this._totalPausedTime = value; }
        }
        
        private System.TimeSpan? _totalQueuedTime;
        
        /// <summary>
        /// Optional. Gets or sets the total time this job spent queued. This
        /// value should not be set by the user and will be ignored if it is.
        /// </summary>
        public System.TimeSpan? TotalQueuedTime
        {
            get { return this._totalQueuedTime; }
            set { this._totalQueuedTime = value; }
        }
        
        private System.TimeSpan? _totalRunningTime;
        
        /// <summary>
        /// Optional. Gets or sets the total time this job spent executing.
        /// This value should not be set by the user and will be ignored if it
        /// is.
        /// </summary>
        public System.TimeSpan? TotalRunningTime
        {
            get { return this._totalRunningTime; }
            set { this._totalRunningTime = value; }
        }
        
        private int? _yarnApplicationId;
        
        /// <summary>
        /// Optional. Gets or sets the ID used to identify the yarn application
        /// executing the job.This value should not be set by the user and
        /// will be ignored if it is.
        /// </summary>
        public int? YarnApplicationId
        {
            get { return this._yarnApplicationId; }
            set { this._yarnApplicationId = value; }
        }
        
        private long? _yarnApplicationTimeStamp;
        
        /// <summary>
        /// Optional. Gets or sets the timestamp (in ticks) for the yarn
        /// application executing the job.This value should not be set by the
        /// user and will be ignored if it is.
        /// </summary>
        public long? YarnApplicationTimeStamp
        {
            get { return this._yarnApplicationTimeStamp; }
            set { this._yarnApplicationTimeStamp = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the USqlProperties class.
        /// </summary>
        public USqlProperties()
        {
            this.Diagnostics = new LazyList<Diagnostics>();
            this.Resources = new LazyList<JobResource>();
        }
        
        /// <summary>
        /// Initializes a new instance of the USqlProperties class with
        /// required arguments.
        /// </summary>
        public USqlProperties(string script)
            : this()
        {
            if (script == null)
            {
                throw new ArgumentNullException("script");
            }
            this.Script = script;
        }
    }
}
