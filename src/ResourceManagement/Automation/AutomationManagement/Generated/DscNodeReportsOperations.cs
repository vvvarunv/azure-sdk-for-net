// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Microsoft.Azure.Management.Automation.Specification.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for node reports.  (see
    /// http://aka.ms/azureautomationsdk/dscnodereportoperations for more
    /// information)
    /// </summary>
    internal partial class DscNodeReportsOperations : IServiceOperations<AutomationManagementClient>, IDscNodeReportsOperations
    {
        /// <summary>
        /// Initializes a new instance of the DscNodeReportsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DscNodeReportsOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Retrieve the Dsc node report data by node id and report id.  (see
        /// http://aka.ms/azureautomationsdk/dscnodereportoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='nodeId'>
        /// Required. The Dsc node id.
        /// </param>
        /// <param name='reportId'>
        /// Required. The report id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get dsc node report operation.
        /// </returns>
        public async Task<DscNodeReportGetResponse> GetAsync(string resourceGroupName, string automationAccount, Guid nodeId, Guid reportId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("nodeId", nodeId);
                tracingParameters.Add("reportId", reportId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId.ToString());
            url = url + "/reports/";
            url = url + Uri.EscapeDataString(reportId.ToString());
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscNodeReportGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscNodeReportGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DscNodeReport nodeReportInstance = new DscNodeReport();
                            result.NodeReport = nodeReportInstance;
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                nodeReportInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken lastModifiedTimeValue = responseDoc["lastModifiedTime"];
                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                nodeReportInstance.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                nodeReportInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                nodeReportInstance.Type = typeInstance;
                            }
                            
                            JToken reportIdValue = responseDoc["reportId"];
                            if (reportIdValue != null && reportIdValue.Type != JTokenType.Null)
                            {
                                Guid reportIdInstance = Guid.Parse(((string)reportIdValue));
                                nodeReportInstance.ReportId = reportIdInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                nodeReportInstance.Status = statusInstance;
                            }
                            
                            JToken refreshModeValue = responseDoc["refreshMode"];
                            if (refreshModeValue != null && refreshModeValue.Type != JTokenType.Null)
                            {
                                string refreshModeInstance = ((string)refreshModeValue);
                                nodeReportInstance.RefreshMode = refreshModeInstance;
                            }
                            
                            JToken rebootRequestedValue = responseDoc["rebootRequested"];
                            if (rebootRequestedValue != null && rebootRequestedValue.Type != JTokenType.Null)
                            {
                                string rebootRequestedInstance = ((string)rebootRequestedValue);
                                nodeReportInstance.RebootRequested = rebootRequestedInstance;
                            }
                            
                            JToken reportFormatVersionValue = responseDoc["reportFormatVersion"];
                            if (reportFormatVersionValue != null && reportFormatVersionValue.Type != JTokenType.Null)
                            {
                                string reportFormatVersionInstance = ((string)reportFormatVersionValue);
                                nodeReportInstance.ReportFormatVersion = reportFormatVersionInstance;
                            }
                            
                            JToken configurationVersionValue = responseDoc["configurationVersion"];
                            if (configurationVersionValue != null && configurationVersionValue.Type != JTokenType.Null)
                            {
                                string configurationVersionInstance = ((string)configurationVersionValue);
                                nodeReportInstance.ConfigurationVersion = configurationVersionInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                nodeReportInstance.Id = idInstance;
                            }
                            
                            JToken errorsArray = responseDoc["errors"];
                            if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken errorsValue in ((JArray)errorsArray))
                                {
                                    DscReportError dscReportErrorInstance = new DscReportError();
                                    nodeReportInstance.Errors.Add(dscReportErrorInstance);
                                    
                                    JToken errorSourceValue = errorsValue["errorSource"];
                                    if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                    {
                                        string errorSourceInstance = ((string)errorSourceValue);
                                        dscReportErrorInstance.ErrorSource = errorSourceInstance;
                                    }
                                    
                                    JToken resourceIdValue = errorsValue["resourceId"];
                                    if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                    {
                                        string resourceIdInstance = ((string)resourceIdValue);
                                        dscReportErrorInstance.ResourceId = resourceIdInstance;
                                    }
                                    
                                    JToken errorCodeValue = errorsValue["errorCode"];
                                    if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                    {
                                        string errorCodeInstance = ((string)errorCodeValue);
                                        dscReportErrorInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    JToken errorMessageValue = errorsValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        dscReportErrorInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken localeValue = errorsValue["locale"];
                                    if (localeValue != null && localeValue.Type != JTokenType.Null)
                                    {
                                        string localeInstance = ((string)localeValue);
                                        dscReportErrorInstance.Locale = localeInstance;
                                    }
                                    
                                    JToken errorDetailsValue = errorsValue["errorDetails"];
                                    if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                    {
                                        string errorDetailsInstance = ((string)errorDetailsValue);
                                        dscReportErrorInstance.ErrorDetails = errorDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    DscReportResource dscReportResourceInstance = new DscReportResource();
                                    nodeReportInstance.Resources.Add(dscReportResourceInstance);
                                    
                                    JToken resourceIdValue2 = resourcesValue["resourceId"];
                                    if (resourceIdValue2 != null && resourceIdValue2.Type != JTokenType.Null)
                                    {
                                        string resourceIdInstance2 = ((string)resourceIdValue2);
                                        dscReportResourceInstance.ReportResourceId = resourceIdInstance2;
                                    }
                                    
                                    JToken sourceInfoValue = resourcesValue["sourceInfo"];
                                    if (sourceInfoValue != null && sourceInfoValue.Type != JTokenType.Null)
                                    {
                                        string sourceInfoInstance = ((string)sourceInfoValue);
                                        dscReportResourceInstance.SourceInfo = sourceInfoInstance;
                                    }
                                    
                                    JToken dependsOnArray = resourcesValue["dependsOn"];
                                    if (dependsOnArray != null && dependsOnArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dependsOnValue in ((JArray)dependsOnArray))
                                        {
                                            DscReportResourceNavigation dscReportResourceNavigationInstance = new DscReportResourceNavigation();
                                            dscReportResourceInstance.DependsOn.Add(dscReportResourceNavigationInstance);
                                            
                                            JToken resourceIdValue3 = dependsOnValue["resourceId"];
                                            if (resourceIdValue3 != null && resourceIdValue3.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance3 = ((string)resourceIdValue3);
                                                dscReportResourceNavigationInstance.ReportResourceId = resourceIdInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken moduleNameValue = resourcesValue["moduleName"];
                                    if (moduleNameValue != null && moduleNameValue.Type != JTokenType.Null)
                                    {
                                        string moduleNameInstance = ((string)moduleNameValue);
                                        dscReportResourceInstance.ModuleName = moduleNameInstance;
                                    }
                                    
                                    JToken moduleVersionValue = resourcesValue["moduleVersion"];
                                    if (moduleVersionValue != null && moduleVersionValue.Type != JTokenType.Null)
                                    {
                                        string moduleVersionInstance = ((string)moduleVersionValue);
                                        dscReportResourceInstance.ModuleVersion = moduleVersionInstance;
                                    }
                                    
                                    JToken resourceNameValue = resourcesValue["resourceName"];
                                    if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                    {
                                        string resourceNameInstance = ((string)resourceNameValue);
                                        dscReportResourceInstance.ResourceName = resourceNameInstance;
                                    }
                                    
                                    JToken errorValue = resourcesValue["error"];
                                    if (errorValue != null && errorValue.Type != JTokenType.Null)
                                    {
                                        string errorInstance = ((string)errorValue);
                                        dscReportResourceInstance.Error = errorInstance;
                                    }
                                    
                                    JToken statusValue2 = resourcesValue["status"];
                                    if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                    {
                                        string statusInstance2 = ((string)statusValue2);
                                        dscReportResourceInstance.Status = statusInstance2;
                                    }
                                    
                                    JToken durationInSecondsValue = resourcesValue["durationInSeconds"];
                                    if (durationInSecondsValue != null && durationInSecondsValue.Type != JTokenType.Null)
                                    {
                                        double durationInSecondsInstance = ((double)durationInSecondsValue);
                                        dscReportResourceInstance.DurationInSeconds = durationInSecondsInstance;
                                    }
                                    
                                    JToken startDateValue = resourcesValue["startDate"];
                                    if (startDateValue != null && startDateValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startDateInstance = ((DateTimeOffset)startDateValue);
                                        dscReportResourceInstance.StartDate = startDateInstance;
                                    }
                                }
                            }
                            
                            JToken metaConfigurationValue = responseDoc["metaConfiguration"];
                            if (metaConfigurationValue != null && metaConfigurationValue.Type != JTokenType.Null)
                            {
                                DscMetaConfiguration metaConfigurationInstance = new DscMetaConfiguration();
                                nodeReportInstance.MetaConfiguration = metaConfigurationInstance;
                                
                                JToken configurationModeFrequencyMinsValue = metaConfigurationValue["configurationModeFrequencyMins"];
                                if (configurationModeFrequencyMinsValue != null && configurationModeFrequencyMinsValue.Type != JTokenType.Null)
                                {
                                    int configurationModeFrequencyMinsInstance = ((int)configurationModeFrequencyMinsValue);
                                    metaConfigurationInstance.ConfigurationModeFrequencyMins = configurationModeFrequencyMinsInstance;
                                }
                                
                                JToken rebootNodeIfNeededValue = metaConfigurationValue["rebootNodeIfNeeded"];
                                if (rebootNodeIfNeededValue != null && rebootNodeIfNeededValue.Type != JTokenType.Null)
                                {
                                    bool rebootNodeIfNeededInstance = ((bool)rebootNodeIfNeededValue);
                                    metaConfigurationInstance.RebootNodeIfNeeded = rebootNodeIfNeededInstance;
                                }
                                
                                JToken configurationModeValue = metaConfigurationValue["configurationMode"];
                                if (configurationModeValue != null && configurationModeValue.Type != JTokenType.Null)
                                {
                                    string configurationModeInstance = ((string)configurationModeValue);
                                    metaConfigurationInstance.ConfigurationMode = configurationModeInstance;
                                }
                                
                                JToken actionAfterRebootValue = metaConfigurationValue["actionAfterReboot"];
                                if (actionAfterRebootValue != null && actionAfterRebootValue.Type != JTokenType.Null)
                                {
                                    string actionAfterRebootInstance = ((string)actionAfterRebootValue);
                                    metaConfigurationInstance.ActionAfterReboot = actionAfterRebootInstance;
                                }
                                
                                JToken certificateIdValue = metaConfigurationValue["certificateId"];
                                if (certificateIdValue != null && certificateIdValue.Type != JTokenType.Null)
                                {
                                    string certificateIdInstance = ((string)certificateIdValue);
                                    metaConfigurationInstance.CertificateId = certificateIdInstance;
                                }
                                
                                JToken refreshFrequencyMinsValue = metaConfigurationValue["refreshFrequencyMins"];
                                if (refreshFrequencyMinsValue != null && refreshFrequencyMinsValue.Type != JTokenType.Null)
                                {
                                    int refreshFrequencyMinsInstance = ((int)refreshFrequencyMinsValue);
                                    metaConfigurationInstance.RefreshFrequencyMins = refreshFrequencyMinsInstance;
                                }
                                
                                JToken allowModuleOverwriteValue = metaConfigurationValue["allowModuleOverwrite"];
                                if (allowModuleOverwriteValue != null && allowModuleOverwriteValue.Type != JTokenType.Null)
                                {
                                    bool allowModuleOverwriteInstance = ((bool)allowModuleOverwriteValue);
                                    metaConfigurationInstance.AllowModuleOverwrite = allowModuleOverwriteInstance;
                                }
                            }
                            
                            JToken hostNameValue = responseDoc["hostName"];
                            if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                            {
                                string hostNameInstance = ((string)hostNameValue);
                                nodeReportInstance.HostName = hostNameInstance;
                            }
                            
                            JToken iPV4AddressesArray = responseDoc["iPV4Addresses"];
                            if (iPV4AddressesArray != null && iPV4AddressesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken iPV4AddressesValue in ((JArray)iPV4AddressesArray))
                                {
                                    nodeReportInstance.IPV4Addresses.Add(((string)iPV4AddressesValue));
                                }
                            }
                            
                            JToken iPV6AddressesArray = responseDoc["iPV6Addresses"];
                            if (iPV6AddressesArray != null && iPV6AddressesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken iPV6AddressesValue in ((JArray)iPV6AddressesArray))
                                {
                                    nodeReportInstance.IPV6Addresses.Add(((string)iPV6AddressesValue));
                                }
                            }
                            
                            JToken numberOfResourcesValue = responseDoc["numberOfResources"];
                            if (numberOfResourcesValue != null && numberOfResourcesValue.Type != JTokenType.Null)
                            {
                                int numberOfResourcesInstance = ((int)numberOfResourcesValue);
                                nodeReportInstance.NumberOfResources = numberOfResourcesInstance;
                            }
                            
                            JToken rawErrorsValue = responseDoc["rawErrors"];
                            if (rawErrorsValue != null && rawErrorsValue.Type != JTokenType.Null)
                            {
                                string rawErrorsInstance = ((string)rawErrorsValue);
                                nodeReportInstance.RawErrors = rawErrorsInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the Dsc node reports by node id and report id.  (see
        /// http://aka.ms/azureautomationsdk/dscnodereportoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='nodeId'>
        /// Required. The Dsc node id.
        /// </param>
        /// <param name='reportId'>
        /// Required. The report id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get node report content operation.
        /// </returns>
        public async Task<DscNodeReportGetContentResponse> GetContentAsync(string resourceGroupName, string automationAccount, Guid nodeId, Guid reportId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("nodeId", nodeId);
                tracingParameters.Add("reportId", reportId);
                TracingAdapter.Enter(invocationId, this, "GetContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId.ToString());
            url = url + "/reports/";
            url = url + Uri.EscapeDataString(reportId.ToString());
            url = url + "/content";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscNodeReportGetContentResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscNodeReportGetContentResponse();
                        result.Content = responseContent;
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the Dsc node report list by node id and report id.  (see
        /// http://aka.ms/azureautomationsdk/dscnodereportoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Optional. The parameters supplied to the list operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list dsc nodes operation.
        /// </returns>
        public async Task<DscNodeReportListResponse> ListAsync(string resourceGroupName, string automationAccount, DscNodeReportListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/nodes/";
            if (parameters != null && parameters.NodeId != null)
            {
                url = url + Uri.EscapeDataString(parameters.NodeId.ToString());
            }
            url = url + "/reports";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            if (parameters != null && parameters.StartTime != null)
            {
                odataFilter.Add("startTime ge " + Uri.EscapeDataString(parameters.StartTime));
            }
            if (parameters != null && parameters.EndTime != null)
            {
                odataFilter.Add("endTime le " + Uri.EscapeDataString(parameters.EndTime));
            }
            if (parameters != null && parameters.Type != null)
            {
                odataFilter.Add("type eq '" + Uri.EscapeDataString(parameters.Type) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscNodeReportListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscNodeReportListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DscNodeReport dscNodeReportInstance = new DscNodeReport();
                                    result.NodeReports.Add(dscNodeReportInstance);
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                        dscNodeReportInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["lastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                        dscNodeReportInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        dscNodeReportInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dscNodeReportInstance.Type = typeInstance;
                                    }
                                    
                                    JToken reportIdValue = valueValue["reportId"];
                                    if (reportIdValue != null && reportIdValue.Type != JTokenType.Null)
                                    {
                                        Guid reportIdInstance = Guid.Parse(((string)reportIdValue));
                                        dscNodeReportInstance.ReportId = reportIdInstance;
                                    }
                                    
                                    JToken statusValue = valueValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        dscNodeReportInstance.Status = statusInstance;
                                    }
                                    
                                    JToken refreshModeValue = valueValue["refreshMode"];
                                    if (refreshModeValue != null && refreshModeValue.Type != JTokenType.Null)
                                    {
                                        string refreshModeInstance = ((string)refreshModeValue);
                                        dscNodeReportInstance.RefreshMode = refreshModeInstance;
                                    }
                                    
                                    JToken rebootRequestedValue = valueValue["rebootRequested"];
                                    if (rebootRequestedValue != null && rebootRequestedValue.Type != JTokenType.Null)
                                    {
                                        string rebootRequestedInstance = ((string)rebootRequestedValue);
                                        dscNodeReportInstance.RebootRequested = rebootRequestedInstance;
                                    }
                                    
                                    JToken reportFormatVersionValue = valueValue["reportFormatVersion"];
                                    if (reportFormatVersionValue != null && reportFormatVersionValue.Type != JTokenType.Null)
                                    {
                                        string reportFormatVersionInstance = ((string)reportFormatVersionValue);
                                        dscNodeReportInstance.ReportFormatVersion = reportFormatVersionInstance;
                                    }
                                    
                                    JToken configurationVersionValue = valueValue["configurationVersion"];
                                    if (configurationVersionValue != null && configurationVersionValue.Type != JTokenType.Null)
                                    {
                                        string configurationVersionInstance = ((string)configurationVersionValue);
                                        dscNodeReportInstance.ConfigurationVersion = configurationVersionInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dscNodeReportInstance.Id = idInstance;
                                    }
                                    
                                    JToken errorsArray = valueValue["errors"];
                                    if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken errorsValue in ((JArray)errorsArray))
                                        {
                                            DscReportError dscReportErrorInstance = new DscReportError();
                                            dscNodeReportInstance.Errors.Add(dscReportErrorInstance);
                                            
                                            JToken errorSourceValue = errorsValue["errorSource"];
                                            if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                            {
                                                string errorSourceInstance = ((string)errorSourceValue);
                                                dscReportErrorInstance.ErrorSource = errorSourceInstance;
                                            }
                                            
                                            JToken resourceIdValue = errorsValue["resourceId"];
                                            if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance = ((string)resourceIdValue);
                                                dscReportErrorInstance.ResourceId = resourceIdInstance;
                                            }
                                            
                                            JToken errorCodeValue = errorsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                string errorCodeInstance = ((string)errorCodeValue);
                                                dscReportErrorInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorMessageValue = errorsValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                dscReportErrorInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            JToken localeValue = errorsValue["locale"];
                                            if (localeValue != null && localeValue.Type != JTokenType.Null)
                                            {
                                                string localeInstance = ((string)localeValue);
                                                dscReportErrorInstance.Locale = localeInstance;
                                            }
                                            
                                            JToken errorDetailsValue = errorsValue["errorDetails"];
                                            if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                            {
                                                string errorDetailsInstance = ((string)errorDetailsValue);
                                                dscReportErrorInstance.ErrorDetails = errorDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            DscReportResource dscReportResourceInstance = new DscReportResource();
                                            dscNodeReportInstance.Resources.Add(dscReportResourceInstance);
                                            
                                            JToken resourceIdValue2 = resourcesValue["resourceId"];
                                            if (resourceIdValue2 != null && resourceIdValue2.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance2 = ((string)resourceIdValue2);
                                                dscReportResourceInstance.ReportResourceId = resourceIdInstance2;
                                            }
                                            
                                            JToken sourceInfoValue = resourcesValue["sourceInfo"];
                                            if (sourceInfoValue != null && sourceInfoValue.Type != JTokenType.Null)
                                            {
                                                string sourceInfoInstance = ((string)sourceInfoValue);
                                                dscReportResourceInstance.SourceInfo = sourceInfoInstance;
                                            }
                                            
                                            JToken dependsOnArray = resourcesValue["dependsOn"];
                                            if (dependsOnArray != null && dependsOnArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dependsOnValue in ((JArray)dependsOnArray))
                                                {
                                                    DscReportResourceNavigation dscReportResourceNavigationInstance = new DscReportResourceNavigation();
                                                    dscReportResourceInstance.DependsOn.Add(dscReportResourceNavigationInstance);
                                                    
                                                    JToken resourceIdValue3 = dependsOnValue["resourceId"];
                                                    if (resourceIdValue3 != null && resourceIdValue3.Type != JTokenType.Null)
                                                    {
                                                        string resourceIdInstance3 = ((string)resourceIdValue3);
                                                        dscReportResourceNavigationInstance.ReportResourceId = resourceIdInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken moduleNameValue = resourcesValue["moduleName"];
                                            if (moduleNameValue != null && moduleNameValue.Type != JTokenType.Null)
                                            {
                                                string moduleNameInstance = ((string)moduleNameValue);
                                                dscReportResourceInstance.ModuleName = moduleNameInstance;
                                            }
                                            
                                            JToken moduleVersionValue = resourcesValue["moduleVersion"];
                                            if (moduleVersionValue != null && moduleVersionValue.Type != JTokenType.Null)
                                            {
                                                string moduleVersionInstance = ((string)moduleVersionValue);
                                                dscReportResourceInstance.ModuleVersion = moduleVersionInstance;
                                            }
                                            
                                            JToken resourceNameValue = resourcesValue["resourceName"];
                                            if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance = ((string)resourceNameValue);
                                                dscReportResourceInstance.ResourceName = resourceNameInstance;
                                            }
                                            
                                            JToken errorValue = resourcesValue["error"];
                                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                                            {
                                                string errorInstance = ((string)errorValue);
                                                dscReportResourceInstance.Error = errorInstance;
                                            }
                                            
                                            JToken statusValue2 = resourcesValue["status"];
                                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                            {
                                                string statusInstance2 = ((string)statusValue2);
                                                dscReportResourceInstance.Status = statusInstance2;
                                            }
                                            
                                            JToken durationInSecondsValue = resourcesValue["durationInSeconds"];
                                            if (durationInSecondsValue != null && durationInSecondsValue.Type != JTokenType.Null)
                                            {
                                                double durationInSecondsInstance = ((double)durationInSecondsValue);
                                                dscReportResourceInstance.DurationInSeconds = durationInSecondsInstance;
                                            }
                                            
                                            JToken startDateValue = resourcesValue["startDate"];
                                            if (startDateValue != null && startDateValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset startDateInstance = ((DateTimeOffset)startDateValue);
                                                dscReportResourceInstance.StartDate = startDateInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken metaConfigurationValue = valueValue["metaConfiguration"];
                                    if (metaConfigurationValue != null && metaConfigurationValue.Type != JTokenType.Null)
                                    {
                                        DscMetaConfiguration metaConfigurationInstance = new DscMetaConfiguration();
                                        dscNodeReportInstance.MetaConfiguration = metaConfigurationInstance;
                                        
                                        JToken configurationModeFrequencyMinsValue = metaConfigurationValue["configurationModeFrequencyMins"];
                                        if (configurationModeFrequencyMinsValue != null && configurationModeFrequencyMinsValue.Type != JTokenType.Null)
                                        {
                                            int configurationModeFrequencyMinsInstance = ((int)configurationModeFrequencyMinsValue);
                                            metaConfigurationInstance.ConfigurationModeFrequencyMins = configurationModeFrequencyMinsInstance;
                                        }
                                        
                                        JToken rebootNodeIfNeededValue = metaConfigurationValue["rebootNodeIfNeeded"];
                                        if (rebootNodeIfNeededValue != null && rebootNodeIfNeededValue.Type != JTokenType.Null)
                                        {
                                            bool rebootNodeIfNeededInstance = ((bool)rebootNodeIfNeededValue);
                                            metaConfigurationInstance.RebootNodeIfNeeded = rebootNodeIfNeededInstance;
                                        }
                                        
                                        JToken configurationModeValue = metaConfigurationValue["configurationMode"];
                                        if (configurationModeValue != null && configurationModeValue.Type != JTokenType.Null)
                                        {
                                            string configurationModeInstance = ((string)configurationModeValue);
                                            metaConfigurationInstance.ConfigurationMode = configurationModeInstance;
                                        }
                                        
                                        JToken actionAfterRebootValue = metaConfigurationValue["actionAfterReboot"];
                                        if (actionAfterRebootValue != null && actionAfterRebootValue.Type != JTokenType.Null)
                                        {
                                            string actionAfterRebootInstance = ((string)actionAfterRebootValue);
                                            metaConfigurationInstance.ActionAfterReboot = actionAfterRebootInstance;
                                        }
                                        
                                        JToken certificateIdValue = metaConfigurationValue["certificateId"];
                                        if (certificateIdValue != null && certificateIdValue.Type != JTokenType.Null)
                                        {
                                            string certificateIdInstance = ((string)certificateIdValue);
                                            metaConfigurationInstance.CertificateId = certificateIdInstance;
                                        }
                                        
                                        JToken refreshFrequencyMinsValue = metaConfigurationValue["refreshFrequencyMins"];
                                        if (refreshFrequencyMinsValue != null && refreshFrequencyMinsValue.Type != JTokenType.Null)
                                        {
                                            int refreshFrequencyMinsInstance = ((int)refreshFrequencyMinsValue);
                                            metaConfigurationInstance.RefreshFrequencyMins = refreshFrequencyMinsInstance;
                                        }
                                        
                                        JToken allowModuleOverwriteValue = metaConfigurationValue["allowModuleOverwrite"];
                                        if (allowModuleOverwriteValue != null && allowModuleOverwriteValue.Type != JTokenType.Null)
                                        {
                                            bool allowModuleOverwriteInstance = ((bool)allowModuleOverwriteValue);
                                            metaConfigurationInstance.AllowModuleOverwrite = allowModuleOverwriteInstance;
                                        }
                                    }
                                    
                                    JToken hostNameValue = valueValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = ((string)hostNameValue);
                                        dscNodeReportInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken iPV4AddressesArray = valueValue["iPV4Addresses"];
                                    if (iPV4AddressesArray != null && iPV4AddressesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iPV4AddressesValue in ((JArray)iPV4AddressesArray))
                                        {
                                            dscNodeReportInstance.IPV4Addresses.Add(((string)iPV4AddressesValue));
                                        }
                                    }
                                    
                                    JToken iPV6AddressesArray = valueValue["iPV6Addresses"];
                                    if (iPV6AddressesArray != null && iPV6AddressesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iPV6AddressesValue in ((JArray)iPV6AddressesArray))
                                        {
                                            dscNodeReportInstance.IPV6Addresses.Add(((string)iPV6AddressesValue));
                                        }
                                    }
                                    
                                    JToken numberOfResourcesValue = valueValue["numberOfResources"];
                                    if (numberOfResourcesValue != null && numberOfResourcesValue.Type != JTokenType.Null)
                                    {
                                        int numberOfResourcesInstance = ((int)numberOfResourcesValue);
                                        dscNodeReportInstance.NumberOfResources = numberOfResourcesInstance;
                                    }
                                    
                                    JToken rawErrorsValue = valueValue["rawErrors"];
                                    if (rawErrorsValue != null && rawErrorsValue.Type != JTokenType.Null)
                                    {
                                        string rawErrorsInstance = ((string)rawErrorsValue);
                                        dscNodeReportInstance.RawErrors = rawErrorsInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the Dsc node report list by node id and report id.  (see
        /// http://aka.ms/azureautomationsdk/dscnodereportoperations for more
        /// information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list dsc nodes operation.
        /// </returns>
        public async Task<DscNodeReportListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscNodeReportListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscNodeReportListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DscNodeReport dscNodeReportInstance = new DscNodeReport();
                                    result.NodeReports.Add(dscNodeReportInstance);
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                        dscNodeReportInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = valueValue["lastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                        dscNodeReportInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        dscNodeReportInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dscNodeReportInstance.Type = typeInstance;
                                    }
                                    
                                    JToken reportIdValue = valueValue["reportId"];
                                    if (reportIdValue != null && reportIdValue.Type != JTokenType.Null)
                                    {
                                        Guid reportIdInstance = Guid.Parse(((string)reportIdValue));
                                        dscNodeReportInstance.ReportId = reportIdInstance;
                                    }
                                    
                                    JToken statusValue = valueValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        dscNodeReportInstance.Status = statusInstance;
                                    }
                                    
                                    JToken refreshModeValue = valueValue["refreshMode"];
                                    if (refreshModeValue != null && refreshModeValue.Type != JTokenType.Null)
                                    {
                                        string refreshModeInstance = ((string)refreshModeValue);
                                        dscNodeReportInstance.RefreshMode = refreshModeInstance;
                                    }
                                    
                                    JToken rebootRequestedValue = valueValue["rebootRequested"];
                                    if (rebootRequestedValue != null && rebootRequestedValue.Type != JTokenType.Null)
                                    {
                                        string rebootRequestedInstance = ((string)rebootRequestedValue);
                                        dscNodeReportInstance.RebootRequested = rebootRequestedInstance;
                                    }
                                    
                                    JToken reportFormatVersionValue = valueValue["reportFormatVersion"];
                                    if (reportFormatVersionValue != null && reportFormatVersionValue.Type != JTokenType.Null)
                                    {
                                        string reportFormatVersionInstance = ((string)reportFormatVersionValue);
                                        dscNodeReportInstance.ReportFormatVersion = reportFormatVersionInstance;
                                    }
                                    
                                    JToken configurationVersionValue = valueValue["configurationVersion"];
                                    if (configurationVersionValue != null && configurationVersionValue.Type != JTokenType.Null)
                                    {
                                        string configurationVersionInstance = ((string)configurationVersionValue);
                                        dscNodeReportInstance.ConfigurationVersion = configurationVersionInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dscNodeReportInstance.Id = idInstance;
                                    }
                                    
                                    JToken errorsArray = valueValue["errors"];
                                    if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken errorsValue in ((JArray)errorsArray))
                                        {
                                            DscReportError dscReportErrorInstance = new DscReportError();
                                            dscNodeReportInstance.Errors.Add(dscReportErrorInstance);
                                            
                                            JToken errorSourceValue = errorsValue["errorSource"];
                                            if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                            {
                                                string errorSourceInstance = ((string)errorSourceValue);
                                                dscReportErrorInstance.ErrorSource = errorSourceInstance;
                                            }
                                            
                                            JToken resourceIdValue = errorsValue["resourceId"];
                                            if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance = ((string)resourceIdValue);
                                                dscReportErrorInstance.ResourceId = resourceIdInstance;
                                            }
                                            
                                            JToken errorCodeValue = errorsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                string errorCodeInstance = ((string)errorCodeValue);
                                                dscReportErrorInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorMessageValue = errorsValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                dscReportErrorInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            JToken localeValue = errorsValue["locale"];
                                            if (localeValue != null && localeValue.Type != JTokenType.Null)
                                            {
                                                string localeInstance = ((string)localeValue);
                                                dscReportErrorInstance.Locale = localeInstance;
                                            }
                                            
                                            JToken errorDetailsValue = errorsValue["errorDetails"];
                                            if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                            {
                                                string errorDetailsInstance = ((string)errorDetailsValue);
                                                dscReportErrorInstance.ErrorDetails = errorDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            DscReportResource dscReportResourceInstance = new DscReportResource();
                                            dscNodeReportInstance.Resources.Add(dscReportResourceInstance);
                                            
                                            JToken resourceIdValue2 = resourcesValue["resourceId"];
                                            if (resourceIdValue2 != null && resourceIdValue2.Type != JTokenType.Null)
                                            {
                                                string resourceIdInstance2 = ((string)resourceIdValue2);
                                                dscReportResourceInstance.ReportResourceId = resourceIdInstance2;
                                            }
                                            
                                            JToken sourceInfoValue = resourcesValue["sourceInfo"];
                                            if (sourceInfoValue != null && sourceInfoValue.Type != JTokenType.Null)
                                            {
                                                string sourceInfoInstance = ((string)sourceInfoValue);
                                                dscReportResourceInstance.SourceInfo = sourceInfoInstance;
                                            }
                                            
                                            JToken dependsOnArray = resourcesValue["dependsOn"];
                                            if (dependsOnArray != null && dependsOnArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dependsOnValue in ((JArray)dependsOnArray))
                                                {
                                                    DscReportResourceNavigation dscReportResourceNavigationInstance = new DscReportResourceNavigation();
                                                    dscReportResourceInstance.DependsOn.Add(dscReportResourceNavigationInstance);
                                                    
                                                    JToken resourceIdValue3 = dependsOnValue["resourceId"];
                                                    if (resourceIdValue3 != null && resourceIdValue3.Type != JTokenType.Null)
                                                    {
                                                        string resourceIdInstance3 = ((string)resourceIdValue3);
                                                        dscReportResourceNavigationInstance.ReportResourceId = resourceIdInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken moduleNameValue = resourcesValue["moduleName"];
                                            if (moduleNameValue != null && moduleNameValue.Type != JTokenType.Null)
                                            {
                                                string moduleNameInstance = ((string)moduleNameValue);
                                                dscReportResourceInstance.ModuleName = moduleNameInstance;
                                            }
                                            
                                            JToken moduleVersionValue = resourcesValue["moduleVersion"];
                                            if (moduleVersionValue != null && moduleVersionValue.Type != JTokenType.Null)
                                            {
                                                string moduleVersionInstance = ((string)moduleVersionValue);
                                                dscReportResourceInstance.ModuleVersion = moduleVersionInstance;
                                            }
                                            
                                            JToken resourceNameValue = resourcesValue["resourceName"];
                                            if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance = ((string)resourceNameValue);
                                                dscReportResourceInstance.ResourceName = resourceNameInstance;
                                            }
                                            
                                            JToken errorValue = resourcesValue["error"];
                                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                                            {
                                                string errorInstance = ((string)errorValue);
                                                dscReportResourceInstance.Error = errorInstance;
                                            }
                                            
                                            JToken statusValue2 = resourcesValue["status"];
                                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                            {
                                                string statusInstance2 = ((string)statusValue2);
                                                dscReportResourceInstance.Status = statusInstance2;
                                            }
                                            
                                            JToken durationInSecondsValue = resourcesValue["durationInSeconds"];
                                            if (durationInSecondsValue != null && durationInSecondsValue.Type != JTokenType.Null)
                                            {
                                                double durationInSecondsInstance = ((double)durationInSecondsValue);
                                                dscReportResourceInstance.DurationInSeconds = durationInSecondsInstance;
                                            }
                                            
                                            JToken startDateValue = resourcesValue["startDate"];
                                            if (startDateValue != null && startDateValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset startDateInstance = ((DateTimeOffset)startDateValue);
                                                dscReportResourceInstance.StartDate = startDateInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken metaConfigurationValue = valueValue["metaConfiguration"];
                                    if (metaConfigurationValue != null && metaConfigurationValue.Type != JTokenType.Null)
                                    {
                                        DscMetaConfiguration metaConfigurationInstance = new DscMetaConfiguration();
                                        dscNodeReportInstance.MetaConfiguration = metaConfigurationInstance;
                                        
                                        JToken configurationModeFrequencyMinsValue = metaConfigurationValue["configurationModeFrequencyMins"];
                                        if (configurationModeFrequencyMinsValue != null && configurationModeFrequencyMinsValue.Type != JTokenType.Null)
                                        {
                                            int configurationModeFrequencyMinsInstance = ((int)configurationModeFrequencyMinsValue);
                                            metaConfigurationInstance.ConfigurationModeFrequencyMins = configurationModeFrequencyMinsInstance;
                                        }
                                        
                                        JToken rebootNodeIfNeededValue = metaConfigurationValue["rebootNodeIfNeeded"];
                                        if (rebootNodeIfNeededValue != null && rebootNodeIfNeededValue.Type != JTokenType.Null)
                                        {
                                            bool rebootNodeIfNeededInstance = ((bool)rebootNodeIfNeededValue);
                                            metaConfigurationInstance.RebootNodeIfNeeded = rebootNodeIfNeededInstance;
                                        }
                                        
                                        JToken configurationModeValue = metaConfigurationValue["configurationMode"];
                                        if (configurationModeValue != null && configurationModeValue.Type != JTokenType.Null)
                                        {
                                            string configurationModeInstance = ((string)configurationModeValue);
                                            metaConfigurationInstance.ConfigurationMode = configurationModeInstance;
                                        }
                                        
                                        JToken actionAfterRebootValue = metaConfigurationValue["actionAfterReboot"];
                                        if (actionAfterRebootValue != null && actionAfterRebootValue.Type != JTokenType.Null)
                                        {
                                            string actionAfterRebootInstance = ((string)actionAfterRebootValue);
                                            metaConfigurationInstance.ActionAfterReboot = actionAfterRebootInstance;
                                        }
                                        
                                        JToken certificateIdValue = metaConfigurationValue["certificateId"];
                                        if (certificateIdValue != null && certificateIdValue.Type != JTokenType.Null)
                                        {
                                            string certificateIdInstance = ((string)certificateIdValue);
                                            metaConfigurationInstance.CertificateId = certificateIdInstance;
                                        }
                                        
                                        JToken refreshFrequencyMinsValue = metaConfigurationValue["refreshFrequencyMins"];
                                        if (refreshFrequencyMinsValue != null && refreshFrequencyMinsValue.Type != JTokenType.Null)
                                        {
                                            int refreshFrequencyMinsInstance = ((int)refreshFrequencyMinsValue);
                                            metaConfigurationInstance.RefreshFrequencyMins = refreshFrequencyMinsInstance;
                                        }
                                        
                                        JToken allowModuleOverwriteValue = metaConfigurationValue["allowModuleOverwrite"];
                                        if (allowModuleOverwriteValue != null && allowModuleOverwriteValue.Type != JTokenType.Null)
                                        {
                                            bool allowModuleOverwriteInstance = ((bool)allowModuleOverwriteValue);
                                            metaConfigurationInstance.AllowModuleOverwrite = allowModuleOverwriteInstance;
                                        }
                                    }
                                    
                                    JToken hostNameValue = valueValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = ((string)hostNameValue);
                                        dscNodeReportInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken iPV4AddressesArray = valueValue["iPV4Addresses"];
                                    if (iPV4AddressesArray != null && iPV4AddressesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iPV4AddressesValue in ((JArray)iPV4AddressesArray))
                                        {
                                            dscNodeReportInstance.IPV4Addresses.Add(((string)iPV4AddressesValue));
                                        }
                                    }
                                    
                                    JToken iPV6AddressesArray = valueValue["iPV6Addresses"];
                                    if (iPV6AddressesArray != null && iPV6AddressesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iPV6AddressesValue in ((JArray)iPV6AddressesArray))
                                        {
                                            dscNodeReportInstance.IPV6Addresses.Add(((string)iPV6AddressesValue));
                                        }
                                    }
                                    
                                    JToken numberOfResourcesValue = valueValue["numberOfResources"];
                                    if (numberOfResourcesValue != null && numberOfResourcesValue.Type != JTokenType.Null)
                                    {
                                        int numberOfResourcesInstance = ((int)numberOfResourcesValue);
                                        dscNodeReportInstance.NumberOfResources = numberOfResourcesInstance;
                                    }
                                    
                                    JToken rawErrorsValue = valueValue["rawErrors"];
                                    if (rawErrorsValue != null && rawErrorsValue.Type != JTokenType.Null)
                                    {
                                        string rawErrorsInstance = ((string)rawErrorsValue);
                                        dscNodeReportInstance.RawErrors = rawErrorsInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
