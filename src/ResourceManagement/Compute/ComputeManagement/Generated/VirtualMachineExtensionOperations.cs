// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// Operations for managing the virtual machine extensions in compute
    /// management.
    /// </summary>
    internal partial class VirtualMachineExtensionOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineExtensionOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineExtensionOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineExtensionOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (extensionParameters == null)
            {
                throw new ArgumentNullException("extensionParameters");
            }
            if (extensionParameters.Location == null)
            {
                throw new ArgumentNullException("extensionParameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("extensionParameters", extensionParameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            if (extensionParameters.Name != null)
            {
                url = url + Uri.EscapeDataString(extensionParameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineExtensionJsonValue = new JObject();
                requestDoc = virtualMachineExtensionJsonValue;
                
                JObject propertiesValue = new JObject();
                virtualMachineExtensionJsonValue["properties"] = propertiesValue;
                
                if (extensionParameters.Publisher != null)
                {
                    propertiesValue["publisher"] = extensionParameters.Publisher;
                }
                
                if (extensionParameters.ExtensionType != null)
                {
                    propertiesValue["type"] = extensionParameters.ExtensionType;
                }
                
                if (extensionParameters.TypeHandlerVersion != null)
                {
                    propertiesValue["typeHandlerVersion"] = extensionParameters.TypeHandlerVersion;
                }
                
                propertiesValue["autoUpgradeMinorVersion"] = extensionParameters.AutoUpgradeMinorVersion;
                
                if (extensionParameters.Settings != null)
                {
                    propertiesValue["settings"] = JObject.Parse(extensionParameters.Settings);
                }
                
                if (extensionParameters.ProtectedSettings != null)
                {
                    propertiesValue["protectedSettings"] = JObject.Parse(extensionParameters.ProtectedSettings);
                }
                
                if (extensionParameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = extensionParameters.ProvisioningState;
                }
                
                if (extensionParameters.InstanceView != null)
                {
                    JObject instanceViewValue = new JObject();
                    propertiesValue["instanceView"] = instanceViewValue;
                    
                    if (extensionParameters.InstanceView.Name != null)
                    {
                        instanceViewValue["name"] = extensionParameters.InstanceView.Name;
                    }
                    
                    if (extensionParameters.InstanceView.ExtensionType != null)
                    {
                        instanceViewValue["type"] = extensionParameters.InstanceView.ExtensionType;
                    }
                    
                    if (extensionParameters.InstanceView.TypeHandlerVersion != null)
                    {
                        instanceViewValue["typeHandlerVersion"] = extensionParameters.InstanceView.TypeHandlerVersion;
                    }
                    
                    if (extensionParameters.InstanceView.SubStatuses != null)
                    {
                        if (extensionParameters.InstanceView.SubStatuses is ILazyCollection == false || ((ILazyCollection)extensionParameters.InstanceView.SubStatuses).IsInitialized)
                        {
                            JArray substatusesArray = new JArray();
                            foreach (InstanceViewStatus substatusesItem in extensionParameters.InstanceView.SubStatuses)
                            {
                                JObject instanceViewStatusValue = new JObject();
                                substatusesArray.Add(instanceViewStatusValue);
                                
                                if (substatusesItem.Code != null)
                                {
                                    instanceViewStatusValue["code"] = substatusesItem.Code;
                                }
                                
                                if (substatusesItem.Level != null)
                                {
                                    instanceViewStatusValue["level"] = substatusesItem.Level;
                                }
                                
                                if (substatusesItem.DisplayStatus != null)
                                {
                                    instanceViewStatusValue["displayStatus"] = substatusesItem.DisplayStatus;
                                }
                                
                                if (substatusesItem.Message != null)
                                {
                                    instanceViewStatusValue["message"] = substatusesItem.Message;
                                }
                                
                                if (substatusesItem.Time != null)
                                {
                                    instanceViewStatusValue["time"] = substatusesItem.Time.Value;
                                }
                            }
                            instanceViewValue["substatuses"] = substatusesArray;
                        }
                    }
                    
                    if (extensionParameters.InstanceView.Statuses != null)
                    {
                        JArray statusesArray = new JArray();
                        foreach (InstanceViewStatus statusesItem in extensionParameters.InstanceView.Statuses)
                        {
                            JObject instanceViewStatusValue2 = new JObject();
                            statusesArray.Add(instanceViewStatusValue2);
                            
                            if (statusesItem.Code != null)
                            {
                                instanceViewStatusValue2["code"] = statusesItem.Code;
                            }
                            
                            if (statusesItem.Level != null)
                            {
                                instanceViewStatusValue2["level"] = statusesItem.Level;
                            }
                            
                            if (statusesItem.DisplayStatus != null)
                            {
                                instanceViewStatusValue2["displayStatus"] = statusesItem.DisplayStatus;
                            }
                            
                            if (statusesItem.Message != null)
                            {
                                instanceViewStatusValue2["message"] = statusesItem.Message;
                            }
                            
                            if (statusesItem.Time != null)
                            {
                                instanceViewStatusValue2["time"] = statusesItem.Time.Value;
                            }
                        }
                        instanceViewValue["statuses"] = statusesArray;
                    }
                }
                
                if (extensionParameters.Id != null)
                {
                    virtualMachineExtensionJsonValue["id"] = extensionParameters.Id;
                }
                
                if (extensionParameters.Name != null)
                {
                    virtualMachineExtensionJsonValue["name"] = extensionParameters.Name;
                }
                
                if (extensionParameters.Type != null)
                {
                    virtualMachineExtensionJsonValue["type"] = extensionParameters.Type;
                }
                
                virtualMachineExtensionJsonValue["location"] = extensionParameters.Location;
                
                if (extensionParameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in extensionParameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    virtualMachineExtensionJsonValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue2["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue2["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue2["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue2["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue2["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue2["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue2 = propertiesValue2["instanceView"];
                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue2["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue2["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray2))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray2 = instanceViewValue2["statuses"];
                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray2))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to create or update the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be create or updated.
        /// </param>
        /// <param name='extensionParameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string vmName, VirtualMachineExtension extensionParameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("extensionParameters", extensionParameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualMachineExtensionCreateOrUpdateResponse response = await client.VirtualMachineExtensions.BeginCreatingOrUpdatingAsync(resourceGroupName, vmName, extensionParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine where the extension
        /// should be deleted.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachineExtensions.BeginDeletingAsync(resourceGroupName, vmName, vmExtensionName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionGetResponse> GetAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray = instanceViewValue["substatuses"];
                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray = instanceViewValue["statuses"];
                                    if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get an extension along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine containing the extension.
        /// </param>
        /// <param name='vmExtensionName'>
        /// Required. The name of the virtual machine extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get VM-Extension operation response.
        /// </returns>
        public async Task<VirtualMachineExtensionGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, string vmExtensionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (vmExtensionName == null)
            {
                throw new ArgumentNullException("vmExtensionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("vmExtensionName", vmExtensionName);
                TracingAdapter.Enter(invocationId, this, "GetWithInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(vmExtensionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$expand=instanceView");
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineExtensionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineExtensionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachineExtension virtualMachineExtensionInstance = new VirtualMachineExtension();
                            result.VirtualMachineExtension = virtualMachineExtensionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken publisherValue = propertiesValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    virtualMachineExtensionInstance.Publisher = publisherInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    virtualMachineExtensionInstance.ExtensionType = typeInstance;
                                }
                                
                                JToken typeHandlerVersionValue = propertiesValue["typeHandlerVersion"];
                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                {
                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                    virtualMachineExtensionInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                }
                                
                                JToken autoUpgradeMinorVersionValue = propertiesValue["autoUpgradeMinorVersion"];
                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                {
                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                    virtualMachineExtensionInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.Settings = settingsInstance;
                                }
                                
                                JToken protectedSettingsValue = propertiesValue["protectedSettings"];
                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                {
                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    virtualMachineExtensionInstance.ProtectedSettings = protectedSettingsInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineExtensionInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineExtensionInstanceView instanceViewInstance = new VirtualMachineExtensionInstanceView();
                                    virtualMachineExtensionInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken nameValue = instanceViewValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        instanceViewInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue2 = instanceViewValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        instanceViewInstance.ExtensionType = typeInstance2;
                                    }
                                    
                                    JToken typeHandlerVersionValue2 = instanceViewValue["typeHandlerVersion"];
                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                    {
                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                        instanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                    }
                                    
                                    JToken substatusesArray = instanceViewValue["substatuses"];
                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                            instanceViewInstance.SubStatuses.Add(instanceViewStatusInstance);
                                            
                                            JToken codeValue = substatusesValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                instanceViewStatusInstance.Code = codeInstance;
                                            }
                                            
                                            JToken levelValue = substatusesValue["level"];
                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                            {
                                                string levelInstance = ((string)levelValue);
                                                instanceViewStatusInstance.Level = levelInstance;
                                            }
                                            
                                            JToken displayStatusValue = substatusesValue["displayStatus"];
                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance = ((string)displayStatusValue);
                                                instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                            }
                                            
                                            JToken messageValue = substatusesValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                instanceViewStatusInstance.Message = messageInstance;
                                            }
                                            
                                            JToken timeValue = substatusesValue["time"];
                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                instanceViewStatusInstance.Time = timeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken statusesArray = instanceViewValue["statuses"];
                                    if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue in ((JArray)statusesArray))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                            
                                            JToken codeValue2 = statusesValue["code"];
                                            if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                            {
                                                string codeInstance2 = ((string)codeValue2);
                                                instanceViewStatusInstance2.Code = codeInstance2;
                                            }
                                            
                                            JToken levelValue2 = statusesValue["level"];
                                            if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                            {
                                                string levelInstance2 = ((string)levelValue2);
                                                instanceViewStatusInstance2.Level = levelInstance2;
                                            }
                                            
                                            JToken displayStatusValue2 = statusesValue["displayStatus"];
                                            if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance2 = ((string)displayStatusValue2);
                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance2;
                                            }
                                            
                                            JToken messageValue2 = statusesValue["message"];
                                            if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                            {
                                                string messageInstance2 = ((string)messageValue2);
                                                instanceViewStatusInstance2.Message = messageInstance2;
                                            }
                                            
                                            JToken timeValue2 = statusesValue["time"];
                                            if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                instanceViewStatusInstance2.Time = timeInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                virtualMachineExtensionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                virtualMachineExtensionInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                virtualMachineExtensionInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualMachineExtensionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    virtualMachineExtensionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
