// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.Store;
using Microsoft.Azure.Management.DataLake.Store.Models;

namespace Microsoft.Azure.Management.DataLake.Store
{
    /// <summary>
    /// Creates a Data Lake Store account management client.
    /// </summary>
    public static partial class DataLakeStoreAccountOperationsExtensions
    {
        /// <summary>
        /// Creates the specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account will be
        /// associated with.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginCreate(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).BeginCreateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates the specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account will be
        /// associated with.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginCreateAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginDelete(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).BeginDeleteAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginDeleteAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.BeginDeleteAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Store account object specified by the account
        /// name with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginUpdate(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).BeginUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Store account object specified by the account
        /// name with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginUpdateAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return operations.BeginUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates the specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Create(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).CreateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates the specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> CreateAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates or updates the specified Data Lake Store account with the
        /// specified firewall rules.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account is in.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to add the firewall rule to
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create firewall rule operation.
        /// </param>
        /// <returns>
        /// Data Lake Store account Firewall rule information response.
        /// </returns>
        public static DataLakeStoreFirewallRuleCreateUpdateOrGetResponse CreateOrUpdateFirewallRule(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, DataLakeStoreFirewallRuleCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).CreateOrUpdateFirewallRuleAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates the specified Data Lake Store account with the
        /// specified firewall rules.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account is in.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to add the firewall rule to
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create firewall rule operation.
        /// </param>
        /// <returns>
        /// Data Lake Store account Firewall rule information response.
        /// </returns>
        public static Task<DataLakeStoreFirewallRuleCreateUpdateOrGetResponse> CreateOrUpdateFirewallRuleAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, DataLakeStoreFirewallRuleCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateFirewallRuleAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Delete(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).DeleteAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> DeleteAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.DeleteAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the specified firewall rule from the specified Data Lake
        /// Store account
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete the firewall rule from
        /// </param>
        /// <param name='firewallRuleName'>
        /// Required. The name of the firewall rule to delete
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteFirewallRule(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, string firewallRuleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).DeleteFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the specified firewall rule from the specified Data Lake
        /// Store account
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete the firewall rule from
        /// </param>
        /// <param name='firewallRuleName'>
        /// Required. The name of the firewall rule to delete
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteFirewallRuleAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, string firewallRuleName)
        {
            return operations.DeleteFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake firewall rule objects within
        /// the specified account, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next firewall rule page.
        /// </param>
        /// <returns>
        /// Data Lake firewall rule list information.
        /// </returns>
        public static DataLakeStoreFirewallRuleListResponse FirewallRulesListNext(this IDataLakeStoreAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).FirewallRulesListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake firewall rule objects within
        /// the specified account, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next firewall rule page.
        /// </param>
        /// <returns>
        /// Data Lake firewall rule list information.
        /// </returns>
        public static Task<DataLakeStoreFirewallRuleListResponse> FirewallRulesListNextAsync(this IDataLakeStoreAccountOperations operations, string nextLink)
        {
            return operations.FirewallRulesListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Store account information response.
        /// </returns>
        public static DataLakeStoreAccountGetResponse Get(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).GetAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Data Lake Store account object specified by the account
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Store account information response.
        /// </returns>
        public static Task<DataLakeStoreAccountGetResponse> GetAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.GetAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified Data Lake firewall rules.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account is in.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to get the firewall rules from
        /// </param>
        /// <param name='firewallRuleName'>
        /// Required. the name of the firewall rule to retrieve.
        /// </param>
        /// <returns>
        /// Data Lake Store account Firewall rule information response.
        /// </returns>
        public static DataLakeStoreFirewallRuleCreateUpdateOrGetResponse GetFirewallRule(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, string firewallRuleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).GetFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified Data Lake firewall rules.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account is in.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to get the firewall rules from
        /// </param>
        /// <param name='firewallRuleName'>
        /// Required. the name of the firewall rule to retrieve.
        /// </param>
        /// <returns>
        /// Data Lake Store account Firewall rule information response.
        /// </returns>
        public static Task<DataLakeStoreFirewallRuleCreateUpdateOrGetResponse> GetFirewallRuleAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName, string firewallRuleName)
        {
            return operations.GetFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the Data Lake Store account objects within the subscription
        /// or within a specific resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all Data Lake
        /// Store account items.
        /// </param>
        /// <returns>
        /// Data Lake Store account list information response.
        /// </returns>
        public static DataLakeStoreAccountListResponse List(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).ListAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the Data Lake Store account objects within the subscription
        /// or within a specific resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all Data Lake
        /// Store account items.
        /// </param>
        /// <returns>
        /// Data Lake Store account list information response.
        /// </returns>
        public static Task<DataLakeStoreAccountListResponse> ListAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the Data Lake firewall rules objects within the specified
        /// Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to get the firewall rules from
        /// </param>
        /// <returns>
        /// Data Lake firewall rule list information.
        /// </returns>
        public static DataLakeStoreFirewallRuleListResponse ListFirewallRules(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).ListFirewallRulesAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the Data Lake firewall rules objects within the specified
        /// Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to get the firewall rules from
        /// </param>
        /// <returns>
        /// Data Lake firewall rule list information.
        /// </returns>
        public static Task<DataLakeStoreFirewallRuleListResponse> ListFirewallRulesAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.ListFirewallRulesAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Store account objects within
        /// the subscription or within a specific resource group with the link
        /// to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Store account page.
        /// </param>
        /// <returns>
        /// Data Lake Store account list information response.
        /// </returns>
        public static DataLakeStoreAccountListResponse ListNext(this IDataLakeStoreAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Store account objects within
        /// the subscription or within a specific resource group with the link
        /// to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Store account page.
        /// </param>
        /// <returns>
        /// Data Lake Store account list information response.
        /// </returns>
        public static Task<DataLakeStoreAccountListResponse> ListNextAsync(this IDataLakeStoreAccountOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Store account object specified by the account
        /// name with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Update(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeStoreAccountOperations)s).UpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Store account object specified by the account
        /// name with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Store account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> UpdateAsync(this IDataLakeStoreAccountOperations operations, string resourceGroupName, DataLakeStoreAccountCreateOrUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
    }
}
