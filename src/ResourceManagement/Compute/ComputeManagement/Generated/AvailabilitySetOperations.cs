// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// Operations for managing the availability sets in compute management.
    /// </summary>
    internal partial class AvailabilitySetOperations : IServiceOperations<ComputeManagementClient>, IAvailabilitySetOperations
    {
        /// <summary>
        /// Initializes a new instance of the AvailabilitySetOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AvailabilitySetOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The operation to create or update the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Availability Set
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, AvailabilitySet parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject availabilitySetJsonValue = new JObject();
                requestDoc = availabilitySetJsonValue;
                
                JObject propertiesValue = new JObject();
                availabilitySetJsonValue["properties"] = propertiesValue;
                
                if (parameters.PlatformUpdateDomainCount != null)
                {
                    propertiesValue["platformUpdateDomainCount"] = parameters.PlatformUpdateDomainCount.Value;
                }
                
                if (parameters.PlatformFaultDomainCount != null)
                {
                    propertiesValue["platformFaultDomainCount"] = parameters.PlatformFaultDomainCount.Value;
                }
                
                if (parameters.VirtualMachinesReferences != null)
                {
                    if (parameters.VirtualMachinesReferences is ILazyCollection == false || ((ILazyCollection)parameters.VirtualMachinesReferences).IsInitialized)
                    {
                        JArray virtualMachinesArray = new JArray();
                        foreach (VirtualMachineReference virtualMachinesItem in parameters.VirtualMachinesReferences)
                        {
                            JObject virtualMachineReferenceValue = new JObject();
                            virtualMachinesArray.Add(virtualMachineReferenceValue);
                            
                            if (virtualMachinesItem.ReferenceUri != null)
                            {
                                virtualMachineReferenceValue["id"] = virtualMachinesItem.ReferenceUri;
                            }
                        }
                        propertiesValue["virtualMachines"] = virtualMachinesArray;
                    }
                }
                
                if (parameters.Statuses != null)
                {
                    if (parameters.Statuses is ILazyCollection == false || ((ILazyCollection)parameters.Statuses).IsInitialized)
                    {
                        JArray statusesArray = new JArray();
                        foreach (InstanceViewStatus statusesItem in parameters.Statuses)
                        {
                            JObject instanceViewStatusValue = new JObject();
                            statusesArray.Add(instanceViewStatusValue);
                            
                            if (statusesItem.Code != null)
                            {
                                instanceViewStatusValue["code"] = statusesItem.Code;
                            }
                            
                            if (statusesItem.Level != null)
                            {
                                instanceViewStatusValue["level"] = statusesItem.Level;
                            }
                            
                            if (statusesItem.DisplayStatus != null)
                            {
                                instanceViewStatusValue["displayStatus"] = statusesItem.DisplayStatus;
                            }
                            
                            if (statusesItem.Message != null)
                            {
                                instanceViewStatusValue["message"] = statusesItem.Message;
                            }
                            
                            if (statusesItem.Time != null)
                            {
                                instanceViewStatusValue["time"] = statusesItem.Time.Value;
                            }
                        }
                        propertiesValue["statuses"] = statusesArray;
                    }
                }
                
                if (parameters.Id != null)
                {
                    availabilitySetJsonValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    availabilitySetJsonValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    availabilitySetJsonValue["type"] = parameters.Type;
                }
                
                availabilitySetJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    availabilitySetJsonValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AvailabilitySet availabilitySetInstance = new AvailabilitySet();
                            result.AvailabilitySet = availabilitySetInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken platformUpdateDomainCountValue = propertiesValue2["platformUpdateDomainCount"];
                                if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                    availabilitySetInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                }
                                
                                JToken platformFaultDomainCountValue = propertiesValue2["platformFaultDomainCount"];
                                if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                    availabilitySetInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                }
                                
                                JToken virtualMachinesArray2 = propertiesValue2["virtualMachines"];
                                if (virtualMachinesArray2 != null && virtualMachinesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray2))
                                    {
                                        VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                        availabilitySetInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                        
                                        JToken idValue = virtualMachinesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                        }
                                    }
                                }
                                
                                JToken statusesArray2 = propertiesValue2["statuses"];
                                if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue in ((JArray)statusesArray2))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                        availabilitySetInstance.Statuses.Add(instanceViewStatusInstance);
                                        
                                        JToken codeValue = statusesValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            instanceViewStatusInstance.Code = codeInstance;
                                        }
                                        
                                        JToken levelValue = statusesValue["level"];
                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                        {
                                            string levelInstance = ((string)levelValue);
                                            instanceViewStatusInstance.Level = levelInstance;
                                        }
                                        
                                        JToken displayStatusValue = statusesValue["displayStatus"];
                                        if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance = ((string)displayStatusValue);
                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                        }
                                        
                                        JToken messageValue = statusesValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            instanceViewStatusInstance.Message = messageInstance;
                                        }
                                        
                                        JToken timeValue = statusesValue["time"];
                                        if (timeValue != null && timeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                            instanceViewStatusInstance.Time = timeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                availabilitySetInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                availabilitySetInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                availabilitySetInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                availabilitySetInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    availabilitySetInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get the availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// GET Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetGetResponse> GetAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AvailabilitySet availabilitySetInstance = new AvailabilitySet();
                            result.AvailabilitySet = availabilitySetInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken platformUpdateDomainCountValue = propertiesValue["platformUpdateDomainCount"];
                                if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                    availabilitySetInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                }
                                
                                JToken platformFaultDomainCountValue = propertiesValue["platformFaultDomainCount"];
                                if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                {
                                    int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                    availabilitySetInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                }
                                
                                JToken virtualMachinesArray = propertiesValue["virtualMachines"];
                                if (virtualMachinesArray != null && virtualMachinesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray))
                                    {
                                        VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                        availabilitySetInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                        
                                        JToken idValue = virtualMachinesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                        }
                                    }
                                }
                                
                                JToken statusesArray = propertiesValue["statuses"];
                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                    {
                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                        availabilitySetInstance.Statuses.Add(instanceViewStatusInstance);
                                        
                                        JToken codeValue = statusesValue["code"];
                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                        {
                                            string codeInstance = ((string)codeValue);
                                            instanceViewStatusInstance.Code = codeInstance;
                                        }
                                        
                                        JToken levelValue = statusesValue["level"];
                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                        {
                                            string levelInstance = ((string)levelValue);
                                            instanceViewStatusInstance.Level = levelInstance;
                                        }
                                        
                                        JToken displayStatusValue = statusesValue["displayStatus"];
                                        if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                        {
                                            string displayStatusInstance = ((string)displayStatusValue);
                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                        }
                                        
                                        JToken messageValue = statusesValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            instanceViewStatusInstance.Message = messageInstance;
                                        }
                                        
                                        JToken timeValue = statusesValue["time"];
                                        if (timeValue != null && timeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                            instanceViewStatusInstance.Time = timeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                availabilitySetInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                availabilitySetInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                availabilitySetInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                availabilitySetInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    availabilitySetInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list the availability sets.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Availability Set operation response.
        /// </returns>
        public async Task<AvailabilitySetListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AvailabilitySetListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AvailabilitySetListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AvailabilitySet availabilitySetJsonInstance = new AvailabilitySet();
                                    result.AvailabilitySets.Add(availabilitySetJsonInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken platformUpdateDomainCountValue = propertiesValue["platformUpdateDomainCount"];
                                        if (platformUpdateDomainCountValue != null && platformUpdateDomainCountValue.Type != JTokenType.Null)
                                        {
                                            int platformUpdateDomainCountInstance = ((int)platformUpdateDomainCountValue);
                                            availabilitySetJsonInstance.PlatformUpdateDomainCount = platformUpdateDomainCountInstance;
                                        }
                                        
                                        JToken platformFaultDomainCountValue = propertiesValue["platformFaultDomainCount"];
                                        if (platformFaultDomainCountValue != null && platformFaultDomainCountValue.Type != JTokenType.Null)
                                        {
                                            int platformFaultDomainCountInstance = ((int)platformFaultDomainCountValue);
                                            availabilitySetJsonInstance.PlatformFaultDomainCount = platformFaultDomainCountInstance;
                                        }
                                        
                                        JToken virtualMachinesArray = propertiesValue["virtualMachines"];
                                        if (virtualMachinesArray != null && virtualMachinesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken virtualMachinesValue in ((JArray)virtualMachinesArray))
                                            {
                                                VirtualMachineReference virtualMachineReferenceInstance = new VirtualMachineReference();
                                                availabilitySetJsonInstance.VirtualMachinesReferences.Add(virtualMachineReferenceInstance);
                                                
                                                JToken idValue = virtualMachinesValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    virtualMachineReferenceInstance.ReferenceUri = idInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = propertiesValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                availabilitySetJsonInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue = statusesValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    instanceViewStatusInstance.Code = codeInstance;
                                                }
                                                
                                                JToken levelValue = statusesValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    instanceViewStatusInstance.Level = levelInstance;
                                                }
                                                
                                                JToken displayStatusValue = statusesValue["displayStatus"];
                                                if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance = ((string)displayStatusValue);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance;
                                                }
                                                
                                                JToken messageValue = statusesValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    instanceViewStatusInstance.Message = messageInstance;
                                                }
                                                
                                                JToken timeValue = statusesValue["time"];
                                                if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                    instanceViewStatusInstance.Time = timeInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        availabilitySetJsonInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        availabilitySetJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        availabilitySetJsonInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        availabilitySetJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            availabilitySetJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for an
        /// availability set.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='availabilitySetName'>
        /// Required. The name of the availability set.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string availabilitySetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (availabilitySetName == null)
            {
                throw new ArgumentNullException("availabilitySetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("availabilitySetName", availabilitySetName);
                TracingAdapter.Enter(invocationId, this, "ListAvailableSizesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/availabilitySets/";
            url = url + Uri.EscapeDataString(availabilitySetName);
            url = url + "/vmSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineSizeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineSizeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineSize virtualMachineSizeInstance = new VirtualMachineSize();
                                    result.VirtualMachineSizes.Add(virtualMachineSizeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken numberOfCoresValue = valueValue["numberOfCores"];
                                    if (numberOfCoresValue != null && numberOfCoresValue.Type != JTokenType.Null)
                                    {
                                        int numberOfCoresInstance = ((int)numberOfCoresValue);
                                        virtualMachineSizeInstance.NumberOfCores = numberOfCoresInstance;
                                    }
                                    
                                    JToken osDiskSizeInMBValue = valueValue["osDiskSizeInMB"];
                                    if (osDiskSizeInMBValue != null && osDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int osDiskSizeInMBInstance = ((int)osDiskSizeInMBValue);
                                        virtualMachineSizeInstance.OSDiskSizeInMB = osDiskSizeInMBInstance;
                                    }
                                    
                                    JToken resourceDiskSizeInMBValue = valueValue["resourceDiskSizeInMB"];
                                    if (resourceDiskSizeInMBValue != null && resourceDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int resourceDiskSizeInMBInstance = ((int)resourceDiskSizeInMBValue);
                                        virtualMachineSizeInstance.ResourceDiskSizeInMB = resourceDiskSizeInMBInstance;
                                    }
                                    
                                    JToken memoryInMBValue = valueValue["memoryInMB"];
                                    if (memoryInMBValue != null && memoryInMBValue.Type != JTokenType.Null)
                                    {
                                        int memoryInMBInstance = ((int)memoryInMBValue);
                                        virtualMachineSizeInstance.MemoryInMB = memoryInMBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        virtualMachineSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
