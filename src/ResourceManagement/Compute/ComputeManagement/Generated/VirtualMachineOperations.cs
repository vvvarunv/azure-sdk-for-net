// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// Operations for managing the virtual machines in compute management.
    /// </summary>
    internal partial class VirtualMachineOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginCapturingAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DestinationContainerName == null)
            {
                throw new ArgumentNullException("parameters.DestinationContainerName");
            }
            if (parameters.VirtualHardDiskNamePrefix == null)
            {
                throw new ArgumentNullException("parameters.VirtualHardDiskNamePrefix");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCapturingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/capture";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineCaptureParametersValue = new JObject();
                requestDoc = virtualMachineCaptureParametersValue;
                
                virtualMachineCaptureParametersValue["vhdPrefix"] = parameters.VirtualHardDiskNamePrefix;
                
                virtualMachineCaptureParametersValue["destinationContainerName"] = parameters.DestinationContainerName;
                
                virtualMachineCaptureParametersValue["overwriteVhds"] = parameters.Overwrite;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Extensions != null)
            {
                foreach (VirtualMachineExtension extensionsParameterItem in parameters.Extensions)
                {
                    if (extensionsParameterItem.Location == null)
                    {
                        throw new ArgumentNullException("parameters.Extensions.Location");
                    }
                }
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.StorageProfile != null)
            {
                if (parameters.StorageProfile.DataDisks != null)
                {
                    foreach (DataDisk dataDisksParameterItem in parameters.StorageProfile.DataDisks)
                    {
                        if (dataDisksParameterItem.CreateOption == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.CreateOption");
                        }
                        if (dataDisksParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.Name");
                        }
                        if (dataDisksParameterItem.VirtualHardDisk == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.DataDisks.VirtualHardDisk");
                        }
                    }
                }
                if (parameters.StorageProfile.OSDisk != null)
                {
                    if (parameters.StorageProfile.OSDisk.CreateOption == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.CreateOption");
                    }
                    if (parameters.StorageProfile.OSDisk.EncryptionSettings != null)
                    {
                        if (parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey");
                        }
                        if (parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SecretUrl == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SecretUrl");
                        }
                        if (parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SourceVault == null)
                        {
                            throw new ArgumentNullException("parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SourceVault");
                        }
                        if (parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey != null)
                        {
                            if (parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.KeyUrl == null)
                            {
                                throw new ArgumentNullException("parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.KeyUrl");
                            }
                            if (parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.SourceVault == null)
                            {
                                throw new ArgumentNullException("parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.SourceVault");
                            }
                        }
                    }
                    if (parameters.StorageProfile.OSDisk.Name == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.Name");
                    }
                    if (parameters.StorageProfile.OSDisk.VirtualHardDisk == null)
                    {
                        throw new ArgumentNullException("parameters.StorageProfile.OSDisk.VirtualHardDisk");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualMachineJsonValue = new JObject();
                requestDoc = virtualMachineJsonValue;
                
                if (parameters.Plan != null)
                {
                    JObject planValue = new JObject();
                    virtualMachineJsonValue["plan"] = planValue;
                    
                    if (parameters.Plan.Name != null)
                    {
                        planValue["name"] = parameters.Plan.Name;
                    }
                    
                    if (parameters.Plan.Publisher != null)
                    {
                        planValue["publisher"] = parameters.Plan.Publisher;
                    }
                    
                    if (parameters.Plan.Product != null)
                    {
                        planValue["product"] = parameters.Plan.Product;
                    }
                    
                    if (parameters.Plan.PromotionCode != null)
                    {
                        planValue["promotionCode"] = parameters.Plan.PromotionCode;
                    }
                }
                
                JObject propertiesValue = new JObject();
                virtualMachineJsonValue["properties"] = propertiesValue;
                
                if (parameters.HardwareProfile != null)
                {
                    JObject hardwareProfileValue = new JObject();
                    propertiesValue["hardwareProfile"] = hardwareProfileValue;
                    
                    if (parameters.HardwareProfile.VirtualMachineSize != null)
                    {
                        hardwareProfileValue["vmSize"] = parameters.HardwareProfile.VirtualMachineSize;
                    }
                }
                
                if (parameters.StorageProfile != null)
                {
                    JObject storageProfileValue = new JObject();
                    propertiesValue["storageProfile"] = storageProfileValue;
                    
                    if (parameters.StorageProfile.ImageReference != null)
                    {
                        JObject imageReferenceValue = new JObject();
                        storageProfileValue["imageReference"] = imageReferenceValue;
                        
                        if (parameters.StorageProfile.ImageReference.Publisher != null)
                        {
                            imageReferenceValue["publisher"] = parameters.StorageProfile.ImageReference.Publisher;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Offer != null)
                        {
                            imageReferenceValue["offer"] = parameters.StorageProfile.ImageReference.Offer;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Sku != null)
                        {
                            imageReferenceValue["sku"] = parameters.StorageProfile.ImageReference.Sku;
                        }
                        
                        if (parameters.StorageProfile.ImageReference.Version != null)
                        {
                            imageReferenceValue["version"] = parameters.StorageProfile.ImageReference.Version;
                        }
                    }
                    
                    if (parameters.StorageProfile.OSDisk != null)
                    {
                        JObject osDiskValue = new JObject();
                        storageProfileValue["osDisk"] = osDiskValue;
                        
                        if (parameters.StorageProfile.OSDisk.OperatingSystemType != null)
                        {
                            osDiskValue["osType"] = parameters.StorageProfile.OSDisk.OperatingSystemType;
                        }
                        
                        if (parameters.StorageProfile.OSDisk.EncryptionSettings != null)
                        {
                            JObject encryptionSettingsValue = new JObject();
                            osDiskValue["encryptionSettings"] = encryptionSettingsValue;
                            
                            JObject diskEncryptionKeyValue = new JObject();
                            encryptionSettingsValue["diskEncryptionKey"] = diskEncryptionKeyValue;
                            
                            diskEncryptionKeyValue["secretUrl"] = parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SecretUrl;
                            
                            JObject sourceVaultValue = new JObject();
                            diskEncryptionKeyValue["sourceVault"] = sourceVaultValue;
                            
                            if (parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SourceVault.ReferenceUri != null)
                            {
                                sourceVaultValue["id"] = parameters.StorageProfile.OSDisk.EncryptionSettings.DiskEncryptionKey.SourceVault.ReferenceUri;
                            }
                            
                            if (parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey != null)
                            {
                                JObject keyEncryptionKeyValue = new JObject();
                                encryptionSettingsValue["keyEncryptionKey"] = keyEncryptionKeyValue;
                                
                                keyEncryptionKeyValue["keyUrl"] = parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.KeyUrl;
                                
                                JObject sourceVaultValue2 = new JObject();
                                keyEncryptionKeyValue["sourceVault"] = sourceVaultValue2;
                                
                                if (parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.SourceVault.ReferenceUri != null)
                                {
                                    sourceVaultValue2["id"] = parameters.StorageProfile.OSDisk.EncryptionSettings.KeyEncryptionKey.SourceVault.ReferenceUri;
                                }
                            }
                        }
                        
                        osDiskValue["name"] = parameters.StorageProfile.OSDisk.Name;
                        
                        JObject vhdValue = new JObject();
                        osDiskValue["vhd"] = vhdValue;
                        
                        if (parameters.StorageProfile.OSDisk.VirtualHardDisk.Uri != null)
                        {
                            vhdValue["uri"] = parameters.StorageProfile.OSDisk.VirtualHardDisk.Uri;
                        }
                        
                        if (parameters.StorageProfile.OSDisk.SourceImage != null)
                        {
                            JObject imageValue = new JObject();
                            osDiskValue["image"] = imageValue;
                            
                            if (parameters.StorageProfile.OSDisk.SourceImage.Uri != null)
                            {
                                imageValue["uri"] = parameters.StorageProfile.OSDisk.SourceImage.Uri;
                            }
                        }
                        
                        if (parameters.StorageProfile.OSDisk.Caching != null)
                        {
                            osDiskValue["caching"] = parameters.StorageProfile.OSDisk.Caching;
                        }
                        
                        osDiskValue["createOption"] = parameters.StorageProfile.OSDisk.CreateOption;
                        
                        if (parameters.StorageProfile.OSDisk.DiskSizeGB != null)
                        {
                            osDiskValue["diskSizeGB"] = parameters.StorageProfile.OSDisk.DiskSizeGB.Value;
                        }
                    }
                    
                    if (parameters.StorageProfile.DataDisks != null)
                    {
                        if (parameters.StorageProfile.DataDisks is ILazyCollection == false || ((ILazyCollection)parameters.StorageProfile.DataDisks).IsInitialized)
                        {
                            JArray dataDisksArray = new JArray();
                            foreach (DataDisk dataDisksItem in parameters.StorageProfile.DataDisks)
                            {
                                JObject dataDiskValue = new JObject();
                                dataDisksArray.Add(dataDiskValue);
                                
                                dataDiskValue["lun"] = dataDisksItem.Lun;
                                
                                dataDiskValue["name"] = dataDisksItem.Name;
                                
                                JObject vhdValue2 = new JObject();
                                dataDiskValue["vhd"] = vhdValue2;
                                
                                if (dataDisksItem.VirtualHardDisk.Uri != null)
                                {
                                    vhdValue2["uri"] = dataDisksItem.VirtualHardDisk.Uri;
                                }
                                
                                if (dataDisksItem.SourceImage != null)
                                {
                                    JObject imageValue2 = new JObject();
                                    dataDiskValue["image"] = imageValue2;
                                    
                                    if (dataDisksItem.SourceImage.Uri != null)
                                    {
                                        imageValue2["uri"] = dataDisksItem.SourceImage.Uri;
                                    }
                                }
                                
                                if (dataDisksItem.Caching != null)
                                {
                                    dataDiskValue["caching"] = dataDisksItem.Caching;
                                }
                                
                                dataDiskValue["createOption"] = dataDisksItem.CreateOption;
                                
                                if (dataDisksItem.DiskSizeGB != null)
                                {
                                    dataDiskValue["diskSizeGB"] = dataDisksItem.DiskSizeGB.Value;
                                }
                            }
                            storageProfileValue["dataDisks"] = dataDisksArray;
                        }
                    }
                }
                
                if (parameters.OSProfile != null)
                {
                    JObject osProfileValue = new JObject();
                    propertiesValue["osProfile"] = osProfileValue;
                    
                    if (parameters.OSProfile.ComputerName != null)
                    {
                        osProfileValue["computerName"] = parameters.OSProfile.ComputerName;
                    }
                    
                    if (parameters.OSProfile.AdminUsername != null)
                    {
                        osProfileValue["adminUsername"] = parameters.OSProfile.AdminUsername;
                    }
                    
                    if (parameters.OSProfile.AdminPassword != null)
                    {
                        osProfileValue["adminPassword"] = parameters.OSProfile.AdminPassword;
                    }
                    
                    if (parameters.OSProfile.CustomData != null)
                    {
                        osProfileValue["customData"] = parameters.OSProfile.CustomData;
                    }
                    
                    if (parameters.OSProfile.WindowsConfiguration != null)
                    {
                        JObject windowsConfigurationValue = new JObject();
                        osProfileValue["windowsConfiguration"] = windowsConfigurationValue;
                        
                        if (parameters.OSProfile.WindowsConfiguration.ProvisionVMAgent != null)
                        {
                            windowsConfigurationValue["provisionVMAgent"] = parameters.OSProfile.WindowsConfiguration.ProvisionVMAgent.Value;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.EnableAutomaticUpdates != null)
                        {
                            windowsConfigurationValue["enableAutomaticUpdates"] = parameters.OSProfile.WindowsConfiguration.EnableAutomaticUpdates.Value;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.TimeZone != null)
                        {
                            windowsConfigurationValue["timeZone"] = parameters.OSProfile.WindowsConfiguration.TimeZone;
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents != null)
                        {
                            if (parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents).IsInitialized)
                            {
                                JArray additionalUnattendContentArray = new JArray();
                                foreach (AdditionalUnattendContent additionalUnattendContentItem in parameters.OSProfile.WindowsConfiguration.AdditionalUnattendContents)
                                {
                                    JObject additionalUnattendContentValue = new JObject();
                                    additionalUnattendContentArray.Add(additionalUnattendContentValue);
                                    
                                    if (additionalUnattendContentItem.PassName != null)
                                    {
                                        additionalUnattendContentValue["passName"] = additionalUnattendContentItem.PassName;
                                    }
                                    
                                    if (additionalUnattendContentItem.ComponentName != null)
                                    {
                                        additionalUnattendContentValue["componentName"] = additionalUnattendContentItem.ComponentName;
                                    }
                                    
                                    if (additionalUnattendContentItem.SettingName != null)
                                    {
                                        additionalUnattendContentValue["settingName"] = additionalUnattendContentItem.SettingName;
                                    }
                                    
                                    if (additionalUnattendContentItem.Content != null)
                                    {
                                        additionalUnattendContentValue["content"] = additionalUnattendContentItem.Content;
                                    }
                                }
                                windowsConfigurationValue["additionalUnattendContent"] = additionalUnattendContentArray;
                            }
                        }
                        
                        if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration != null)
                        {
                            JObject winRMValue = new JObject();
                            windowsConfigurationValue["winRM"] = winRMValue;
                            
                            if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners != null)
                            {
                                if (parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners).IsInitialized)
                                {
                                    JArray listenersArray = new JArray();
                                    foreach (WinRMListener listenersItem in parameters.OSProfile.WindowsConfiguration.WinRMConfiguration.Listeners)
                                    {
                                        JObject winRMListenerValue = new JObject();
                                        listenersArray.Add(winRMListenerValue);
                                        
                                        if (listenersItem.Protocol != null)
                                        {
                                            winRMListenerValue["protocol"] = listenersItem.Protocol;
                                        }
                                        
                                        if (listenersItem.CertificateUrl != null)
                                        {
                                            winRMListenerValue["certificateUrl"] = listenersItem.CertificateUrl.AbsoluteUri;
                                        }
                                    }
                                    winRMValue["listeners"] = listenersArray;
                                }
                            }
                        }
                    }
                    
                    if (parameters.OSProfile.LinuxConfiguration != null)
                    {
                        JObject linuxConfigurationValue = new JObject();
                        osProfileValue["linuxConfiguration"] = linuxConfigurationValue;
                        
                        if (parameters.OSProfile.LinuxConfiguration.DisablePasswordAuthentication != null)
                        {
                            linuxConfigurationValue["disablePasswordAuthentication"] = parameters.OSProfile.LinuxConfiguration.DisablePasswordAuthentication.Value;
                        }
                        
                        if (parameters.OSProfile.LinuxConfiguration.SshConfiguration != null)
                        {
                            JObject sshValue = new JObject();
                            linuxConfigurationValue["ssh"] = sshValue;
                            
                            if (parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys != null)
                            {
                                if (parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys is ILazyCollection == false || ((ILazyCollection)parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys).IsInitialized)
                                {
                                    JArray publicKeysArray = new JArray();
                                    foreach (SshPublicKey publicKeysItem in parameters.OSProfile.LinuxConfiguration.SshConfiguration.PublicKeys)
                                    {
                                        JObject sshPublicKeyValue = new JObject();
                                        publicKeysArray.Add(sshPublicKeyValue);
                                        
                                        if (publicKeysItem.Path != null)
                                        {
                                            sshPublicKeyValue["path"] = publicKeysItem.Path;
                                        }
                                        
                                        if (publicKeysItem.KeyData != null)
                                        {
                                            sshPublicKeyValue["keyData"] = publicKeysItem.KeyData;
                                        }
                                    }
                                    sshValue["publicKeys"] = publicKeysArray;
                                }
                            }
                        }
                    }
                    
                    if (parameters.OSProfile.Secrets != null)
                    {
                        JArray secretsArray = new JArray();
                        foreach (VaultSecretGroup secretsItem in parameters.OSProfile.Secrets)
                        {
                            JObject vaultSecretGroupValue = new JObject();
                            secretsArray.Add(vaultSecretGroupValue);
                            
                            if (secretsItem.SourceVault != null)
                            {
                                JObject sourceVaultValue3 = new JObject();
                                vaultSecretGroupValue["sourceVault"] = sourceVaultValue3;
                                
                                if (secretsItem.SourceVault.ReferenceUri != null)
                                {
                                    sourceVaultValue3["id"] = secretsItem.SourceVault.ReferenceUri;
                                }
                            }
                            
                            if (secretsItem.VaultCertificates != null)
                            {
                                if (secretsItem.VaultCertificates is ILazyCollection == false || ((ILazyCollection)secretsItem.VaultCertificates).IsInitialized)
                                {
                                    JArray vaultCertificatesArray = new JArray();
                                    foreach (VaultCertificate vaultCertificatesItem in secretsItem.VaultCertificates)
                                    {
                                        JObject vaultCertificateValue = new JObject();
                                        vaultCertificatesArray.Add(vaultCertificateValue);
                                        
                                        if (vaultCertificatesItem.CertificateUrl != null)
                                        {
                                            vaultCertificateValue["certificateUrl"] = vaultCertificatesItem.CertificateUrl;
                                        }
                                        
                                        if (vaultCertificatesItem.CertificateStore != null)
                                        {
                                            vaultCertificateValue["certificateStore"] = vaultCertificatesItem.CertificateStore;
                                        }
                                    }
                                    vaultSecretGroupValue["vaultCertificates"] = vaultCertificatesArray;
                                }
                            }
                        }
                        osProfileValue["secrets"] = secretsArray;
                    }
                }
                
                if (parameters.NetworkProfile != null)
                {
                    JObject networkProfileValue = new JObject();
                    propertiesValue["networkProfile"] = networkProfileValue;
                    
                    if (parameters.NetworkProfile.NetworkInterfaces != null)
                    {
                        if (parameters.NetworkProfile.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)parameters.NetworkProfile.NetworkInterfaces).IsInitialized)
                        {
                            JArray networkInterfacesArray = new JArray();
                            foreach (NetworkInterfaceReference networkInterfacesItem in parameters.NetworkProfile.NetworkInterfaces)
                            {
                                JObject networkInterfaceReferenceJsonValue = new JObject();
                                networkInterfacesArray.Add(networkInterfaceReferenceJsonValue);
                                
                                JObject propertiesValue2 = new JObject();
                                networkInterfaceReferenceJsonValue["properties"] = propertiesValue2;
                                
                                if (networkInterfacesItem.Primary != null)
                                {
                                    propertiesValue2["primary"] = networkInterfacesItem.Primary.Value;
                                }
                                
                                if (networkInterfacesItem.ReferenceUri != null)
                                {
                                    networkInterfaceReferenceJsonValue["id"] = networkInterfacesItem.ReferenceUri;
                                }
                            }
                            networkProfileValue["networkInterfaces"] = networkInterfacesArray;
                        }
                    }
                }
                
                if (parameters.DiagnosticsProfile != null)
                {
                    JObject diagnosticsProfileValue = new JObject();
                    propertiesValue["diagnosticsProfile"] = diagnosticsProfileValue;
                    
                    if (parameters.DiagnosticsProfile.BootDiagnostics != null)
                    {
                        JObject bootDiagnosticsValue = new JObject();
                        diagnosticsProfileValue["bootDiagnostics"] = bootDiagnosticsValue;
                        
                        if (parameters.DiagnosticsProfile.BootDiagnostics.Enabled != null)
                        {
                            bootDiagnosticsValue["enabled"] = parameters.DiagnosticsProfile.BootDiagnostics.Enabled.Value;
                        }
                        
                        if (parameters.DiagnosticsProfile.BootDiagnostics.StorageUri != null)
                        {
                            bootDiagnosticsValue["storageUri"] = parameters.DiagnosticsProfile.BootDiagnostics.StorageUri.AbsoluteUri;
                        }
                    }
                }
                
                if (parameters.AvailabilitySetReference != null)
                {
                    JObject availabilitySetValue = new JObject();
                    propertiesValue["availabilitySet"] = availabilitySetValue;
                    
                    if (parameters.AvailabilitySetReference.ReferenceUri != null)
                    {
                        availabilitySetValue["id"] = parameters.AvailabilitySetReference.ReferenceUri;
                    }
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.InstanceView != null)
                {
                    JObject instanceViewValue = new JObject();
                    propertiesValue["instanceView"] = instanceViewValue;
                    
                    if (parameters.InstanceView.PlatformUpdateDomain != null)
                    {
                        instanceViewValue["platformUpdateDomain"] = parameters.InstanceView.PlatformUpdateDomain.Value;
                    }
                    
                    if (parameters.InstanceView.PlatformFaultDomain != null)
                    {
                        instanceViewValue["platformFaultDomain"] = parameters.InstanceView.PlatformFaultDomain.Value;
                    }
                    
                    if (parameters.InstanceView.RemoteDesktopThumbprint != null)
                    {
                        instanceViewValue["rdpThumbPrint"] = parameters.InstanceView.RemoteDesktopThumbprint;
                    }
                    
                    if (parameters.InstanceView.VMAgent != null)
                    {
                        JObject vmAgentValue = new JObject();
                        instanceViewValue["vmAgent"] = vmAgentValue;
                        
                        if (parameters.InstanceView.VMAgent.VMAgentVersion != null)
                        {
                            vmAgentValue["vmAgentVersion"] = parameters.InstanceView.VMAgent.VMAgentVersion;
                        }
                        
                        if (parameters.InstanceView.VMAgent.ExtensionHandlers != null)
                        {
                            if (parameters.InstanceView.VMAgent.ExtensionHandlers is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.VMAgent.ExtensionHandlers).IsInitialized)
                            {
                                JArray extensionHandlersArray = new JArray();
                                foreach (VirtualMachineExtensionHandlerInstanceView extensionHandlersItem in parameters.InstanceView.VMAgent.ExtensionHandlers)
                                {
                                    JObject virtualMachineExtensionHandlerInstanceViewValue = new JObject();
                                    extensionHandlersArray.Add(virtualMachineExtensionHandlerInstanceViewValue);
                                    
                                    if (extensionHandlersItem.Type != null)
                                    {
                                        virtualMachineExtensionHandlerInstanceViewValue["type"] = extensionHandlersItem.Type;
                                    }
                                    
                                    if (extensionHandlersItem.TypeHandlerVersion != null)
                                    {
                                        virtualMachineExtensionHandlerInstanceViewValue["typeHandlerVersion"] = extensionHandlersItem.TypeHandlerVersion;
                                    }
                                    
                                    if (extensionHandlersItem.Status != null)
                                    {
                                        JObject statusValue = new JObject();
                                        virtualMachineExtensionHandlerInstanceViewValue["status"] = statusValue;
                                        
                                        if (extensionHandlersItem.Status.Code != null)
                                        {
                                            statusValue["code"] = extensionHandlersItem.Status.Code;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Level != null)
                                        {
                                            statusValue["level"] = extensionHandlersItem.Status.Level;
                                        }
                                        
                                        if (extensionHandlersItem.Status.DisplayStatus != null)
                                        {
                                            statusValue["displayStatus"] = extensionHandlersItem.Status.DisplayStatus;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Message != null)
                                        {
                                            statusValue["message"] = extensionHandlersItem.Status.Message;
                                        }
                                        
                                        if (extensionHandlersItem.Status.Time != null)
                                        {
                                            statusValue["time"] = extensionHandlersItem.Status.Time.Value;
                                        }
                                    }
                                }
                                vmAgentValue["extensionHandlers"] = extensionHandlersArray;
                            }
                        }
                        
                        if (parameters.InstanceView.VMAgent.Statuses != null)
                        {
                            JArray statusesArray = new JArray();
                            foreach (InstanceViewStatus statusesItem in parameters.InstanceView.VMAgent.Statuses)
                            {
                                JObject instanceViewStatusValue = new JObject();
                                statusesArray.Add(instanceViewStatusValue);
                                
                                if (statusesItem.Code != null)
                                {
                                    instanceViewStatusValue["code"] = statusesItem.Code;
                                }
                                
                                if (statusesItem.Level != null)
                                {
                                    instanceViewStatusValue["level"] = statusesItem.Level;
                                }
                                
                                if (statusesItem.DisplayStatus != null)
                                {
                                    instanceViewStatusValue["displayStatus"] = statusesItem.DisplayStatus;
                                }
                                
                                if (statusesItem.Message != null)
                                {
                                    instanceViewStatusValue["message"] = statusesItem.Message;
                                }
                                
                                if (statusesItem.Time != null)
                                {
                                    instanceViewStatusValue["time"] = statusesItem.Time.Value;
                                }
                            }
                            vmAgentValue["statuses"] = statusesArray;
                        }
                    }
                    
                    if (parameters.InstanceView.Disks != null)
                    {
                        if (parameters.InstanceView.Disks is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.Disks).IsInitialized)
                        {
                            JArray disksArray = new JArray();
                            foreach (DiskInstanceView disksItem in parameters.InstanceView.Disks)
                            {
                                JObject diskInstanceViewValue = new JObject();
                                disksArray.Add(diskInstanceViewValue);
                                
                                if (disksItem.Name != null)
                                {
                                    diskInstanceViewValue["name"] = disksItem.Name;
                                }
                                
                                if (disksItem.Statuses != null)
                                {
                                    JArray statusesArray2 = new JArray();
                                    foreach (InstanceViewStatus statusesItem2 in disksItem.Statuses)
                                    {
                                        JObject instanceViewStatusValue2 = new JObject();
                                        statusesArray2.Add(instanceViewStatusValue2);
                                        
                                        if (statusesItem2.Code != null)
                                        {
                                            instanceViewStatusValue2["code"] = statusesItem2.Code;
                                        }
                                        
                                        if (statusesItem2.Level != null)
                                        {
                                            instanceViewStatusValue2["level"] = statusesItem2.Level;
                                        }
                                        
                                        if (statusesItem2.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue2["displayStatus"] = statusesItem2.DisplayStatus;
                                        }
                                        
                                        if (statusesItem2.Message != null)
                                        {
                                            instanceViewStatusValue2["message"] = statusesItem2.Message;
                                        }
                                        
                                        if (statusesItem2.Time != null)
                                        {
                                            instanceViewStatusValue2["time"] = statusesItem2.Time.Value;
                                        }
                                    }
                                    diskInstanceViewValue["statuses"] = statusesArray2;
                                }
                            }
                            instanceViewValue["disks"] = disksArray;
                        }
                    }
                    
                    if (parameters.InstanceView.Extensions != null)
                    {
                        if (parameters.InstanceView.Extensions is ILazyCollection == false || ((ILazyCollection)parameters.InstanceView.Extensions).IsInitialized)
                        {
                            JArray extensionsArray = new JArray();
                            foreach (VirtualMachineExtensionInstanceView extensionsItem in parameters.InstanceView.Extensions)
                            {
                                JObject virtualMachineExtensionInstanceViewValue = new JObject();
                                extensionsArray.Add(virtualMachineExtensionInstanceViewValue);
                                
                                if (extensionsItem.Name != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["name"] = extensionsItem.Name;
                                }
                                
                                if (extensionsItem.ExtensionType != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["type"] = extensionsItem.ExtensionType;
                                }
                                
                                if (extensionsItem.TypeHandlerVersion != null)
                                {
                                    virtualMachineExtensionInstanceViewValue["typeHandlerVersion"] = extensionsItem.TypeHandlerVersion;
                                }
                                
                                if (extensionsItem.SubStatuses != null)
                                {
                                    if (extensionsItem.SubStatuses is ILazyCollection == false || ((ILazyCollection)extensionsItem.SubStatuses).IsInitialized)
                                    {
                                        JArray substatusesArray = new JArray();
                                        foreach (InstanceViewStatus substatusesItem in extensionsItem.SubStatuses)
                                        {
                                            JObject instanceViewStatusValue3 = new JObject();
                                            substatusesArray.Add(instanceViewStatusValue3);
                                            
                                            if (substatusesItem.Code != null)
                                            {
                                                instanceViewStatusValue3["code"] = substatusesItem.Code;
                                            }
                                            
                                            if (substatusesItem.Level != null)
                                            {
                                                instanceViewStatusValue3["level"] = substatusesItem.Level;
                                            }
                                            
                                            if (substatusesItem.DisplayStatus != null)
                                            {
                                                instanceViewStatusValue3["displayStatus"] = substatusesItem.DisplayStatus;
                                            }
                                            
                                            if (substatusesItem.Message != null)
                                            {
                                                instanceViewStatusValue3["message"] = substatusesItem.Message;
                                            }
                                            
                                            if (substatusesItem.Time != null)
                                            {
                                                instanceViewStatusValue3["time"] = substatusesItem.Time.Value;
                                            }
                                        }
                                        virtualMachineExtensionInstanceViewValue["substatuses"] = substatusesArray;
                                    }
                                }
                                
                                if (extensionsItem.Statuses != null)
                                {
                                    JArray statusesArray3 = new JArray();
                                    foreach (InstanceViewStatus statusesItem3 in extensionsItem.Statuses)
                                    {
                                        JObject instanceViewStatusValue4 = new JObject();
                                        statusesArray3.Add(instanceViewStatusValue4);
                                        
                                        if (statusesItem3.Code != null)
                                        {
                                            instanceViewStatusValue4["code"] = statusesItem3.Code;
                                        }
                                        
                                        if (statusesItem3.Level != null)
                                        {
                                            instanceViewStatusValue4["level"] = statusesItem3.Level;
                                        }
                                        
                                        if (statusesItem3.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue4["displayStatus"] = statusesItem3.DisplayStatus;
                                        }
                                        
                                        if (statusesItem3.Message != null)
                                        {
                                            instanceViewStatusValue4["message"] = statusesItem3.Message;
                                        }
                                        
                                        if (statusesItem3.Time != null)
                                        {
                                            instanceViewStatusValue4["time"] = statusesItem3.Time.Value;
                                        }
                                    }
                                    virtualMachineExtensionInstanceViewValue["statuses"] = statusesArray3;
                                }
                            }
                            instanceViewValue["extensions"] = extensionsArray;
                        }
                    }
                    
                    if (parameters.InstanceView.BootDiagnostics != null)
                    {
                        JObject bootDiagnosticsValue2 = new JObject();
                        instanceViewValue["bootDiagnostics"] = bootDiagnosticsValue2;
                        
                        if (parameters.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri != null)
                        {
                            bootDiagnosticsValue2["consoleScreenshotBlobUri"] = parameters.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri.AbsoluteUri;
                        }
                        
                        if (parameters.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri != null)
                        {
                            bootDiagnosticsValue2["serialConsoleLogBlobUri"] = parameters.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri.AbsoluteUri;
                        }
                    }
                    
                    if (parameters.InstanceView.Statuses != null)
                    {
                        JArray statusesArray4 = new JArray();
                        foreach (InstanceViewStatus statusesItem4 in parameters.InstanceView.Statuses)
                        {
                            JObject instanceViewStatusValue5 = new JObject();
                            statusesArray4.Add(instanceViewStatusValue5);
                            
                            if (statusesItem4.Code != null)
                            {
                                instanceViewStatusValue5["code"] = statusesItem4.Code;
                            }
                            
                            if (statusesItem4.Level != null)
                            {
                                instanceViewStatusValue5["level"] = statusesItem4.Level;
                            }
                            
                            if (statusesItem4.DisplayStatus != null)
                            {
                                instanceViewStatusValue5["displayStatus"] = statusesItem4.DisplayStatus;
                            }
                            
                            if (statusesItem4.Message != null)
                            {
                                instanceViewStatusValue5["message"] = statusesItem4.Message;
                            }
                            
                            if (statusesItem4.Time != null)
                            {
                                instanceViewStatusValue5["time"] = statusesItem4.Time.Value;
                            }
                        }
                        instanceViewValue["statuses"] = statusesArray4;
                    }
                }
                
                if (parameters.Extensions != null)
                {
                    JArray resourcesArray = new JArray();
                    foreach (VirtualMachineExtension resourcesItem in parameters.Extensions)
                    {
                        JObject virtualMachineExtensionJsonValue = new JObject();
                        resourcesArray.Add(virtualMachineExtensionJsonValue);
                        
                        JObject propertiesValue3 = new JObject();
                        virtualMachineExtensionJsonValue["properties"] = propertiesValue3;
                        
                        if (resourcesItem.Publisher != null)
                        {
                            propertiesValue3["publisher"] = resourcesItem.Publisher;
                        }
                        
                        if (resourcesItem.ExtensionType != null)
                        {
                            propertiesValue3["type"] = resourcesItem.ExtensionType;
                        }
                        
                        if (resourcesItem.TypeHandlerVersion != null)
                        {
                            propertiesValue3["typeHandlerVersion"] = resourcesItem.TypeHandlerVersion;
                        }
                        
                        propertiesValue3["autoUpgradeMinorVersion"] = resourcesItem.AutoUpgradeMinorVersion;
                        
                        if (resourcesItem.Settings != null)
                        {
                            propertiesValue3["settings"] = JObject.Parse(resourcesItem.Settings);
                        }
                        
                        if (resourcesItem.ProtectedSettings != null)
                        {
                            propertiesValue3["protectedSettings"] = JObject.Parse(resourcesItem.ProtectedSettings);
                        }
                        
                        if (resourcesItem.ProvisioningState != null)
                        {
                            propertiesValue3["provisioningState"] = resourcesItem.ProvisioningState;
                        }
                        
                        if (resourcesItem.InstanceView != null)
                        {
                            JObject instanceViewValue2 = new JObject();
                            propertiesValue3["instanceView"] = instanceViewValue2;
                            
                            if (resourcesItem.InstanceView.Name != null)
                            {
                                instanceViewValue2["name"] = resourcesItem.InstanceView.Name;
                            }
                            
                            if (resourcesItem.InstanceView.ExtensionType != null)
                            {
                                instanceViewValue2["type"] = resourcesItem.InstanceView.ExtensionType;
                            }
                            
                            if (resourcesItem.InstanceView.TypeHandlerVersion != null)
                            {
                                instanceViewValue2["typeHandlerVersion"] = resourcesItem.InstanceView.TypeHandlerVersion;
                            }
                            
                            if (resourcesItem.InstanceView.SubStatuses != null)
                            {
                                if (resourcesItem.InstanceView.SubStatuses is ILazyCollection == false || ((ILazyCollection)resourcesItem.InstanceView.SubStatuses).IsInitialized)
                                {
                                    JArray substatusesArray2 = new JArray();
                                    foreach (InstanceViewStatus substatusesItem2 in resourcesItem.InstanceView.SubStatuses)
                                    {
                                        JObject instanceViewStatusValue6 = new JObject();
                                        substatusesArray2.Add(instanceViewStatusValue6);
                                        
                                        if (substatusesItem2.Code != null)
                                        {
                                            instanceViewStatusValue6["code"] = substatusesItem2.Code;
                                        }
                                        
                                        if (substatusesItem2.Level != null)
                                        {
                                            instanceViewStatusValue6["level"] = substatusesItem2.Level;
                                        }
                                        
                                        if (substatusesItem2.DisplayStatus != null)
                                        {
                                            instanceViewStatusValue6["displayStatus"] = substatusesItem2.DisplayStatus;
                                        }
                                        
                                        if (substatusesItem2.Message != null)
                                        {
                                            instanceViewStatusValue6["message"] = substatusesItem2.Message;
                                        }
                                        
                                        if (substatusesItem2.Time != null)
                                        {
                                            instanceViewStatusValue6["time"] = substatusesItem2.Time.Value;
                                        }
                                    }
                                    instanceViewValue2["substatuses"] = substatusesArray2;
                                }
                            }
                            
                            if (resourcesItem.InstanceView.Statuses != null)
                            {
                                JArray statusesArray5 = new JArray();
                                foreach (InstanceViewStatus statusesItem5 in resourcesItem.InstanceView.Statuses)
                                {
                                    JObject instanceViewStatusValue7 = new JObject();
                                    statusesArray5.Add(instanceViewStatusValue7);
                                    
                                    if (statusesItem5.Code != null)
                                    {
                                        instanceViewStatusValue7["code"] = statusesItem5.Code;
                                    }
                                    
                                    if (statusesItem5.Level != null)
                                    {
                                        instanceViewStatusValue7["level"] = statusesItem5.Level;
                                    }
                                    
                                    if (statusesItem5.DisplayStatus != null)
                                    {
                                        instanceViewStatusValue7["displayStatus"] = statusesItem5.DisplayStatus;
                                    }
                                    
                                    if (statusesItem5.Message != null)
                                    {
                                        instanceViewStatusValue7["message"] = statusesItem5.Message;
                                    }
                                    
                                    if (statusesItem5.Time != null)
                                    {
                                        instanceViewStatusValue7["time"] = statusesItem5.Time.Value;
                                    }
                                }
                                instanceViewValue2["statuses"] = statusesArray5;
                            }
                        }
                        
                        if (resourcesItem.Id != null)
                        {
                            virtualMachineExtensionJsonValue["id"] = resourcesItem.Id;
                        }
                        
                        if (resourcesItem.Name != null)
                        {
                            virtualMachineExtensionJsonValue["name"] = resourcesItem.Name;
                        }
                        
                        if (resourcesItem.Type != null)
                        {
                            virtualMachineExtensionJsonValue["type"] = resourcesItem.Type;
                        }
                        
                        virtualMachineExtensionJsonValue["location"] = resourcesItem.Location;
                        
                        if (resourcesItem.Tags != null)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in resourcesItem.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            virtualMachineExtensionJsonValue["tags"] = tagsDictionary;
                        }
                    }
                    virtualMachineJsonValue["resources"] = resourcesArray;
                }
                
                if (parameters.Id != null)
                {
                    virtualMachineJsonValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    virtualMachineJsonValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    virtualMachineJsonValue["type"] = parameters.Type;
                }
                
                virtualMachineJsonValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary2 = new JObject();
                    foreach (KeyValuePair<string, string> pair2 in parameters.Tags)
                    {
                        string tagsKey2 = pair2.Key;
                        string tagsValue2 = pair2.Value;
                        tagsDictionary2[tagsKey2] = tagsValue2;
                    }
                    virtualMachineJsonValue["tags"] = tagsDictionary2;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue2 = responseDoc["plan"];
                            if (planValue2 != null && planValue2.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue2["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue2["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue2["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue4 = responseDoc["properties"];
                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue2 = propertiesValue4["hardwareProfile"];
                                if (hardwareProfileValue2 != null && hardwareProfileValue2.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue2["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue2 = propertiesValue4["storageProfile"];
                                if (storageProfileValue2 != null && storageProfileValue2.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue2 = storageProfileValue2["imageReference"];
                                    if (imageReferenceValue2 != null && imageReferenceValue2.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue2["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue2["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue2["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue2["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue2 = storageProfileValue2["osDisk"];
                                    if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue2["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken encryptionSettingsValue2 = osDiskValue2["encryptionSettings"];
                                        if (encryptionSettingsValue2 != null && encryptionSettingsValue2.Type != JTokenType.Null)
                                        {
                                            DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                            osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                            
                                            JToken diskEncryptionKeyValue2 = encryptionSettingsValue2["diskEncryptionKey"];
                                            if (diskEncryptionKeyValue2 != null && diskEncryptionKeyValue2.Type != JTokenType.Null)
                                            {
                                                KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                
                                                JToken secretUrlValue = diskEncryptionKeyValue2["secretUrl"];
                                                if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                {
                                                    string secretUrlInstance = ((string)secretUrlValue);
                                                    diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue4 = diskEncryptionKeyValue2["sourceVault"];
                                                if (sourceVaultValue4 != null && sourceVaultValue4.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                    diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                    
                                                    JToken idValue = sourceVaultValue4["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sourceVaultInstance.ReferenceUri = idInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken keyEncryptionKeyValue2 = encryptionSettingsValue2["keyEncryptionKey"];
                                            if (keyEncryptionKeyValue2 != null && keyEncryptionKeyValue2.Type != JTokenType.Null)
                                            {
                                                KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                
                                                JToken keyUrlValue = keyEncryptionKeyValue2["keyUrl"];
                                                if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                {
                                                    string keyUrlInstance = ((string)keyUrlValue);
                                                    keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue5 = keyEncryptionKeyValue2["sourceVault"];
                                                if (sourceVaultValue5 != null && sourceVaultValue5.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                    keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                    
                                                    JToken idValue2 = sourceVaultValue5["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        sourceVaultInstance2.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = osDiskValue2["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue3 = osDiskValue2["vhd"];
                                        if (vhdValue3 != null && vhdValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue3["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue3 = osDiskValue2["image"];
                                        if (imageValue3 != null && imageValue3.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue3["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue2["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue2["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                        
                                        JToken diskSizeGBValue = osDiskValue2["diskSizeGB"];
                                        if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                        {
                                            int diskSizeGBInstance = ((int)diskSizeGBValue);
                                            osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray2 = storageProfileValue2["dataDisks"];
                                    if (dataDisksArray2 != null && dataDisksArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray2))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue4 = dataDisksValue["vhd"];
                                            if (vhdValue4 != null && vhdValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue4["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue4 = dataDisksValue["image"];
                                            if (imageValue4 != null && imageValue4.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue4["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                            
                                            JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue2 = propertiesValue4["osProfile"];
                                if (osProfileValue2 != null && osProfileValue2.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue2["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue2["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue2["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue2["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue2 = osProfileValue2["windowsConfiguration"];
                                    if (windowsConfigurationValue2 != null && windowsConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue2["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue2["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue2["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray2 = windowsConfigurationValue2["additionalUnattendContent"];
                                        if (additionalUnattendContentArray2 != null && additionalUnattendContentArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue2 in ((JArray)additionalUnattendContentArray2))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue2["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue2["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue2["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue2["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue2 = windowsConfigurationValue2["winRM"];
                                        if (winRMValue2 != null && winRMValue2.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray2 = winRMValue2["listeners"];
                                            if (listenersArray2 != null && listenersArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray2))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue2 = osProfileValue2["linuxConfiguration"];
                                    if (linuxConfigurationValue2 != null && linuxConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue2["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue2 = linuxConfigurationValue2["ssh"];
                                        if (sshValue2 != null && sshValue2.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray2 = sshValue2["publicKeys"];
                                            if (publicKeysArray2 != null && publicKeysArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray2))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray2 = osProfileValue2["secrets"];
                                    if (secretsArray2 != null && secretsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray2))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue6 = secretsValue["sourceVault"];
                                            if (sourceVaultValue6 != null && sourceVaultValue6.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                
                                                JToken idValue3 = sourceVaultValue6["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    sourceVaultInstance3.ReferenceUri = idInstance3;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray2 = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray2 != null && vaultCertificatesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray2))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue2 = propertiesValue4["networkProfile"];
                                if (networkProfileValue2 != null && networkProfileValue2.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray2 = networkProfileValue2["networkInterfaces"];
                                    if (networkInterfacesArray2 != null && networkInterfacesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray2))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue5 = networkInterfacesValue["properties"];
                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue5["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue4 = networkInterfacesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                            }
                                        }
                                    }
                                }
                                
                                JToken diagnosticsProfileValue2 = propertiesValue4["diagnosticsProfile"];
                                if (diagnosticsProfileValue2 != null && diagnosticsProfileValue2.Type != JTokenType.Null)
                                {
                                    DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                    virtualMachineInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                    
                                    JToken bootDiagnosticsValue3 = diagnosticsProfileValue2["bootDiagnostics"];
                                    if (bootDiagnosticsValue3 != null && bootDiagnosticsValue3.Type != JTokenType.Null)
                                    {
                                        BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                        diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                        
                                        JToken enabledValue = bootDiagnosticsValue3["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            bootDiagnosticsInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken storageUriValue = bootDiagnosticsValue3["storageUri"];
                                        if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                        {
                                            Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                            bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue2 = propertiesValue4["availabilitySet"];
                                if (availabilitySetValue2 != null && availabilitySetValue2.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue5 = availabilitySetValue2["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        availabilitySetInstance.ReferenceUri = idInstance5;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue3 = propertiesValue4["instanceView"];
                                if (instanceViewValue3 != null && instanceViewValue3.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue3["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue3["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue3["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue2 = instanceViewValue3["vmAgent"];
                                    if (vmAgentValue2 != null && vmAgentValue2.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue2["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray2 = vmAgentValue2["extensionHandlers"];
                                        if (extensionHandlersArray2 != null && extensionHandlersArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray2))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue2 = extensionHandlersValue["status"];
                                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue2["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue2["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue2["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue2["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue2["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray6 = vmAgentValue2["statuses"];
                                        if (statusesArray6 != null && statusesArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray6))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray2 = instanceViewValue3["disks"];
                                    if (disksArray2 != null && disksArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray2))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray7 = disksValue["statuses"];
                                            if (statusesArray7 != null && statusesArray7.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray7))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray2 = instanceViewValue3["extensions"];
                                    if (extensionsArray2 != null && extensionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray2))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray3 = extensionsValue["substatuses"];
                                            if (substatusesArray3 != null && substatusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray8 = extensionsValue["statuses"];
                                            if (statusesArray8 != null && statusesArray8.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray8))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken bootDiagnosticsValue4 = instanceViewValue3["bootDiagnostics"];
                                    if (bootDiagnosticsValue4 != null && bootDiagnosticsValue4.Type != JTokenType.Null)
                                    {
                                        BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                        instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                        
                                        JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue4["consoleScreenshotBlobUri"];
                                        if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                            bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue4["serialConsoleLogBlobUri"];
                                        if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                            bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                        }
                                    }
                                    
                                    JToken statusesArray9 = instanceViewValue3["statuses"];
                                    if (statusesArray9 != null && statusesArray9.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray9))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray2 = responseDoc["resources"];
                            if (resourcesArray2 != null && resourcesArray2.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray2))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue6 = resourcesValue["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue6["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue6["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue6["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue6["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue6["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue6["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue6["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue4 = propertiesValue6["instanceView"];
                                        if (instanceViewValue4 != null && instanceViewValue4.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue4["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue4["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue4["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray4 = instanceViewValue4["substatuses"];
                                            if (substatusesArray4 != null && substatusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray10 = instanceViewValue4["statuses"];
                                            if (statusesArray10 != null && statusesArray10.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray10))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue6 = resourcesValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineExtensionJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey3 = ((string)property.Name);
                                            string tagsValue3 = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue7 = responseDoc["id"];
                            if (idValue7 != null && idValue7.Type != JTokenType.Null)
                            {
                                string idInstance7 = ((string)idValue7);
                                virtualMachineInstance.Id = idInstance7;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey4 = ((string)property2.Name);
                                    string tagsValue4 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginDeallocatingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginDeallocatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/deallocate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> BeginDeletingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteOperationResponse result = null;
                    // Deserialize Response
                    result = new DeleteOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginPoweringOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginPoweringOffAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/powerOff";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginRestartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<ComputeOperationResponse> BeginStartingAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/start";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeOperationResponse result = null;
                    // Deserialize Response
                    result = new ComputeOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CaptureAsync(string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CaptureAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginCapturingAsync(resourceGroupName, vmName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, VirtualMachine parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualMachineCreateOrUpdateResponse response = await client.VirtualMachines.BeginCreatingOrUpdatingAsync(resourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> DeallocateAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "DeallocateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginDeallocatingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public async Task<DeleteOperationResponse> DeleteAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse response = await client.VirtualMachines.BeginDeletingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteOperationResponse result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetDeleteOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> GeneralizeAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GeneralizeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/generalize";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public async Task<VirtualMachineGetResponse> GetAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue = responseDoc["plan"];
                            if (planValue != null && planValue.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue = propertiesValue["storageProfile"];
                                if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue = storageProfileValue["imageReference"];
                                    if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue = storageProfileValue["osDisk"];
                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken encryptionSettingsValue = osDiskValue["encryptionSettings"];
                                        if (encryptionSettingsValue != null && encryptionSettingsValue.Type != JTokenType.Null)
                                        {
                                            DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                            osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                            
                                            JToken diskEncryptionKeyValue = encryptionSettingsValue["diskEncryptionKey"];
                                            if (diskEncryptionKeyValue != null && diskEncryptionKeyValue.Type != JTokenType.Null)
                                            {
                                                KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                
                                                JToken secretUrlValue = diskEncryptionKeyValue["secretUrl"];
                                                if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                {
                                                    string secretUrlInstance = ((string)secretUrlValue);
                                                    diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue = diskEncryptionKeyValue["sourceVault"];
                                                if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                    diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                    
                                                    JToken idValue = sourceVaultValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sourceVaultInstance.ReferenceUri = idInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken keyEncryptionKeyValue = encryptionSettingsValue["keyEncryptionKey"];
                                            if (keyEncryptionKeyValue != null && keyEncryptionKeyValue.Type != JTokenType.Null)
                                            {
                                                KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                
                                                JToken keyUrlValue = keyEncryptionKeyValue["keyUrl"];
                                                if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                {
                                                    string keyUrlInstance = ((string)keyUrlValue);
                                                    keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue2 = keyEncryptionKeyValue["sourceVault"];
                                                if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                    keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                    
                                                    JToken idValue2 = sourceVaultValue2["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        sourceVaultInstance2.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = osDiskValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue = osDiskValue["vhd"];
                                        if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue = osDiskValue["image"];
                                        if (imageValue != null && imageValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                        
                                        JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                        if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                        {
                                            int diskSizeGBInstance = ((int)diskSizeGBValue);
                                            osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray = storageProfileValue["dataDisks"];
                                    if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue2 = dataDisksValue["vhd"];
                                            if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue2["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue2 = dataDisksValue["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue2["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                            
                                            JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue = propertiesValue["osProfile"];
                                if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                    if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                        if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue = windowsConfigurationValue["winRM"];
                                        if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray = winRMValue["listeners"];
                                            if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                    if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue = linuxConfigurationValue["ssh"];
                                        if (sshValue != null && sshValue.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray = sshValue["publicKeys"];
                                            if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray = osProfileValue["secrets"];
                                    if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue3 = secretsValue["sourceVault"];
                                            if (sourceVaultValue3 != null && sourceVaultValue3.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                
                                                JToken idValue3 = sourceVaultValue3["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    sourceVaultInstance3.ReferenceUri = idInstance3;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue = propertiesValue["networkProfile"];
                                if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                    if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue2 = networkInterfacesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue2["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue4 = networkInterfacesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                            }
                                        }
                                    }
                                }
                                
                                JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                {
                                    DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                    virtualMachineInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                    
                                    JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                    {
                                        BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                        diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                        
                                        JToken enabledValue = bootDiagnosticsValue["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            bootDiagnosticsInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                        if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                        {
                                            Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                            bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue5 = availabilitySetValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        availabilitySetInstance.ReferenceUri = idInstance5;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue = instanceViewValue["vmAgent"];
                                    if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                        if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue = extensionHandlersValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = vmAgentValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray = instanceViewValue["disks"];
                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray2 = disksValue["statuses"];
                                            if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray = instanceViewValue["extensions"];
                                    if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray = extensionsValue["substatuses"];
                                            if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray3 = extensionsValue["statuses"];
                                            if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                    {
                                        BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                        instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                        
                                        JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                        if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                            bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                        if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                            bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                        }
                                    }
                                    
                                    JToken statusesArray4 = instanceViewValue["statuses"];
                                    if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue3 = resourcesValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue3["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue3["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue3["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                        if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue2["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue2["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                            if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray5 = instanceViewValue2["statuses"];
                                            if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue6 = resourcesValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineExtensionJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue7 = responseDoc["id"];
                            if (idValue7 != null && idValue7.Type != JTokenType.Null)
                            {
                                string idInstance7 = ((string)idValue7);
                                virtualMachineInstance.Id = idInstance7;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public async Task<VirtualMachineGetResponse> GetWithInstanceViewAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "GetWithInstanceViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$expand=instanceView");
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.VirtualMachine = virtualMachineInstance;
                            
                            JToken planValue = responseDoc["plan"];
                            if (planValue != null && planValue.Type != JTokenType.Null)
                            {
                                Plan planInstance = new Plan();
                                virtualMachineInstance.Plan = planInstance;
                                
                                JToken nameValue = planValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    planInstance.Name = nameInstance;
                                }
                                
                                JToken publisherValue = planValue["publisher"];
                                if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                {
                                    string publisherInstance = ((string)publisherValue);
                                    planInstance.Publisher = publisherInstance;
                                }
                                
                                JToken productValue = planValue["product"];
                                if (productValue != null && productValue.Type != JTokenType.Null)
                                {
                                    string productInstance = ((string)productValue);
                                    planInstance.Product = productInstance;
                                }
                                
                                JToken promotionCodeValue = planValue["promotionCode"];
                                if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                {
                                    string promotionCodeInstance = ((string)promotionCodeValue);
                                    planInstance.PromotionCode = promotionCodeInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                {
                                    HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                    virtualMachineInstance.HardwareProfile = hardwareProfileInstance;
                                    
                                    JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                    if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                    {
                                        string vmSizeInstance = ((string)vmSizeValue);
                                        hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                    }
                                }
                                
                                JToken storageProfileValue = propertiesValue["storageProfile"];
                                if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                {
                                    StorageProfile storageProfileInstance = new StorageProfile();
                                    virtualMachineInstance.StorageProfile = storageProfileInstance;
                                    
                                    JToken imageReferenceValue = storageProfileValue["imageReference"];
                                    if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                    {
                                        ImageReference imageReferenceInstance = new ImageReference();
                                        storageProfileInstance.ImageReference = imageReferenceInstance;
                                        
                                        JToken publisherValue2 = imageReferenceValue["publisher"];
                                        if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                        {
                                            string publisherInstance2 = ((string)publisherValue2);
                                            imageReferenceInstance.Publisher = publisherInstance2;
                                        }
                                        
                                        JToken offerValue = imageReferenceValue["offer"];
                                        if (offerValue != null && offerValue.Type != JTokenType.Null)
                                        {
                                            string offerInstance = ((string)offerValue);
                                            imageReferenceInstance.Offer = offerInstance;
                                        }
                                        
                                        JToken skuValue = imageReferenceValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            string skuInstance = ((string)skuValue);
                                            imageReferenceInstance.Sku = skuInstance;
                                        }
                                        
                                        JToken versionValue = imageReferenceValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            imageReferenceInstance.Version = versionInstance;
                                        }
                                    }
                                    
                                    JToken osDiskValue = storageProfileValue["osDisk"];
                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                    {
                                        OSDisk osDiskInstance = new OSDisk();
                                        storageProfileInstance.OSDisk = osDiskInstance;
                                        
                                        JToken osTypeValue = osDiskValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            osDiskInstance.OperatingSystemType = osTypeInstance;
                                        }
                                        
                                        JToken encryptionSettingsValue = osDiskValue["encryptionSettings"];
                                        if (encryptionSettingsValue != null && encryptionSettingsValue.Type != JTokenType.Null)
                                        {
                                            DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                            osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                            
                                            JToken diskEncryptionKeyValue = encryptionSettingsValue["diskEncryptionKey"];
                                            if (diskEncryptionKeyValue != null && diskEncryptionKeyValue.Type != JTokenType.Null)
                                            {
                                                KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                
                                                JToken secretUrlValue = diskEncryptionKeyValue["secretUrl"];
                                                if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                {
                                                    string secretUrlInstance = ((string)secretUrlValue);
                                                    diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue = diskEncryptionKeyValue["sourceVault"];
                                                if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                    diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                    
                                                    JToken idValue = sourceVaultValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sourceVaultInstance.ReferenceUri = idInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken keyEncryptionKeyValue = encryptionSettingsValue["keyEncryptionKey"];
                                            if (keyEncryptionKeyValue != null && keyEncryptionKeyValue.Type != JTokenType.Null)
                                            {
                                                KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                
                                                JToken keyUrlValue = keyEncryptionKeyValue["keyUrl"];
                                                if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                {
                                                    string keyUrlInstance = ((string)keyUrlValue);
                                                    keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                }
                                                
                                                JToken sourceVaultValue2 = keyEncryptionKeyValue["sourceVault"];
                                                if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                {
                                                    SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                    keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                    
                                                    JToken idValue2 = sourceVaultValue2["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        sourceVaultInstance2.ReferenceUri = idInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken nameValue2 = osDiskValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            osDiskInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken vhdValue = osDiskValue["vhd"];
                                        if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                            osDiskInstance.VirtualHardDisk = vhdInstance;
                                            
                                            JToken uriValue = vhdValue["uri"];
                                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                                            {
                                                string uriInstance = ((string)uriValue);
                                                vhdInstance.Uri = uriInstance;
                                            }
                                        }
                                        
                                        JToken imageValue = osDiskValue["image"];
                                        if (imageValue != null && imageValue.Type != JTokenType.Null)
                                        {
                                            VirtualHardDisk imageInstance = new VirtualHardDisk();
                                            osDiskInstance.SourceImage = imageInstance;
                                            
                                            JToken uriValue2 = imageValue["uri"];
                                            if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                            {
                                                string uriInstance2 = ((string)uriValue2);
                                                imageInstance.Uri = uriInstance2;
                                            }
                                        }
                                        
                                        JToken cachingValue = osDiskValue["caching"];
                                        if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                        {
                                            string cachingInstance = ((string)cachingValue);
                                            osDiskInstance.Caching = cachingInstance;
                                        }
                                        
                                        JToken createOptionValue = osDiskValue["createOption"];
                                        if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                        {
                                            string createOptionInstance = ((string)createOptionValue);
                                            osDiskInstance.CreateOption = createOptionInstance;
                                        }
                                        
                                        JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                        if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                        {
                                            int diskSizeGBInstance = ((int)diskSizeGBValue);
                                            osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                        }
                                    }
                                    
                                    JToken dataDisksArray = storageProfileValue["dataDisks"];
                                    if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                        {
                                            DataDisk dataDiskInstance = new DataDisk();
                                            storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                            
                                            JToken lunValue = dataDisksValue["lun"];
                                            if (lunValue != null && lunValue.Type != JTokenType.Null)
                                            {
                                                int lunInstance = ((int)lunValue);
                                                dataDiskInstance.Lun = lunInstance;
                                            }
                                            
                                            JToken nameValue3 = dataDisksValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                dataDiskInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken vhdValue2 = dataDisksValue["vhd"];
                                            if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                
                                                JToken uriValue3 = vhdValue2["uri"];
                                                if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                {
                                                    string uriInstance3 = ((string)uriValue3);
                                                    vhdInstance2.Uri = uriInstance3;
                                                }
                                            }
                                            
                                            JToken imageValue2 = dataDisksValue["image"];
                                            if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                            {
                                                VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                dataDiskInstance.SourceImage = imageInstance2;
                                                
                                                JToken uriValue4 = imageValue2["uri"];
                                                if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                {
                                                    string uriInstance4 = ((string)uriValue4);
                                                    imageInstance2.Uri = uriInstance4;
                                                }
                                            }
                                            
                                            JToken cachingValue2 = dataDisksValue["caching"];
                                            if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                            {
                                                string cachingInstance2 = ((string)cachingValue2);
                                                dataDiskInstance.Caching = cachingInstance2;
                                            }
                                            
                                            JToken createOptionValue2 = dataDisksValue["createOption"];
                                            if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                            {
                                                string createOptionInstance2 = ((string)createOptionValue2);
                                                dataDiskInstance.CreateOption = createOptionInstance2;
                                            }
                                            
                                            JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                            if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                            {
                                                int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken osProfileValue = propertiesValue["osProfile"];
                                if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                {
                                    OSProfile osProfileInstance = new OSProfile();
                                    virtualMachineInstance.OSProfile = osProfileInstance;
                                    
                                    JToken computerNameValue = osProfileValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        osProfileInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken adminUsernameValue = osProfileValue["adminUsername"];
                                    if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                    {
                                        string adminUsernameInstance = ((string)adminUsernameValue);
                                        osProfileInstance.AdminUsername = adminUsernameInstance;
                                    }
                                    
                                    JToken adminPasswordValue = osProfileValue["adminPassword"];
                                    if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                    {
                                        string adminPasswordInstance = ((string)adminPasswordValue);
                                        osProfileInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    JToken customDataValue = osProfileValue["customData"];
                                    if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                    {
                                        string customDataInstance = ((string)customDataValue);
                                        osProfileInstance.CustomData = customDataInstance;
                                    }
                                    
                                    JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                    if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                        osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                        
                                        JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                        if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                        {
                                            bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                            windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                        }
                                        
                                        JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                        if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                        {
                                            bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                            windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                        if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                            {
                                                AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                
                                                JToken passNameValue = additionalUnattendContentValue["passName"];
                                                if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                {
                                                    string passNameInstance = ((string)passNameValue);
                                                    additionalUnattendContentInstance.PassName = passNameInstance;
                                                }
                                                
                                                JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                {
                                                    string componentNameInstance = ((string)componentNameValue);
                                                    additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                }
                                                
                                                JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                {
                                                    string settingNameInstance = ((string)settingNameValue);
                                                    additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                }
                                                
                                                JToken contentValue = additionalUnattendContentValue["content"];
                                                if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                {
                                                    string contentInstance = ((string)contentValue);
                                                    additionalUnattendContentInstance.Content = contentInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken winRMValue = windowsConfigurationValue["winRM"];
                                        if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                        {
                                            WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                            windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                            
                                            JToken listenersArray = winRMValue["listeners"];
                                            if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken listenersValue in ((JArray)listenersArray))
                                                {
                                                    WinRMListener winRMListenerInstance = new WinRMListener();
                                                    winRMInstance.Listeners.Add(winRMListenerInstance);
                                                    
                                                    JToken protocolValue = listenersValue["protocol"];
                                                    if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                    {
                                                        string protocolInstance = ((string)protocolValue);
                                                        winRMListenerInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                    if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                    {
                                                        Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                        winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                    if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                        osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                        
                                        JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                        if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                        {
                                            bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                            linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                        }
                                        
                                        JToken sshValue = linuxConfigurationValue["ssh"];
                                        if (sshValue != null && sshValue.Type != JTokenType.Null)
                                        {
                                            SshConfiguration sshInstance = new SshConfiguration();
                                            linuxConfigurationInstance.SshConfiguration = sshInstance;
                                            
                                            JToken publicKeysArray = sshValue["publicKeys"];
                                            if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                {
                                                    SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                    sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                    
                                                    JToken pathValue = publicKeysValue["path"];
                                                    if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                    {
                                                        string pathInstance = ((string)pathValue);
                                                        sshPublicKeyInstance.Path = pathInstance;
                                                    }
                                                    
                                                    JToken keyDataValue = publicKeysValue["keyData"];
                                                    if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyDataInstance = ((string)keyDataValue);
                                                        sshPublicKeyInstance.KeyData = keyDataInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken secretsArray = osProfileValue["secrets"];
                                    if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken secretsValue in ((JArray)secretsArray))
                                        {
                                            VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                            osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                            
                                            JToken sourceVaultValue3 = secretsValue["sourceVault"];
                                            if (sourceVaultValue3 != null && sourceVaultValue3.Type != JTokenType.Null)
                                            {
                                                SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                
                                                JToken idValue3 = sourceVaultValue3["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    sourceVaultInstance3.ReferenceUri = idInstance3;
                                                }
                                            }
                                            
                                            JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                            if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                {
                                                    VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                    vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                    
                                                    JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                    if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                    {
                                                        string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                        vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                    }
                                                    
                                                    JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                    if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                    {
                                                        string certificateStoreInstance = ((string)certificateStoreValue);
                                                        vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken networkProfileValue = propertiesValue["networkProfile"];
                                if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                {
                                    NetworkProfile networkProfileInstance = new NetworkProfile();
                                    virtualMachineInstance.NetworkProfile = networkProfileInstance;
                                    
                                    JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                    if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                        {
                                            NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                            networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                            
                                            JToken propertiesValue2 = networkInterfacesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                JToken primaryValue = propertiesValue2["primary"];
                                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                {
                                                    bool primaryInstance = ((bool)primaryValue);
                                                    networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                }
                                            }
                                            
                                            JToken idValue4 = networkInterfacesValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                            }
                                        }
                                    }
                                }
                                
                                JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                {
                                    DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                    virtualMachineInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                    
                                    JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                    {
                                        BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                        diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                        
                                        JToken enabledValue = bootDiagnosticsValue["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            bootDiagnosticsInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                        if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                        {
                                            Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                            bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                {
                                    AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                    virtualMachineInstance.AvailabilitySetReference = availabilitySetInstance;
                                    
                                    JToken idValue5 = availabilitySetValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        availabilitySetInstance.ReferenceUri = idInstance5;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    virtualMachineInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken instanceViewValue = propertiesValue["instanceView"];
                                if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                {
                                    VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                    virtualMachineInstance.InstanceView = instanceViewInstance;
                                    
                                    JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                    if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                        instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                    }
                                    
                                    JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                    if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                    {
                                        int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                        instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                    }
                                    
                                    JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                    if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                    {
                                        string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                        instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                    }
                                    
                                    JToken vmAgentValue = instanceViewValue["vmAgent"];
                                    if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                    {
                                        VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                        instanceViewInstance.VMAgent = vmAgentInstance;
                                        
                                        JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                        if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                        {
                                            string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                            vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                        }
                                        
                                        JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                        if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                            {
                                                VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                
                                                JToken typeValue = extensionHandlersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                    virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                }
                                                
                                                JToken statusValue = extensionHandlersValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                    virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                    
                                                    JToken codeValue = statusValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        statusInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken levelValue = statusValue["level"];
                                                    if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance = ((string)levelValue);
                                                        statusInstance.Level = levelInstance;
                                                    }
                                                    
                                                    JToken displayStatusValue = statusValue["displayStatus"];
                                                    if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance = ((string)displayStatusValue);
                                                        statusInstance.DisplayStatus = displayStatusInstance;
                                                    }
                                                    
                                                    JToken messageValue = statusValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        statusInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken timeValue = statusValue["time"];
                                                    if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                        statusInstance.Time = timeInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken statusesArray = vmAgentValue["statuses"];
                                        if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusesValue in ((JArray)statusesArray))
                                            {
                                                InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                
                                                JToken codeValue2 = statusesValue["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    instanceViewStatusInstance.Code = codeInstance2;
                                                }
                                                
                                                JToken levelValue2 = statusesValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    instanceViewStatusInstance.Level = levelInstance2;
                                                }
                                                
                                                JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string displayStatusInstance2 = ((string)displayStatusValue2);
                                                    instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                }
                                                
                                                JToken messageValue2 = statusesValue["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    instanceViewStatusInstance.Message = messageInstance2;
                                                }
                                                
                                                JToken timeValue2 = statusesValue["time"];
                                                if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                    instanceViewStatusInstance.Time = timeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken disksArray = instanceViewValue["disks"];
                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken disksValue in ((JArray)disksArray))
                                        {
                                            DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                            instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                            
                                            JToken nameValue4 = disksValue["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                diskInstanceViewInstance.Name = nameInstance4;
                                            }
                                            
                                            JToken statusesArray2 = disksValue["statuses"];
                                            if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                    diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                    
                                                    JToken codeValue3 = statusesValue2["code"];
                                                    if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance3 = ((string)codeValue3);
                                                        instanceViewStatusInstance2.Code = codeInstance3;
                                                    }
                                                    
                                                    JToken levelValue3 = statusesValue2["level"];
                                                    if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance3 = ((string)levelValue3);
                                                        instanceViewStatusInstance2.Level = levelInstance3;
                                                    }
                                                    
                                                    JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                    if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance3 = ((string)displayStatusValue3);
                                                        instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                    }
                                                    
                                                    JToken messageValue3 = statusesValue2["message"];
                                                    if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance3 = ((string)messageValue3);
                                                        instanceViewStatusInstance2.Message = messageInstance3;
                                                    }
                                                    
                                                    JToken timeValue3 = statusesValue2["time"];
                                                    if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                        instanceViewStatusInstance2.Time = timeInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken extensionsArray = instanceViewValue["extensions"];
                                    if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                        {
                                            VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                            instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                            
                                            JToken nameValue5 = extensionsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken typeValue2 = extensionsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                            }
                                            
                                            JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                            if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                            }
                                            
                                            JToken substatusesArray = extensionsValue["substatuses"];
                                            if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                    
                                                    JToken codeValue4 = substatusesValue["code"];
                                                    if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance4 = ((string)codeValue4);
                                                        instanceViewStatusInstance3.Code = codeInstance4;
                                                    }
                                                    
                                                    JToken levelValue4 = substatusesValue["level"];
                                                    if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance4 = ((string)levelValue4);
                                                        instanceViewStatusInstance3.Level = levelInstance4;
                                                    }
                                                    
                                                    JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                    if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance4 = ((string)displayStatusValue4);
                                                        instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                    }
                                                    
                                                    JToken messageValue4 = substatusesValue["message"];
                                                    if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance4 = ((string)messageValue4);
                                                        instanceViewStatusInstance3.Message = messageInstance4;
                                                    }
                                                    
                                                    JToken timeValue4 = substatusesValue["time"];
                                                    if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                        instanceViewStatusInstance3.Time = timeInstance4;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray3 = extensionsValue["statuses"];
                                            if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                    virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                    
                                                    JToken codeValue5 = statusesValue3["code"];
                                                    if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance5 = ((string)codeValue5);
                                                        instanceViewStatusInstance4.Code = codeInstance5;
                                                    }
                                                    
                                                    JToken levelValue5 = statusesValue3["level"];
                                                    if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance5 = ((string)levelValue5);
                                                        instanceViewStatusInstance4.Level = levelInstance5;
                                                    }
                                                    
                                                    JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                    if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance5 = ((string)displayStatusValue5);
                                                        instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                    }
                                                    
                                                    JToken messageValue5 = statusesValue3["message"];
                                                    if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance5 = ((string)messageValue5);
                                                        instanceViewStatusInstance4.Message = messageInstance5;
                                                    }
                                                    
                                                    JToken timeValue5 = statusesValue3["time"];
                                                    if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                        instanceViewStatusInstance4.Time = timeInstance5;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                    if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                    {
                                        BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                        instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                        
                                        JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                        if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                            bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                        if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                        {
                                            Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                            bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                        }
                                    }
                                    
                                    JToken statusesArray4 = instanceViewValue["statuses"];
                                    if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                        {
                                            InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                            instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                            
                                            JToken codeValue6 = statusesValue4["code"];
                                            if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                            {
                                                string codeInstance6 = ((string)codeValue6);
                                                instanceViewStatusInstance5.Code = codeInstance6;
                                            }
                                            
                                            JToken levelValue6 = statusesValue4["level"];
                                            if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                            {
                                                string levelInstance6 = ((string)levelValue6);
                                                instanceViewStatusInstance5.Level = levelInstance6;
                                            }
                                            
                                            JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                            if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                            {
                                                string displayStatusInstance6 = ((string)displayStatusValue6);
                                                instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                            }
                                            
                                            JToken messageValue6 = statusesValue4["message"];
                                            if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                            {
                                                string messageInstance6 = ((string)messageValue6);
                                                instanceViewStatusInstance5.Message = messageInstance6;
                                            }
                                            
                                            JToken timeValue6 = statusesValue4["time"];
                                            if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                instanceViewStatusInstance5.Time = timeInstance6;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken resourcesArray = responseDoc["resources"];
                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                            {
                                virtualMachineInstance.Extensions = new List<VirtualMachineExtension>();
                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                {
                                    VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                    virtualMachineInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                    
                                    JToken propertiesValue3 = resourcesValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        JToken publisherValue3 = propertiesValue3["publisher"];
                                        if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                        {
                                            string publisherInstance3 = ((string)publisherValue3);
                                            virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                        }
                                        
                                        JToken typeValue3 = propertiesValue3["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                        }
                                        
                                        JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                        if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                        {
                                            string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                            virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                        }
                                        
                                        JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                        if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                        {
                                            bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                            virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue3["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                        }
                                        
                                        JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                        if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                        {
                                            string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                        if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                        {
                                            VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                            virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                            
                                            JToken nameValue6 = instanceViewValue2["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                instanceViewInstance2.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = instanceViewValue2["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                instanceViewInstance2.ExtensionType = typeInstance4;
                                            }
                                            
                                            JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                            if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                            {
                                                string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                            }
                                            
                                            JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                            if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                    instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                    
                                                    JToken codeValue7 = substatusesValue2["code"];
                                                    if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance7 = ((string)codeValue7);
                                                        instanceViewStatusInstance6.Code = codeInstance7;
                                                    }
                                                    
                                                    JToken levelValue7 = substatusesValue2["level"];
                                                    if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance7 = ((string)levelValue7);
                                                        instanceViewStatusInstance6.Level = levelInstance7;
                                                    }
                                                    
                                                    JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                    if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance7 = ((string)displayStatusValue7);
                                                        instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                    }
                                                    
                                                    JToken messageValue7 = substatusesValue2["message"];
                                                    if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance7 = ((string)messageValue7);
                                                        instanceViewStatusInstance6.Message = messageInstance7;
                                                    }
                                                    
                                                    JToken timeValue7 = substatusesValue2["time"];
                                                    if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                        instanceViewStatusInstance6.Time = timeInstance7;
                                                    }
                                                }
                                            }
                                            
                                            JToken statusesArray5 = instanceViewValue2["statuses"];
                                            if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                    instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                    
                                                    JToken codeValue8 = statusesValue5["code"];
                                                    if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance8 = ((string)codeValue8);
                                                        instanceViewStatusInstance7.Code = codeInstance8;
                                                    }
                                                    
                                                    JToken levelValue8 = statusesValue5["level"];
                                                    if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance8 = ((string)levelValue8);
                                                        instanceViewStatusInstance7.Level = levelInstance8;
                                                    }
                                                    
                                                    JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                    if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance8 = ((string)displayStatusValue8);
                                                        instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                    }
                                                    
                                                    JToken messageValue8 = statusesValue5["message"];
                                                    if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance8 = ((string)messageValue8);
                                                        instanceViewStatusInstance7.Message = messageInstance8;
                                                    }
                                                    
                                                    JToken timeValue8 = statusesValue5["time"];
                                                    if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                        instanceViewStatusInstance7.Time = timeInstance8;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue6 = resourcesValue["id"];
                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                    {
                                        string idInstance6 = ((string)idValue6);
                                        virtualMachineExtensionJsonInstance.Id = idInstance6;
                                    }
                                    
                                    JToken nameValue7 = resourcesValue["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = resourcesValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue = resourcesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualMachineExtensionJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue7 = responseDoc["id"];
                            if (idValue7 != null && idValue7.Type != JTokenType.Null)
                            {
                                string idInstance7 = ((string)idValue7);
                                virtualMachineInstance.Id = idInstance7;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualMachineInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualMachineInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                virtualMachineInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    virtualMachineInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken encryptionSettingsValue = osDiskValue["encryptionSettings"];
                                                if (encryptionSettingsValue != null && encryptionSettingsValue.Type != JTokenType.Null)
                                                {
                                                    DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                                    osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                                    
                                                    JToken diskEncryptionKeyValue = encryptionSettingsValue["diskEncryptionKey"];
                                                    if (diskEncryptionKeyValue != null && diskEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                        encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                        
                                                        JToken secretUrlValue = diskEncryptionKeyValue["secretUrl"];
                                                        if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string secretUrlInstance = ((string)secretUrlValue);
                                                            diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue = diskEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken keyEncryptionKeyValue = encryptionSettingsValue["keyEncryptionKey"];
                                                    if (keyEncryptionKeyValue != null && keyEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                        encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                        
                                                        JToken keyUrlValue = keyEncryptionKeyValue["keyUrl"];
                                                        if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string keyUrlInstance = ((string)keyUrlValue);
                                                            keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue2 = keyEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                            keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                            
                                                            JToken idValue2 = sourceVaultValue2["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                sourceVaultInstance2.ReferenceUri = idInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                                
                                                JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                                if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                {
                                                    int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                    osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                    
                                                    JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue3 = secretsValue["sourceVault"];
                                                    if (sourceVaultValue3 != null && sourceVaultValue3.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                        
                                                        JToken idValue3 = sourceVaultValue3["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            sourceVaultInstance3.ReferenceUri = idInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue4 = networkInterfacesValue["id"];
                                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                    {
                                                        string idInstance4 = ((string)idValue4);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                        if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                        {
                                            DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                            virtualMachineJsonInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                            
                                            JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                            {
                                                BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                                diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                                
                                                JToken enabledValue = bootDiagnosticsValue["enabled"];
                                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                                {
                                                    bool enabledInstance = ((bool)enabledValue);
                                                    bootDiagnosticsInstance.Enabled = enabledInstance;
                                                }
                                                
                                                JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                                if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                                    bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue5 = availabilitySetValue["id"];
                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                            {
                                                string idInstance5 = ((string)idValue5);
                                                availabilitySetInstance.ReferenceUri = idInstance5;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                            {
                                                BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                                instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                                
                                                JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                                if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                                    bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                                }
                                                
                                                JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                                if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                                    bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue6 = resourcesValue["id"];
                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                            {
                                                string idInstance6 = ((string)idValue6);
                                                virtualMachineExtensionJsonInstance.Id = idInstance6;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue7 = valueValue["id"];
                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                    {
                                        string idInstance7 = ((string)idValue7);
                                        virtualMachineJsonInstance.Id = idInstance7;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListAllAsync(ListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken encryptionSettingsValue = osDiskValue["encryptionSettings"];
                                                if (encryptionSettingsValue != null && encryptionSettingsValue.Type != JTokenType.Null)
                                                {
                                                    DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                                    osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                                    
                                                    JToken diskEncryptionKeyValue = encryptionSettingsValue["diskEncryptionKey"];
                                                    if (diskEncryptionKeyValue != null && diskEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                        encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                        
                                                        JToken secretUrlValue = diskEncryptionKeyValue["secretUrl"];
                                                        if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string secretUrlInstance = ((string)secretUrlValue);
                                                            diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue = diskEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken keyEncryptionKeyValue = encryptionSettingsValue["keyEncryptionKey"];
                                                    if (keyEncryptionKeyValue != null && keyEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                        encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                        
                                                        JToken keyUrlValue = keyEncryptionKeyValue["keyUrl"];
                                                        if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string keyUrlInstance = ((string)keyUrlValue);
                                                            keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue2 = keyEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                            keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                            
                                                            JToken idValue2 = sourceVaultValue2["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                sourceVaultInstance2.ReferenceUri = idInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                                
                                                JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                                if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                {
                                                    int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                    osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                    
                                                    JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue3 = secretsValue["sourceVault"];
                                                    if (sourceVaultValue3 != null && sourceVaultValue3.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                        
                                                        JToken idValue3 = sourceVaultValue3["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            sourceVaultInstance3.ReferenceUri = idInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue4 = networkInterfacesValue["id"];
                                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                    {
                                                        string idInstance4 = ((string)idValue4);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                        if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                        {
                                            DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                            virtualMachineJsonInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                            
                                            JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                            {
                                                BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                                diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                                
                                                JToken enabledValue = bootDiagnosticsValue["enabled"];
                                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                                {
                                                    bool enabledInstance = ((bool)enabledValue);
                                                    bootDiagnosticsInstance.Enabled = enabledInstance;
                                                }
                                                
                                                JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                                if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                                    bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue5 = availabilitySetValue["id"];
                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                            {
                                                string idInstance5 = ((string)idValue5);
                                                availabilitySetInstance.ReferenceUri = idInstance5;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                            {
                                                BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                                instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                                
                                                JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                                if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                                    bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                                }
                                                
                                                JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                                if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                                    bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue6 = resourcesValue["id"];
                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                            {
                                                string idInstance6 = ((string)idValue6);
                                                virtualMachineExtensionJsonInstance.Id = idInstance6;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue7 = valueValue["id"];
                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                    {
                                        string idInstance7 = ((string)idValue7);
                                        virtualMachineJsonInstance.Id = idInstance7;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vmName == null)
            {
                throw new ArgumentNullException("vmName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "ListAvailableSizesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Compute";
            url = url + "/";
            url = url + "virtualMachines";
            url = url + "/";
            url = url + Uri.EscapeDataString(vmName);
            url = url + "/vmSizes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineSizeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineSizeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachineSize virtualMachineSizeInstance = new VirtualMachineSize();
                                    result.VirtualMachineSizes.Add(virtualMachineSizeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualMachineSizeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken numberOfCoresValue = valueValue["numberOfCores"];
                                    if (numberOfCoresValue != null && numberOfCoresValue.Type != JTokenType.Null)
                                    {
                                        int numberOfCoresInstance = ((int)numberOfCoresValue);
                                        virtualMachineSizeInstance.NumberOfCores = numberOfCoresInstance;
                                    }
                                    
                                    JToken osDiskSizeInMBValue = valueValue["osDiskSizeInMB"];
                                    if (osDiskSizeInMBValue != null && osDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int osDiskSizeInMBInstance = ((int)osDiskSizeInMBValue);
                                        virtualMachineSizeInstance.OSDiskSizeInMB = osDiskSizeInMBInstance;
                                    }
                                    
                                    JToken resourceDiskSizeInMBValue = valueValue["resourceDiskSizeInMB"];
                                    if (resourceDiskSizeInMBValue != null && resourceDiskSizeInMBValue.Type != JTokenType.Null)
                                    {
                                        int resourceDiskSizeInMBInstance = ((int)resourceDiskSizeInMBValue);
                                        virtualMachineSizeInstance.ResourceDiskSizeInMB = resourceDiskSizeInMBInstance;
                                    }
                                    
                                    JToken memoryInMBValue = valueValue["memoryInMB"];
                                    if (memoryInMBValue != null && memoryInMBValue.Type != JTokenType.Null)
                                    {
                                        int memoryInMBInstance = ((int)memoryInMBValue);
                                        virtualMachineSizeInstance.MemoryInMB = memoryInMBInstance;
                                    }
                                    
                                    JToken maxDataDiskCountValue = valueValue["maxDataDiskCount"];
                                    if (maxDataDiskCountValue != null && maxDataDiskCountValue.Type != JTokenType.Null)
                                    {
                                        int maxDataDiskCountInstance = ((int)maxDataDiskCountValue);
                                        virtualMachineSizeInstance.MaxDataDiskCount = maxDataDiskCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualMachine virtualMachineJsonInstance = new VirtualMachine();
                                    result.VirtualMachines.Add(virtualMachineJsonInstance);
                                    
                                    JToken planValue = valueValue["plan"];
                                    if (planValue != null && planValue.Type != JTokenType.Null)
                                    {
                                        Plan planInstance = new Plan();
                                        virtualMachineJsonInstance.Plan = planInstance;
                                        
                                        JToken nameValue = planValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            planInstance.Name = nameInstance;
                                        }
                                        
                                        JToken publisherValue = planValue["publisher"];
                                        if (publisherValue != null && publisherValue.Type != JTokenType.Null)
                                        {
                                            string publisherInstance = ((string)publisherValue);
                                            planInstance.Publisher = publisherInstance;
                                        }
                                        
                                        JToken productValue = planValue["product"];
                                        if (productValue != null && productValue.Type != JTokenType.Null)
                                        {
                                            string productInstance = ((string)productValue);
                                            planInstance.Product = productInstance;
                                        }
                                        
                                        JToken promotionCodeValue = planValue["promotionCode"];
                                        if (promotionCodeValue != null && promotionCodeValue.Type != JTokenType.Null)
                                        {
                                            string promotionCodeInstance = ((string)promotionCodeValue);
                                            planInstance.PromotionCode = promotionCodeInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken hardwareProfileValue = propertiesValue["hardwareProfile"];
                                        if (hardwareProfileValue != null && hardwareProfileValue.Type != JTokenType.Null)
                                        {
                                            HardwareProfile hardwareProfileInstance = new HardwareProfile();
                                            virtualMachineJsonInstance.HardwareProfile = hardwareProfileInstance;
                                            
                                            JToken vmSizeValue = hardwareProfileValue["vmSize"];
                                            if (vmSizeValue != null && vmSizeValue.Type != JTokenType.Null)
                                            {
                                                string vmSizeInstance = ((string)vmSizeValue);
                                                hardwareProfileInstance.VirtualMachineSize = vmSizeInstance;
                                            }
                                        }
                                        
                                        JToken storageProfileValue = propertiesValue["storageProfile"];
                                        if (storageProfileValue != null && storageProfileValue.Type != JTokenType.Null)
                                        {
                                            StorageProfile storageProfileInstance = new StorageProfile();
                                            virtualMachineJsonInstance.StorageProfile = storageProfileInstance;
                                            
                                            JToken imageReferenceValue = storageProfileValue["imageReference"];
                                            if (imageReferenceValue != null && imageReferenceValue.Type != JTokenType.Null)
                                            {
                                                ImageReference imageReferenceInstance = new ImageReference();
                                                storageProfileInstance.ImageReference = imageReferenceInstance;
                                                
                                                JToken publisherValue2 = imageReferenceValue["publisher"];
                                                if (publisherValue2 != null && publisherValue2.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance2 = ((string)publisherValue2);
                                                    imageReferenceInstance.Publisher = publisherInstance2;
                                                }
                                                
                                                JToken offerValue = imageReferenceValue["offer"];
                                                if (offerValue != null && offerValue.Type != JTokenType.Null)
                                                {
                                                    string offerInstance = ((string)offerValue);
                                                    imageReferenceInstance.Offer = offerInstance;
                                                }
                                                
                                                JToken skuValue = imageReferenceValue["sku"];
                                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                                {
                                                    string skuInstance = ((string)skuValue);
                                                    imageReferenceInstance.Sku = skuInstance;
                                                }
                                                
                                                JToken versionValue = imageReferenceValue["version"];
                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                {
                                                    string versionInstance = ((string)versionValue);
                                                    imageReferenceInstance.Version = versionInstance;
                                                }
                                            }
                                            
                                            JToken osDiskValue = storageProfileValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                OSDisk osDiskInstance = new OSDisk();
                                                storageProfileInstance.OSDisk = osDiskInstance;
                                                
                                                JToken osTypeValue = osDiskValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    osDiskInstance.OperatingSystemType = osTypeInstance;
                                                }
                                                
                                                JToken encryptionSettingsValue = osDiskValue["encryptionSettings"];
                                                if (encryptionSettingsValue != null && encryptionSettingsValue.Type != JTokenType.Null)
                                                {
                                                    DiskEncryptionSettings encryptionSettingsInstance = new DiskEncryptionSettings();
                                                    osDiskInstance.EncryptionSettings = encryptionSettingsInstance;
                                                    
                                                    JToken diskEncryptionKeyValue = encryptionSettingsValue["diskEncryptionKey"];
                                                    if (diskEncryptionKeyValue != null && diskEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultSecretReference diskEncryptionKeyInstance = new KeyVaultSecretReference();
                                                        encryptionSettingsInstance.DiskEncryptionKey = diskEncryptionKeyInstance;
                                                        
                                                        JToken secretUrlValue = diskEncryptionKeyValue["secretUrl"];
                                                        if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string secretUrlInstance = ((string)secretUrlValue);
                                                            diskEncryptionKeyInstance.SecretUrl = secretUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue = diskEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue != null && sourceVaultValue.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance = new SourceVaultReference();
                                                            diskEncryptionKeyInstance.SourceVault = sourceVaultInstance;
                                                            
                                                            JToken idValue = sourceVaultValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sourceVaultInstance.ReferenceUri = idInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken keyEncryptionKeyValue = encryptionSettingsValue["keyEncryptionKey"];
                                                    if (keyEncryptionKeyValue != null && keyEncryptionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        KeyVaultKeyReference keyEncryptionKeyInstance = new KeyVaultKeyReference();
                                                        encryptionSettingsInstance.KeyEncryptionKey = keyEncryptionKeyInstance;
                                                        
                                                        JToken keyUrlValue = keyEncryptionKeyValue["keyUrl"];
                                                        if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                        {
                                                            string keyUrlInstance = ((string)keyUrlValue);
                                                            keyEncryptionKeyInstance.KeyUrl = keyUrlInstance;
                                                        }
                                                        
                                                        JToken sourceVaultValue2 = keyEncryptionKeyValue["sourceVault"];
                                                        if (sourceVaultValue2 != null && sourceVaultValue2.Type != JTokenType.Null)
                                                        {
                                                            SourceVaultReference sourceVaultInstance2 = new SourceVaultReference();
                                                            keyEncryptionKeyInstance.SourceVault = sourceVaultInstance2;
                                                            
                                                            JToken idValue2 = sourceVaultValue2["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                sourceVaultInstance2.ReferenceUri = idInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken nameValue2 = osDiskValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    osDiskInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken vhdValue = osDiskValue["vhd"];
                                                if (vhdValue != null && vhdValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk vhdInstance = new VirtualHardDisk();
                                                    osDiskInstance.VirtualHardDisk = vhdInstance;
                                                    
                                                    JToken uriValue = vhdValue["uri"];
                                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance = ((string)uriValue);
                                                        vhdInstance.Uri = uriInstance;
                                                    }
                                                }
                                                
                                                JToken imageValue = osDiskValue["image"];
                                                if (imageValue != null && imageValue.Type != JTokenType.Null)
                                                {
                                                    VirtualHardDisk imageInstance = new VirtualHardDisk();
                                                    osDiskInstance.SourceImage = imageInstance;
                                                    
                                                    JToken uriValue2 = imageValue["uri"];
                                                    if (uriValue2 != null && uriValue2.Type != JTokenType.Null)
                                                    {
                                                        string uriInstance2 = ((string)uriValue2);
                                                        imageInstance.Uri = uriInstance2;
                                                    }
                                                }
                                                
                                                JToken cachingValue = osDiskValue["caching"];
                                                if (cachingValue != null && cachingValue.Type != JTokenType.Null)
                                                {
                                                    string cachingInstance = ((string)cachingValue);
                                                    osDiskInstance.Caching = cachingInstance;
                                                }
                                                
                                                JToken createOptionValue = osDiskValue["createOption"];
                                                if (createOptionValue != null && createOptionValue.Type != JTokenType.Null)
                                                {
                                                    string createOptionInstance = ((string)createOptionValue);
                                                    osDiskInstance.CreateOption = createOptionInstance;
                                                }
                                                
                                                JToken diskSizeGBValue = osDiskValue["diskSizeGB"];
                                                if (diskSizeGBValue != null && diskSizeGBValue.Type != JTokenType.Null)
                                                {
                                                    int diskSizeGBInstance = ((int)diskSizeGBValue);
                                                    osDiskInstance.DiskSizeGB = diskSizeGBInstance;
                                                }
                                            }
                                            
                                            JToken dataDisksArray = storageProfileValue["dataDisks"];
                                            if (dataDisksArray != null && dataDisksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dataDisksValue in ((JArray)dataDisksArray))
                                                {
                                                    DataDisk dataDiskInstance = new DataDisk();
                                                    storageProfileInstance.DataDisks.Add(dataDiskInstance);
                                                    
                                                    JToken lunValue = dataDisksValue["lun"];
                                                    if (lunValue != null && lunValue.Type != JTokenType.Null)
                                                    {
                                                        int lunInstance = ((int)lunValue);
                                                        dataDiskInstance.Lun = lunInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = dataDisksValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        dataDiskInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken vhdValue2 = dataDisksValue["vhd"];
                                                    if (vhdValue2 != null && vhdValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk vhdInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.VirtualHardDisk = vhdInstance2;
                                                        
                                                        JToken uriValue3 = vhdValue2["uri"];
                                                        if (uriValue3 != null && uriValue3.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance3 = ((string)uriValue3);
                                                            vhdInstance2.Uri = uriInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken imageValue2 = dataDisksValue["image"];
                                                    if (imageValue2 != null && imageValue2.Type != JTokenType.Null)
                                                    {
                                                        VirtualHardDisk imageInstance2 = new VirtualHardDisk();
                                                        dataDiskInstance.SourceImage = imageInstance2;
                                                        
                                                        JToken uriValue4 = imageValue2["uri"];
                                                        if (uriValue4 != null && uriValue4.Type != JTokenType.Null)
                                                        {
                                                            string uriInstance4 = ((string)uriValue4);
                                                            imageInstance2.Uri = uriInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken cachingValue2 = dataDisksValue["caching"];
                                                    if (cachingValue2 != null && cachingValue2.Type != JTokenType.Null)
                                                    {
                                                        string cachingInstance2 = ((string)cachingValue2);
                                                        dataDiskInstance.Caching = cachingInstance2;
                                                    }
                                                    
                                                    JToken createOptionValue2 = dataDisksValue["createOption"];
                                                    if (createOptionValue2 != null && createOptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string createOptionInstance2 = ((string)createOptionValue2);
                                                        dataDiskInstance.CreateOption = createOptionInstance2;
                                                    }
                                                    
                                                    JToken diskSizeGBValue2 = dataDisksValue["diskSizeGB"];
                                                    if (diskSizeGBValue2 != null && diskSizeGBValue2.Type != JTokenType.Null)
                                                    {
                                                        int diskSizeGBInstance2 = ((int)diskSizeGBValue2);
                                                        dataDiskInstance.DiskSizeGB = diskSizeGBInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken osProfileValue = propertiesValue["osProfile"];
                                        if (osProfileValue != null && osProfileValue.Type != JTokenType.Null)
                                        {
                                            OSProfile osProfileInstance = new OSProfile();
                                            virtualMachineJsonInstance.OSProfile = osProfileInstance;
                                            
                                            JToken computerNameValue = osProfileValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                osProfileInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken adminUsernameValue = osProfileValue["adminUsername"];
                                            if (adminUsernameValue != null && adminUsernameValue.Type != JTokenType.Null)
                                            {
                                                string adminUsernameInstance = ((string)adminUsernameValue);
                                                osProfileInstance.AdminUsername = adminUsernameInstance;
                                            }
                                            
                                            JToken adminPasswordValue = osProfileValue["adminPassword"];
                                            if (adminPasswordValue != null && adminPasswordValue.Type != JTokenType.Null)
                                            {
                                                string adminPasswordInstance = ((string)adminPasswordValue);
                                                osProfileInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            JToken customDataValue = osProfileValue["customData"];
                                            if (customDataValue != null && customDataValue.Type != JTokenType.Null)
                                            {
                                                string customDataInstance = ((string)customDataValue);
                                                osProfileInstance.CustomData = customDataInstance;
                                            }
                                            
                                            JToken windowsConfigurationValue = osProfileValue["windowsConfiguration"];
                                            if (windowsConfigurationValue != null && windowsConfigurationValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsConfigurationInstance = new WindowsConfiguration();
                                                osProfileInstance.WindowsConfiguration = windowsConfigurationInstance;
                                                
                                                JToken provisionVMAgentValue = windowsConfigurationValue["provisionVMAgent"];
                                                if (provisionVMAgentValue != null && provisionVMAgentValue.Type != JTokenType.Null)
                                                {
                                                    bool provisionVMAgentInstance = ((bool)provisionVMAgentValue);
                                                    windowsConfigurationInstance.ProvisionVMAgent = provisionVMAgentInstance;
                                                }
                                                
                                                JToken enableAutomaticUpdatesValue = windowsConfigurationValue["enableAutomaticUpdates"];
                                                if (enableAutomaticUpdatesValue != null && enableAutomaticUpdatesValue.Type != JTokenType.Null)
                                                {
                                                    bool enableAutomaticUpdatesInstance = ((bool)enableAutomaticUpdatesValue);
                                                    windowsConfigurationInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                JToken timeZoneValue = windowsConfigurationValue["timeZone"];
                                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance = ((string)timeZoneValue);
                                                    windowsConfigurationInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken additionalUnattendContentArray = windowsConfigurationValue["additionalUnattendContent"];
                                                if (additionalUnattendContentArray != null && additionalUnattendContentArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken additionalUnattendContentValue in ((JArray)additionalUnattendContentArray))
                                                    {
                                                        AdditionalUnattendContent additionalUnattendContentInstance = new AdditionalUnattendContent();
                                                        windowsConfigurationInstance.AdditionalUnattendContents.Add(additionalUnattendContentInstance);
                                                        
                                                        JToken passNameValue = additionalUnattendContentValue["passName"];
                                                        if (passNameValue != null && passNameValue.Type != JTokenType.Null)
                                                        {
                                                            string passNameInstance = ((string)passNameValue);
                                                            additionalUnattendContentInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        JToken componentNameValue = additionalUnattendContentValue["componentName"];
                                                        if (componentNameValue != null && componentNameValue.Type != JTokenType.Null)
                                                        {
                                                            string componentNameInstance = ((string)componentNameValue);
                                                            additionalUnattendContentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        JToken settingNameValue = additionalUnattendContentValue["settingName"];
                                                        if (settingNameValue != null && settingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string settingNameInstance = ((string)settingNameValue);
                                                            additionalUnattendContentInstance.SettingName = settingNameInstance;
                                                        }
                                                        
                                                        JToken contentValue = additionalUnattendContentValue["content"];
                                                        if (contentValue != null && contentValue.Type != JTokenType.Null)
                                                        {
                                                            string contentInstance = ((string)contentValue);
                                                            additionalUnattendContentInstance.Content = contentInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken winRMValue = windowsConfigurationValue["winRM"];
                                                if (winRMValue != null && winRMValue.Type != JTokenType.Null)
                                                {
                                                    WinRMConfiguration winRMInstance = new WinRMConfiguration();
                                                    windowsConfigurationInstance.WinRMConfiguration = winRMInstance;
                                                    
                                                    JToken listenersArray = winRMValue["listeners"];
                                                    if (listenersArray != null && listenersArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken listenersValue in ((JArray)listenersArray))
                                                        {
                                                            WinRMListener winRMListenerInstance = new WinRMListener();
                                                            winRMInstance.Listeners.Add(winRMListenerInstance);
                                                            
                                                            JToken protocolValue = listenersValue["protocol"];
                                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                                            {
                                                                string protocolInstance = ((string)protocolValue);
                                                                winRMListenerInstance.Protocol = protocolInstance;
                                                            }
                                                            
                                                            JToken certificateUrlValue = listenersValue["certificateUrl"];
                                                            if (certificateUrlValue != null && certificateUrlValue.Type != JTokenType.Null)
                                                            {
                                                                Uri certificateUrlInstance = TypeConversion.TryParseUri(((string)certificateUrlValue));
                                                                winRMListenerInstance.CertificateUrl = certificateUrlInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxConfigurationValue = osProfileValue["linuxConfiguration"];
                                            if (linuxConfigurationValue != null && linuxConfigurationValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxConfigurationInstance = new LinuxConfiguration();
                                                osProfileInstance.LinuxConfiguration = linuxConfigurationInstance;
                                                
                                                JToken disablePasswordAuthenticationValue = linuxConfigurationValue["disablePasswordAuthentication"];
                                                if (disablePasswordAuthenticationValue != null && disablePasswordAuthenticationValue.Type != JTokenType.Null)
                                                {
                                                    bool disablePasswordAuthenticationInstance = ((bool)disablePasswordAuthenticationValue);
                                                    linuxConfigurationInstance.DisablePasswordAuthentication = disablePasswordAuthenticationInstance;
                                                }
                                                
                                                JToken sshValue = linuxConfigurationValue["ssh"];
                                                if (sshValue != null && sshValue.Type != JTokenType.Null)
                                                {
                                                    SshConfiguration sshInstance = new SshConfiguration();
                                                    linuxConfigurationInstance.SshConfiguration = sshInstance;
                                                    
                                                    JToken publicKeysArray = sshValue["publicKeys"];
                                                    if (publicKeysArray != null && publicKeysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken publicKeysValue in ((JArray)publicKeysArray))
                                                        {
                                                            SshPublicKey sshPublicKeyInstance = new SshPublicKey();
                                                            sshInstance.PublicKeys.Add(sshPublicKeyInstance);
                                                            
                                                            JToken pathValue = publicKeysValue["path"];
                                                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                            {
                                                                string pathInstance = ((string)pathValue);
                                                                sshPublicKeyInstance.Path = pathInstance;
                                                            }
                                                            
                                                            JToken keyDataValue = publicKeysValue["keyData"];
                                                            if (keyDataValue != null && keyDataValue.Type != JTokenType.Null)
                                                            {
                                                                string keyDataInstance = ((string)keyDataValue);
                                                                sshPublicKeyInstance.KeyData = keyDataInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken secretsArray = osProfileValue["secrets"];
                                            if (secretsArray != null && secretsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken secretsValue in ((JArray)secretsArray))
                                                {
                                                    VaultSecretGroup vaultSecretGroupInstance = new VaultSecretGroup();
                                                    osProfileInstance.Secrets.Add(vaultSecretGroupInstance);
                                                    
                                                    JToken sourceVaultValue3 = secretsValue["sourceVault"];
                                                    if (sourceVaultValue3 != null && sourceVaultValue3.Type != JTokenType.Null)
                                                    {
                                                        SourceVaultReference sourceVaultInstance3 = new SourceVaultReference();
                                                        vaultSecretGroupInstance.SourceVault = sourceVaultInstance3;
                                                        
                                                        JToken idValue3 = sourceVaultValue3["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            sourceVaultInstance3.ReferenceUri = idInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken vaultCertificatesArray = secretsValue["vaultCertificates"];
                                                    if (vaultCertificatesArray != null && vaultCertificatesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken vaultCertificatesValue in ((JArray)vaultCertificatesArray))
                                                        {
                                                            VaultCertificate vaultCertificateInstance = new VaultCertificate();
                                                            vaultSecretGroupInstance.VaultCertificates.Add(vaultCertificateInstance);
                                                            
                                                            JToken certificateUrlValue2 = vaultCertificatesValue["certificateUrl"];
                                                            if (certificateUrlValue2 != null && certificateUrlValue2.Type != JTokenType.Null)
                                                            {
                                                                string certificateUrlInstance2 = ((string)certificateUrlValue2);
                                                                vaultCertificateInstance.CertificateUrl = certificateUrlInstance2;
                                                            }
                                                            
                                                            JToken certificateStoreValue = vaultCertificatesValue["certificateStore"];
                                                            if (certificateStoreValue != null && certificateStoreValue.Type != JTokenType.Null)
                                                            {
                                                                string certificateStoreInstance = ((string)certificateStoreValue);
                                                                vaultCertificateInstance.CertificateStore = certificateStoreInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken networkProfileValue = propertiesValue["networkProfile"];
                                        if (networkProfileValue != null && networkProfileValue.Type != JTokenType.Null)
                                        {
                                            NetworkProfile networkProfileInstance = new NetworkProfile();
                                            virtualMachineJsonInstance.NetworkProfile = networkProfileInstance;
                                            
                                            JToken networkInterfacesArray = networkProfileValue["networkInterfaces"];
                                            if (networkInterfacesArray != null && networkInterfacesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken networkInterfacesValue in ((JArray)networkInterfacesArray))
                                                {
                                                    NetworkInterfaceReference networkInterfaceReferenceJsonInstance = new NetworkInterfaceReference();
                                                    networkProfileInstance.NetworkInterfaces.Add(networkInterfaceReferenceJsonInstance);
                                                    
                                                    JToken propertiesValue2 = networkInterfacesValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        JToken primaryValue = propertiesValue2["primary"];
                                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                                        {
                                                            bool primaryInstance = ((bool)primaryValue);
                                                            networkInterfaceReferenceJsonInstance.Primary = primaryInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue4 = networkInterfacesValue["id"];
                                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                    {
                                                        string idInstance4 = ((string)idValue4);
                                                        networkInterfaceReferenceJsonInstance.ReferenceUri = idInstance4;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken diagnosticsProfileValue = propertiesValue["diagnosticsProfile"];
                                        if (diagnosticsProfileValue != null && diagnosticsProfileValue.Type != JTokenType.Null)
                                        {
                                            DiagnosticsProfile diagnosticsProfileInstance = new DiagnosticsProfile();
                                            virtualMachineJsonInstance.DiagnosticsProfile = diagnosticsProfileInstance;
                                            
                                            JToken bootDiagnosticsValue = diagnosticsProfileValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue != null && bootDiagnosticsValue.Type != JTokenType.Null)
                                            {
                                                BootDiagnostics bootDiagnosticsInstance = new BootDiagnostics();
                                                diagnosticsProfileInstance.BootDiagnostics = bootDiagnosticsInstance;
                                                
                                                JToken enabledValue = bootDiagnosticsValue["enabled"];
                                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                                {
                                                    bool enabledInstance = ((bool)enabledValue);
                                                    bootDiagnosticsInstance.Enabled = enabledInstance;
                                                }
                                                
                                                JToken storageUriValue = bootDiagnosticsValue["storageUri"];
                                                if (storageUriValue != null && storageUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri storageUriInstance = TypeConversion.TryParseUri(((string)storageUriValue));
                                                    bootDiagnosticsInstance.StorageUri = storageUriInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken availabilitySetValue = propertiesValue["availabilitySet"];
                                        if (availabilitySetValue != null && availabilitySetValue.Type != JTokenType.Null)
                                        {
                                            AvailabilitySetReference availabilitySetInstance = new AvailabilitySetReference();
                                            virtualMachineJsonInstance.AvailabilitySetReference = availabilitySetInstance;
                                            
                                            JToken idValue5 = availabilitySetValue["id"];
                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                            {
                                                string idInstance5 = ((string)idValue5);
                                                availabilitySetInstance.ReferenceUri = idInstance5;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            virtualMachineJsonInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken instanceViewValue = propertiesValue["instanceView"];
                                        if (instanceViewValue != null && instanceViewValue.Type != JTokenType.Null)
                                        {
                                            VirtualMachineInstanceView instanceViewInstance = new VirtualMachineInstanceView();
                                            virtualMachineJsonInstance.InstanceView = instanceViewInstance;
                                            
                                            JToken platformUpdateDomainValue = instanceViewValue["platformUpdateDomain"];
                                            if (platformUpdateDomainValue != null && platformUpdateDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformUpdateDomainInstance = ((int)platformUpdateDomainValue);
                                                instanceViewInstance.PlatformUpdateDomain = platformUpdateDomainInstance;
                                            }
                                            
                                            JToken platformFaultDomainValue = instanceViewValue["platformFaultDomain"];
                                            if (platformFaultDomainValue != null && platformFaultDomainValue.Type != JTokenType.Null)
                                            {
                                                int platformFaultDomainInstance = ((int)platformFaultDomainValue);
                                                instanceViewInstance.PlatformFaultDomain = platformFaultDomainInstance;
                                            }
                                            
                                            JToken rdpThumbPrintValue = instanceViewValue["rdpThumbPrint"];
                                            if (rdpThumbPrintValue != null && rdpThumbPrintValue.Type != JTokenType.Null)
                                            {
                                                string rdpThumbPrintInstance = ((string)rdpThumbPrintValue);
                                                instanceViewInstance.RemoteDesktopThumbprint = rdpThumbPrintInstance;
                                            }
                                            
                                            JToken vmAgentValue = instanceViewValue["vmAgent"];
                                            if (vmAgentValue != null && vmAgentValue.Type != JTokenType.Null)
                                            {
                                                VirtualMachineAgentInstanceView vmAgentInstance = new VirtualMachineAgentInstanceView();
                                                instanceViewInstance.VMAgent = vmAgentInstance;
                                                
                                                JToken vmAgentVersionValue = vmAgentValue["vmAgentVersion"];
                                                if (vmAgentVersionValue != null && vmAgentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string vmAgentVersionInstance = ((string)vmAgentVersionValue);
                                                    vmAgentInstance.VMAgentVersion = vmAgentVersionInstance;
                                                }
                                                
                                                JToken extensionHandlersArray = vmAgentValue["extensionHandlers"];
                                                if (extensionHandlersArray != null && extensionHandlersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken extensionHandlersValue in ((JArray)extensionHandlersArray))
                                                    {
                                                        VirtualMachineExtensionHandlerInstanceView virtualMachineExtensionHandlerInstanceViewInstance = new VirtualMachineExtensionHandlerInstanceView();
                                                        vmAgentInstance.ExtensionHandlers.Add(virtualMachineExtensionHandlerInstanceViewInstance);
                                                        
                                                        JToken typeValue = extensionHandlersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken typeHandlerVersionValue = extensionHandlersValue["typeHandlerVersion"];
                                                        if (typeHandlerVersionValue != null && typeHandlerVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string typeHandlerVersionInstance = ((string)typeHandlerVersionValue);
                                                            virtualMachineExtensionHandlerInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance;
                                                        }
                                                        
                                                        JToken statusValue = extensionHandlersValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            InstanceViewStatus statusInstance = new InstanceViewStatus();
                                                            virtualMachineExtensionHandlerInstanceViewInstance.Status = statusInstance;
                                                            
                                                            JToken codeValue = statusValue["code"];
                                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance = ((string)codeValue);
                                                                statusInstance.Code = codeInstance;
                                                            }
                                                            
                                                            JToken levelValue = statusValue["level"];
                                                            if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance = ((string)levelValue);
                                                                statusInstance.Level = levelInstance;
                                                            }
                                                            
                                                            JToken displayStatusValue = statusValue["displayStatus"];
                                                            if (displayStatusValue != null && displayStatusValue.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance = ((string)displayStatusValue);
                                                                statusInstance.DisplayStatus = displayStatusInstance;
                                                            }
                                                            
                                                            JToken messageValue = statusValue["message"];
                                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance = ((string)messageValue);
                                                                statusInstance.Message = messageInstance;
                                                            }
                                                            
                                                            JToken timeValue = statusValue["time"];
                                                            if (timeValue != null && timeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance = ((DateTimeOffset)timeValue);
                                                                statusInstance.Time = timeInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken statusesArray = vmAgentValue["statuses"];
                                                if (statusesArray != null && statusesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken statusesValue in ((JArray)statusesArray))
                                                    {
                                                        InstanceViewStatus instanceViewStatusInstance = new InstanceViewStatus();
                                                        vmAgentInstance.Statuses.Add(instanceViewStatusInstance);
                                                        
                                                        JToken codeValue2 = statusesValue["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            instanceViewStatusInstance.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = statusesValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            instanceViewStatusInstance.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken displayStatusValue2 = statusesValue["displayStatus"];
                                                        if (displayStatusValue2 != null && displayStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string displayStatusInstance2 = ((string)displayStatusValue2);
                                                            instanceViewStatusInstance.DisplayStatus = displayStatusInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = statusesValue["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            instanceViewStatusInstance.Message = messageInstance2;
                                                        }
                                                        
                                                        JToken timeValue2 = statusesValue["time"];
                                                        if (timeValue2 != null && timeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTimeOffset timeInstance2 = ((DateTimeOffset)timeValue2);
                                                            instanceViewStatusInstance.Time = timeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken disksArray = instanceViewValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    DiskInstanceView diskInstanceViewInstance = new DiskInstanceView();
                                                    instanceViewInstance.Disks.Add(diskInstanceViewInstance);
                                                    
                                                    JToken nameValue4 = disksValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        diskInstanceViewInstance.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken statusesArray2 = disksValue["statuses"];
                                                    if (statusesArray2 != null && statusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue2 in ((JArray)statusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance2 = new InstanceViewStatus();
                                                            diskInstanceViewInstance.Statuses.Add(instanceViewStatusInstance2);
                                                            
                                                            JToken codeValue3 = statusesValue2["code"];
                                                            if (codeValue3 != null && codeValue3.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance3 = ((string)codeValue3);
                                                                instanceViewStatusInstance2.Code = codeInstance3;
                                                            }
                                                            
                                                            JToken levelValue3 = statusesValue2["level"];
                                                            if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance3 = ((string)levelValue3);
                                                                instanceViewStatusInstance2.Level = levelInstance3;
                                                            }
                                                            
                                                            JToken displayStatusValue3 = statusesValue2["displayStatus"];
                                                            if (displayStatusValue3 != null && displayStatusValue3.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance3 = ((string)displayStatusValue3);
                                                                instanceViewStatusInstance2.DisplayStatus = displayStatusInstance3;
                                                            }
                                                            
                                                            JToken messageValue3 = statusesValue2["message"];
                                                            if (messageValue3 != null && messageValue3.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance3 = ((string)messageValue3);
                                                                instanceViewStatusInstance2.Message = messageInstance3;
                                                            }
                                                            
                                                            JToken timeValue3 = statusesValue2["time"];
                                                            if (timeValue3 != null && timeValue3.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance3 = ((DateTimeOffset)timeValue3);
                                                                instanceViewStatusInstance2.Time = timeInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken extensionsArray = instanceViewValue["extensions"];
                                            if (extensionsArray != null && extensionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken extensionsValue in ((JArray)extensionsArray))
                                                {
                                                    VirtualMachineExtensionInstanceView virtualMachineExtensionInstanceViewInstance = new VirtualMachineExtensionInstanceView();
                                                    instanceViewInstance.Extensions.Add(virtualMachineExtensionInstanceViewInstance);
                                                    
                                                    JToken nameValue5 = extensionsValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        virtualMachineExtensionInstanceViewInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken typeValue2 = extensionsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        virtualMachineExtensionInstanceViewInstance.ExtensionType = typeInstance2;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue2 = extensionsValue["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue2 != null && typeHandlerVersionValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance2 = ((string)typeHandlerVersionValue2);
                                                        virtualMachineExtensionInstanceViewInstance.TypeHandlerVersion = typeHandlerVersionInstance2;
                                                    }
                                                    
                                                    JToken substatusesArray = extensionsValue["substatuses"];
                                                    if (substatusesArray != null && substatusesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue in ((JArray)substatusesArray))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance3 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.SubStatuses.Add(instanceViewStatusInstance3);
                                                            
                                                            JToken codeValue4 = substatusesValue["code"];
                                                            if (codeValue4 != null && codeValue4.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance4 = ((string)codeValue4);
                                                                instanceViewStatusInstance3.Code = codeInstance4;
                                                            }
                                                            
                                                            JToken levelValue4 = substatusesValue["level"];
                                                            if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance4 = ((string)levelValue4);
                                                                instanceViewStatusInstance3.Level = levelInstance4;
                                                            }
                                                            
                                                            JToken displayStatusValue4 = substatusesValue["displayStatus"];
                                                            if (displayStatusValue4 != null && displayStatusValue4.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance4 = ((string)displayStatusValue4);
                                                                instanceViewStatusInstance3.DisplayStatus = displayStatusInstance4;
                                                            }
                                                            
                                                            JToken messageValue4 = substatusesValue["message"];
                                                            if (messageValue4 != null && messageValue4.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance4 = ((string)messageValue4);
                                                                instanceViewStatusInstance3.Message = messageInstance4;
                                                            }
                                                            
                                                            JToken timeValue4 = substatusesValue["time"];
                                                            if (timeValue4 != null && timeValue4.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance4 = ((DateTimeOffset)timeValue4);
                                                                instanceViewStatusInstance3.Time = timeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray3 = extensionsValue["statuses"];
                                                    if (statusesArray3 != null && statusesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue3 in ((JArray)statusesArray3))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance4 = new InstanceViewStatus();
                                                            virtualMachineExtensionInstanceViewInstance.Statuses.Add(instanceViewStatusInstance4);
                                                            
                                                            JToken codeValue5 = statusesValue3["code"];
                                                            if (codeValue5 != null && codeValue5.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance5 = ((string)codeValue5);
                                                                instanceViewStatusInstance4.Code = codeInstance5;
                                                            }
                                                            
                                                            JToken levelValue5 = statusesValue3["level"];
                                                            if (levelValue5 != null && levelValue5.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance5 = ((string)levelValue5);
                                                                instanceViewStatusInstance4.Level = levelInstance5;
                                                            }
                                                            
                                                            JToken displayStatusValue5 = statusesValue3["displayStatus"];
                                                            if (displayStatusValue5 != null && displayStatusValue5.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance5 = ((string)displayStatusValue5);
                                                                instanceViewStatusInstance4.DisplayStatus = displayStatusInstance5;
                                                            }
                                                            
                                                            JToken messageValue5 = statusesValue3["message"];
                                                            if (messageValue5 != null && messageValue5.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance5 = ((string)messageValue5);
                                                                instanceViewStatusInstance4.Message = messageInstance5;
                                                            }
                                                            
                                                            JToken timeValue5 = statusesValue3["time"];
                                                            if (timeValue5 != null && timeValue5.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance5 = ((DateTimeOffset)timeValue5);
                                                                instanceViewStatusInstance4.Time = timeInstance5;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken bootDiagnosticsValue2 = instanceViewValue["bootDiagnostics"];
                                            if (bootDiagnosticsValue2 != null && bootDiagnosticsValue2.Type != JTokenType.Null)
                                            {
                                                BootDiagnosticsInstanceView bootDiagnosticsInstance2 = new BootDiagnosticsInstanceView();
                                                instanceViewInstance.BootDiagnostics = bootDiagnosticsInstance2;
                                                
                                                JToken consoleScreenshotBlobUriValue = bootDiagnosticsValue2["consoleScreenshotBlobUri"];
                                                if (consoleScreenshotBlobUriValue != null && consoleScreenshotBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(((string)consoleScreenshotBlobUriValue));
                                                    bootDiagnosticsInstance2.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                                }
                                                
                                                JToken serialConsoleLogBlobUriValue = bootDiagnosticsValue2["serialConsoleLogBlobUri"];
                                                if (serialConsoleLogBlobUriValue != null && serialConsoleLogBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    Uri serialConsoleLogBlobUriInstance = TypeConversion.TryParseUri(((string)serialConsoleLogBlobUriValue));
                                                    bootDiagnosticsInstance2.SerialConsoleLogBlobUri = serialConsoleLogBlobUriInstance;
                                                }
                                            }
                                            
                                            JToken statusesArray4 = instanceViewValue["statuses"];
                                            if (statusesArray4 != null && statusesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statusesValue4 in ((JArray)statusesArray4))
                                                {
                                                    InstanceViewStatus instanceViewStatusInstance5 = new InstanceViewStatus();
                                                    instanceViewInstance.Statuses.Add(instanceViewStatusInstance5);
                                                    
                                                    JToken codeValue6 = statusesValue4["code"];
                                                    if (codeValue6 != null && codeValue6.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance6 = ((string)codeValue6);
                                                        instanceViewStatusInstance5.Code = codeInstance6;
                                                    }
                                                    
                                                    JToken levelValue6 = statusesValue4["level"];
                                                    if (levelValue6 != null && levelValue6.Type != JTokenType.Null)
                                                    {
                                                        string levelInstance6 = ((string)levelValue6);
                                                        instanceViewStatusInstance5.Level = levelInstance6;
                                                    }
                                                    
                                                    JToken displayStatusValue6 = statusesValue4["displayStatus"];
                                                    if (displayStatusValue6 != null && displayStatusValue6.Type != JTokenType.Null)
                                                    {
                                                        string displayStatusInstance6 = ((string)displayStatusValue6);
                                                        instanceViewStatusInstance5.DisplayStatus = displayStatusInstance6;
                                                    }
                                                    
                                                    JToken messageValue6 = statusesValue4["message"];
                                                    if (messageValue6 != null && messageValue6.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance6 = ((string)messageValue6);
                                                        instanceViewStatusInstance5.Message = messageInstance6;
                                                    }
                                                    
                                                    JToken timeValue6 = statusesValue4["time"];
                                                    if (timeValue6 != null && timeValue6.Type != JTokenType.Null)
                                                    {
                                                        DateTimeOffset timeInstance6 = ((DateTimeOffset)timeValue6);
                                                        instanceViewStatusInstance5.Time = timeInstance6;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken resourcesArray = valueValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        virtualMachineJsonInstance.Extensions = new List<VirtualMachineExtension>();
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            VirtualMachineExtension virtualMachineExtensionJsonInstance = new VirtualMachineExtension();
                                            virtualMachineJsonInstance.Extensions.Add(virtualMachineExtensionJsonInstance);
                                            
                                            JToken propertiesValue3 = resourcesValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                JToken publisherValue3 = propertiesValue3["publisher"];
                                                if (publisherValue3 != null && publisherValue3.Type != JTokenType.Null)
                                                {
                                                    string publisherInstance3 = ((string)publisherValue3);
                                                    virtualMachineExtensionJsonInstance.Publisher = publisherInstance3;
                                                }
                                                
                                                JToken typeValue3 = propertiesValue3["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    virtualMachineExtensionJsonInstance.ExtensionType = typeInstance3;
                                                }
                                                
                                                JToken typeHandlerVersionValue3 = propertiesValue3["typeHandlerVersion"];
                                                if (typeHandlerVersionValue3 != null && typeHandlerVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string typeHandlerVersionInstance3 = ((string)typeHandlerVersionValue3);
                                                    virtualMachineExtensionJsonInstance.TypeHandlerVersion = typeHandlerVersionInstance3;
                                                }
                                                
                                                JToken autoUpgradeMinorVersionValue = propertiesValue3["autoUpgradeMinorVersion"];
                                                if (autoUpgradeMinorVersionValue != null && autoUpgradeMinorVersionValue.Type != JTokenType.Null)
                                                {
                                                    bool autoUpgradeMinorVersionInstance = ((bool)autoUpgradeMinorVersionValue);
                                                    virtualMachineExtensionJsonInstance.AutoUpgradeMinorVersion = autoUpgradeMinorVersionInstance;
                                                }
                                                
                                                JToken settingsValue = propertiesValue3["settings"];
                                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                                {
                                                    string settingsInstance = settingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.Settings = settingsInstance;
                                                }
                                                
                                                JToken protectedSettingsValue = propertiesValue3["protectedSettings"];
                                                if (protectedSettingsValue != null && protectedSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string protectedSettingsInstance = protectedSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    virtualMachineExtensionJsonInstance.ProtectedSettings = protectedSettingsInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    virtualMachineExtensionJsonInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken instanceViewValue2 = propertiesValue3["instanceView"];
                                                if (instanceViewValue2 != null && instanceViewValue2.Type != JTokenType.Null)
                                                {
                                                    VirtualMachineExtensionInstanceView instanceViewInstance2 = new VirtualMachineExtensionInstanceView();
                                                    virtualMachineExtensionJsonInstance.InstanceView = instanceViewInstance2;
                                                    
                                                    JToken nameValue6 = instanceViewValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        instanceViewInstance2.Name = nameInstance6;
                                                    }
                                                    
                                                    JToken typeValue4 = instanceViewValue2["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        instanceViewInstance2.ExtensionType = typeInstance4;
                                                    }
                                                    
                                                    JToken typeHandlerVersionValue4 = instanceViewValue2["typeHandlerVersion"];
                                                    if (typeHandlerVersionValue4 != null && typeHandlerVersionValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeHandlerVersionInstance4 = ((string)typeHandlerVersionValue4);
                                                        instanceViewInstance2.TypeHandlerVersion = typeHandlerVersionInstance4;
                                                    }
                                                    
                                                    JToken substatusesArray2 = instanceViewValue2["substatuses"];
                                                    if (substatusesArray2 != null && substatusesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken substatusesValue2 in ((JArray)substatusesArray2))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance6 = new InstanceViewStatus();
                                                            instanceViewInstance2.SubStatuses.Add(instanceViewStatusInstance6);
                                                            
                                                            JToken codeValue7 = substatusesValue2["code"];
                                                            if (codeValue7 != null && codeValue7.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance7 = ((string)codeValue7);
                                                                instanceViewStatusInstance6.Code = codeInstance7;
                                                            }
                                                            
                                                            JToken levelValue7 = substatusesValue2["level"];
                                                            if (levelValue7 != null && levelValue7.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance7 = ((string)levelValue7);
                                                                instanceViewStatusInstance6.Level = levelInstance7;
                                                            }
                                                            
                                                            JToken displayStatusValue7 = substatusesValue2["displayStatus"];
                                                            if (displayStatusValue7 != null && displayStatusValue7.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance7 = ((string)displayStatusValue7);
                                                                instanceViewStatusInstance6.DisplayStatus = displayStatusInstance7;
                                                            }
                                                            
                                                            JToken messageValue7 = substatusesValue2["message"];
                                                            if (messageValue7 != null && messageValue7.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance7 = ((string)messageValue7);
                                                                instanceViewStatusInstance6.Message = messageInstance7;
                                                            }
                                                            
                                                            JToken timeValue7 = substatusesValue2["time"];
                                                            if (timeValue7 != null && timeValue7.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance7 = ((DateTimeOffset)timeValue7);
                                                                instanceViewStatusInstance6.Time = timeInstance7;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken statusesArray5 = instanceViewValue2["statuses"];
                                                    if (statusesArray5 != null && statusesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken statusesValue5 in ((JArray)statusesArray5))
                                                        {
                                                            InstanceViewStatus instanceViewStatusInstance7 = new InstanceViewStatus();
                                                            instanceViewInstance2.Statuses.Add(instanceViewStatusInstance7);
                                                            
                                                            JToken codeValue8 = statusesValue5["code"];
                                                            if (codeValue8 != null && codeValue8.Type != JTokenType.Null)
                                                            {
                                                                string codeInstance8 = ((string)codeValue8);
                                                                instanceViewStatusInstance7.Code = codeInstance8;
                                                            }
                                                            
                                                            JToken levelValue8 = statusesValue5["level"];
                                                            if (levelValue8 != null && levelValue8.Type != JTokenType.Null)
                                                            {
                                                                string levelInstance8 = ((string)levelValue8);
                                                                instanceViewStatusInstance7.Level = levelInstance8;
                                                            }
                                                            
                                                            JToken displayStatusValue8 = statusesValue5["displayStatus"];
                                                            if (displayStatusValue8 != null && displayStatusValue8.Type != JTokenType.Null)
                                                            {
                                                                string displayStatusInstance8 = ((string)displayStatusValue8);
                                                                instanceViewStatusInstance7.DisplayStatus = displayStatusInstance8;
                                                            }
                                                            
                                                            JToken messageValue8 = statusesValue5["message"];
                                                            if (messageValue8 != null && messageValue8.Type != JTokenType.Null)
                                                            {
                                                                string messageInstance8 = ((string)messageValue8);
                                                                instanceViewStatusInstance7.Message = messageInstance8;
                                                            }
                                                            
                                                            JToken timeValue8 = statusesValue5["time"];
                                                            if (timeValue8 != null && timeValue8.Type != JTokenType.Null)
                                                            {
                                                                DateTimeOffset timeInstance8 = ((DateTimeOffset)timeValue8);
                                                                instanceViewStatusInstance7.Time = timeInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken idValue6 = resourcesValue["id"];
                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                            {
                                                string idInstance6 = ((string)idValue6);
                                                virtualMachineExtensionJsonInstance.Id = idInstance6;
                                            }
                                            
                                            JToken nameValue7 = resourcesValue["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                virtualMachineExtensionJsonInstance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = resourcesValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                virtualMachineExtensionJsonInstance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue = resourcesValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                virtualMachineExtensionJsonInstance.Location = locationInstance;
                                            }
                                            
                                            JToken tagsSequenceElement = ((JToken)resourcesValue["tags"]);
                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in tagsSequenceElement)
                                                {
                                                    string tagsKey = ((string)property.Name);
                                                    string tagsValue = ((string)property.Value);
                                                    virtualMachineExtensionJsonInstance.Tags.Add(tagsKey, tagsValue);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue7 = valueValue["id"];
                                    if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                    {
                                        string idInstance7 = ((string)idValue7);
                                        virtualMachineJsonInstance.Id = idInstance7;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualMachineJsonInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualMachineJsonInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualMachineJsonInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualMachineJsonInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> PowerOffAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "PowerOffAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginPoweringOffAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> RestartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginRestartingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public async Task<ComputeLongRunningOperationResponse> StartAsync(string resourceGroupName, string vmName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vmName", vmName);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ComputeOperationResponse response = await client.VirtualMachines.BeginStartingAsync(resourceGroupName, vmName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ComputeLongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ComputeOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
