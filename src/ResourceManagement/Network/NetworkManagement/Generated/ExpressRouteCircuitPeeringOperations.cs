// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// Peerings for your subscription.
    /// </summary>
    internal partial class ExpressRouteCircuitPeeringOperations : IServiceOperations<NetworkResourceProviderClient>, IExpressRouteCircuitPeeringOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ExpressRouteCircuitPeeringOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ExpressRouteCircuitPeeringOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put Pering operation creates/updates an peering in the
        /// specified ExpressRouteCircuits
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for Put ExpressRouteCircuit Peering Api service call
        /// </returns>
        public async Task<ExpressRouteCircuitPeeringPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            if (peeringName == null)
            {
                throw new ArgumentNullException("peeringName");
            }
            if (peeringParameters == null)
            {
                throw new ArgumentNullException("peeringParameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("peeringName", peeringName);
                tracingParameters.Add("peeringParameters", peeringParameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/peerings/";
            url = url + Uri.EscapeDataString(peeringName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject expressRouteCircuitPeeringJsonFormatValue = new JObject();
                requestDoc = expressRouteCircuitPeeringJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                expressRouteCircuitPeeringJsonFormatValue["properties"] = propertiesValue;
                
                if (peeringParameters.PeeringType != null)
                {
                    propertiesValue["peeringType"] = peeringParameters.PeeringType;
                }
                
                if (peeringParameters.State != null)
                {
                    propertiesValue["state"] = peeringParameters.State;
                }
                
                propertiesValue["azureASN"] = peeringParameters.AzureASN;
                
                propertiesValue["peerASN"] = peeringParameters.PeerASN;
                
                if (peeringParameters.PrimaryPeerAddressPrefix != null)
                {
                    propertiesValue["primaryPeerAddressPrefix"] = peeringParameters.PrimaryPeerAddressPrefix;
                }
                
                if (peeringParameters.SecondaryPeerAddressPrefix != null)
                {
                    propertiesValue["secondaryPeerAddressPrefix"] = peeringParameters.SecondaryPeerAddressPrefix;
                }
                
                if (peeringParameters.PrimaryAzurePort != null)
                {
                    propertiesValue["primaryAzurePort"] = peeringParameters.PrimaryAzurePort;
                }
                
                if (peeringParameters.SecondaryAzurePort != null)
                {
                    propertiesValue["secondaryAzurePort"] = peeringParameters.SecondaryAzurePort;
                }
                
                if (peeringParameters.SharedKey != null)
                {
                    propertiesValue["sharedKey"] = peeringParameters.SharedKey;
                }
                
                propertiesValue["vlanId"] = peeringParameters.VlanId;
                
                if (peeringParameters.MicrosoftPeeringConfig != null)
                {
                    JObject microsoftPeeringConfigValue = new JObject();
                    propertiesValue["microsoftPeeringConfig"] = microsoftPeeringConfigValue;
                    
                    if (peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixes != null)
                    {
                        if (peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixes is ILazyCollection == false || ((ILazyCollection)peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).IsInitialized)
                        {
                            JArray advertisedPublicPrefixesArray = new JArray();
                            foreach (string advertisedPublicPrefixesItem in peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixes)
                            {
                                advertisedPublicPrefixesArray.Add(advertisedPublicPrefixesItem);
                            }
                            microsoftPeeringConfigValue["advertisedPublicPrefixes"] = advertisedPublicPrefixesArray;
                        }
                    }
                    
                    if (peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState != null)
                    {
                        microsoftPeeringConfigValue["advertisedPublicPrefixesState"] = peeringParameters.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState;
                    }
                    
                    microsoftPeeringConfigValue["customerASN"] = peeringParameters.MicrosoftPeeringConfig.CustomerASN;
                    
                    if (peeringParameters.MicrosoftPeeringConfig.RoutingRegistryName != null)
                    {
                        microsoftPeeringConfigValue["routingRegistryName"] = peeringParameters.MicrosoftPeeringConfig.RoutingRegistryName;
                    }
                }
                
                if (peeringParameters.Stats != null)
                {
                    JObject statsValue = new JObject();
                    propertiesValue["stats"] = statsValue;
                    
                    statsValue["bytesIn"] = peeringParameters.Stats.BytesIn;
                    
                    statsValue["bytesOut"] = peeringParameters.Stats.BytesOut;
                }
                
                if (peeringParameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = peeringParameters.ProvisioningState;
                }
                
                if (peeringParameters.Name != null)
                {
                    expressRouteCircuitPeeringJsonFormatValue["name"] = peeringParameters.Name;
                }
                
                if (peeringParameters.Etag != null)
                {
                    expressRouteCircuitPeeringJsonFormatValue["etag"] = peeringParameters.Etag;
                }
                
                if (peeringParameters.Id != null)
                {
                    expressRouteCircuitPeeringJsonFormatValue["id"] = peeringParameters.Id;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitPeeringPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitPeeringPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ExpressRouteCircuitPeering peeringInstance = new ExpressRouteCircuitPeering();
                            result.Peering = peeringInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken peeringTypeValue = propertiesValue2["peeringType"];
                                if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                {
                                    string peeringTypeInstance = ((string)peeringTypeValue);
                                    peeringInstance.PeeringType = peeringTypeInstance;
                                }
                                
                                JToken stateValue = propertiesValue2["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    peeringInstance.State = stateInstance;
                                }
                                
                                JToken azureASNValue = propertiesValue2["azureASN"];
                                if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                {
                                    int azureASNInstance = ((int)azureASNValue);
                                    peeringInstance.AzureASN = azureASNInstance;
                                }
                                
                                JToken peerASNValue = propertiesValue2["peerASN"];
                                if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                {
                                    int peerASNInstance = ((int)peerASNValue);
                                    peeringInstance.PeerASN = peerASNInstance;
                                }
                                
                                JToken primaryPeerAddressPrefixValue = propertiesValue2["primaryPeerAddressPrefix"];
                                if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                    peeringInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                }
                                
                                JToken secondaryPeerAddressPrefixValue = propertiesValue2["secondaryPeerAddressPrefix"];
                                if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                    peeringInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                }
                                
                                JToken primaryAzurePortValue = propertiesValue2["primaryAzurePort"];
                                if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                {
                                    string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                    peeringInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                }
                                
                                JToken secondaryAzurePortValue = propertiesValue2["secondaryAzurePort"];
                                if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                {
                                    string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                    peeringInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                }
                                
                                JToken sharedKeyValue = propertiesValue2["sharedKey"];
                                if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                {
                                    string sharedKeyInstance = ((string)sharedKeyValue);
                                    peeringInstance.SharedKey = sharedKeyInstance;
                                }
                                
                                JToken vlanIdValue = propertiesValue2["vlanId"];
                                if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                {
                                    int vlanIdInstance = ((int)vlanIdValue);
                                    peeringInstance.VlanId = vlanIdInstance;
                                }
                                
                                JToken microsoftPeeringConfigValue2 = propertiesValue2["microsoftPeeringConfig"];
                                if (microsoftPeeringConfigValue2 != null && microsoftPeeringConfigValue2.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                    peeringInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                    
                                    JToken advertisedPublicPrefixesArray2 = microsoftPeeringConfigValue2["advertisedPublicPrefixes"];
                                    if (advertisedPublicPrefixesArray2 != null && advertisedPublicPrefixesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray2))
                                        {
                                            microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                        }
                                    }
                                    
                                    JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue2["advertisedPublicPrefixesState"];
                                    if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                    {
                                        string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                        microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                    }
                                    
                                    JToken customerASNValue = microsoftPeeringConfigValue2["customerASN"];
                                    if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                    {
                                        int customerASNInstance = ((int)customerASNValue);
                                        microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                    }
                                    
                                    JToken routingRegistryNameValue = microsoftPeeringConfigValue2["routingRegistryName"];
                                    if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                    {
                                        string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                        microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                    }
                                }
                                
                                JToken statsValue2 = propertiesValue2["stats"];
                                if (statsValue2 != null && statsValue2.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                    peeringInstance.Stats = statsInstance;
                                    
                                    JToken bytesInValue = statsValue2["bytesIn"];
                                    if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                    {
                                        int bytesInInstance = ((int)bytesInValue);
                                        statsInstance.BytesIn = bytesInInstance;
                                    }
                                    
                                    JToken bytesOutValue = statsValue2["bytesOut"];
                                    if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                    {
                                        int bytesOutInstance = ((int)bytesOutValue);
                                        statsInstance.BytesOut = bytesOutInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    peeringInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                peeringInstance.Name = nameInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                peeringInstance.Etag = etagInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                peeringInstance.Id = idInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string circuitName, string peeringName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            if (peeringName == null)
            {
                throw new ArgumentNullException("peeringName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("peeringName", peeringName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/peerings/";
            url = url + Uri.EscapeDataString(peeringName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put Pering operation creates/updates an peering in thespecified
        /// ExpressRouteCircuits
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("peeringName", peeringName);
                tracingParameters.Add("peeringParameters", peeringParameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteCircuitPeeringPutResponse response = await client.ExpressRouteCircuitPeerings.BeginCreateOrUpdatingAsync(resourceGroupName, circuitName, peeringName, peeringParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string circuitName, string peeringName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("peeringName", peeringName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.ExpressRouteCircuitPeerings.BeginDeletingAsync(resourceGroupName, circuitName, peeringName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The GET peering operation retrieves the specified authorization
        /// from the ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for GET ExpressRouteCircuit Peering Api service call
        /// </returns>
        public async Task<ExpressRouteCircuitPeeringGetResponse> GetAsync(string resourceGroupName, string circuitName, string peeringName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            if (peeringName == null)
            {
                throw new ArgumentNullException("peeringName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("peeringName", peeringName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/peerings/";
            url = url + Uri.EscapeDataString(peeringName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitPeeringGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitPeeringGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ExpressRouteCircuitPeering peeringInstance = new ExpressRouteCircuitPeering();
                            result.Peering = peeringInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken peeringTypeValue = propertiesValue["peeringType"];
                                if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                {
                                    string peeringTypeInstance = ((string)peeringTypeValue);
                                    peeringInstance.PeeringType = peeringTypeInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    peeringInstance.State = stateInstance;
                                }
                                
                                JToken azureASNValue = propertiesValue["azureASN"];
                                if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                {
                                    int azureASNInstance = ((int)azureASNValue);
                                    peeringInstance.AzureASN = azureASNInstance;
                                }
                                
                                JToken peerASNValue = propertiesValue["peerASN"];
                                if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                {
                                    int peerASNInstance = ((int)peerASNValue);
                                    peeringInstance.PeerASN = peerASNInstance;
                                }
                                
                                JToken primaryPeerAddressPrefixValue = propertiesValue["primaryPeerAddressPrefix"];
                                if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                    peeringInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                }
                                
                                JToken secondaryPeerAddressPrefixValue = propertiesValue["secondaryPeerAddressPrefix"];
                                if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                    peeringInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                }
                                
                                JToken primaryAzurePortValue = propertiesValue["primaryAzurePort"];
                                if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                {
                                    string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                    peeringInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                }
                                
                                JToken secondaryAzurePortValue = propertiesValue["secondaryAzurePort"];
                                if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                {
                                    string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                    peeringInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                }
                                
                                JToken sharedKeyValue = propertiesValue["sharedKey"];
                                if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                {
                                    string sharedKeyInstance = ((string)sharedKeyValue);
                                    peeringInstance.SharedKey = sharedKeyInstance;
                                }
                                
                                JToken vlanIdValue = propertiesValue["vlanId"];
                                if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                {
                                    int vlanIdInstance = ((int)vlanIdValue);
                                    peeringInstance.VlanId = vlanIdInstance;
                                }
                                
                                JToken microsoftPeeringConfigValue = propertiesValue["microsoftPeeringConfig"];
                                if (microsoftPeeringConfigValue != null && microsoftPeeringConfigValue.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                    peeringInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                    
                                    JToken advertisedPublicPrefixesArray = microsoftPeeringConfigValue["advertisedPublicPrefixes"];
                                    if (advertisedPublicPrefixesArray != null && advertisedPublicPrefixesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray))
                                        {
                                            microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                        }
                                    }
                                    
                                    JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue["advertisedPublicPrefixesState"];
                                    if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                    {
                                        string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                        microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                    }
                                    
                                    JToken customerASNValue = microsoftPeeringConfigValue["customerASN"];
                                    if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                    {
                                        int customerASNInstance = ((int)customerASNValue);
                                        microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                    }
                                    
                                    JToken routingRegistryNameValue = microsoftPeeringConfigValue["routingRegistryName"];
                                    if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                    {
                                        string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                        microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                    }
                                }
                                
                                JToken statsValue = propertiesValue["stats"];
                                if (statsValue != null && statsValue.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                    peeringInstance.Stats = statsInstance;
                                    
                                    JToken bytesInValue = statsValue["bytesIn"];
                                    if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                    {
                                        int bytesInInstance = ((int)bytesInValue);
                                        statsInstance.BytesIn = bytesInInstance;
                                    }
                                    
                                    JToken bytesOutValue = statsValue["bytesOut"];
                                    if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                    {
                                        int bytesOutInstance = ((int)bytesOutValue);
                                        statsInstance.BytesOut = bytesOutInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    peeringInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                peeringInstance.Name = nameInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                peeringInstance.Etag = etagInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                peeringInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List peering operation retrieves all the peerings in an
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the curcuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListPeering Api service callRetrieves all Peerings
        /// that belongs to an ExpressRouteCircuit
        /// </returns>
        public async Task<ExpressRouteCircuitPeeringListResponse> ListAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/peerings";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitPeeringListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitPeeringListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuitPeering expressRouteCircuitPeeringJsonFormatInstance = new ExpressRouteCircuitPeering();
                                    result.Peerings.Add(expressRouteCircuitPeeringJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken peeringTypeValue = propertiesValue["peeringType"];
                                        if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                        {
                                            string peeringTypeInstance = ((string)peeringTypeValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.PeeringType = peeringTypeInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            string stateInstance = ((string)stateValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.State = stateInstance;
                                        }
                                        
                                        JToken azureASNValue = propertiesValue["azureASN"];
                                        if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                        {
                                            int azureASNInstance = ((int)azureASNValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.AzureASN = azureASNInstance;
                                        }
                                        
                                        JToken peerASNValue = propertiesValue["peerASN"];
                                        if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                        {
                                            int peerASNInstance = ((int)peerASNValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.PeerASN = peerASNInstance;
                                        }
                                        
                                        JToken primaryPeerAddressPrefixValue = propertiesValue["primaryPeerAddressPrefix"];
                                        if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                        {
                                            string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                        }
                                        
                                        JToken secondaryPeerAddressPrefixValue = propertiesValue["secondaryPeerAddressPrefix"];
                                        if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                        {
                                            string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                        }
                                        
                                        JToken primaryAzurePortValue = propertiesValue["primaryAzurePort"];
                                        if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                        {
                                            string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                        }
                                        
                                        JToken secondaryAzurePortValue = propertiesValue["secondaryAzurePort"];
                                        if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                        {
                                            string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                        }
                                        
                                        JToken sharedKeyValue = propertiesValue["sharedKey"];
                                        if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedKeyInstance = ((string)sharedKeyValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.SharedKey = sharedKeyInstance;
                                        }
                                        
                                        JToken vlanIdValue = propertiesValue["vlanId"];
                                        if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                        {
                                            int vlanIdInstance = ((int)vlanIdValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.VlanId = vlanIdInstance;
                                        }
                                        
                                        JToken microsoftPeeringConfigValue = propertiesValue["microsoftPeeringConfig"];
                                        if (microsoftPeeringConfigValue != null && microsoftPeeringConfigValue.Type != JTokenType.Null)
                                        {
                                            ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                            expressRouteCircuitPeeringJsonFormatInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                            
                                            JToken advertisedPublicPrefixesArray = microsoftPeeringConfigValue["advertisedPublicPrefixes"];
                                            if (advertisedPublicPrefixesArray != null && advertisedPublicPrefixesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray))
                                                {
                                                    microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                                }
                                            }
                                            
                                            JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue["advertisedPublicPrefixesState"];
                                            if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                            {
                                                string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                                microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                            }
                                            
                                            JToken customerASNValue = microsoftPeeringConfigValue["customerASN"];
                                            if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                            {
                                                int customerASNInstance = ((int)customerASNValue);
                                                microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                            }
                                            
                                            JToken routingRegistryNameValue = microsoftPeeringConfigValue["routingRegistryName"];
                                            if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                            {
                                                string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                                microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                            }
                                        }
                                        
                                        JToken statsValue = propertiesValue["stats"];
                                        if (statsValue != null && statsValue.Type != JTokenType.Null)
                                        {
                                            ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                            expressRouteCircuitPeeringJsonFormatInstance.Stats = statsInstance;
                                            
                                            JToken bytesInValue = statsValue["bytesIn"];
                                            if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                            {
                                                int bytesInInstance = ((int)bytesInValue);
                                                statsInstance.BytesIn = bytesInInstance;
                                            }
                                            
                                            JToken bytesOutValue = statsValue["bytesOut"];
                                            if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                            {
                                                int bytesOutInstance = ((int)bytesOutValue);
                                                statsInstance.BytesOut = bytesOutInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            expressRouteCircuitPeeringJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        expressRouteCircuitPeeringJsonFormatInstance.Name = nameInstance;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        expressRouteCircuitPeeringJsonFormatInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        expressRouteCircuitPeeringJsonFormatInstance.Id = idInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
