// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;

namespace Microsoft.Azure.Management.Compute
{
    /// <summary>
    /// The Compute Management Client.
    /// </summary>
    public static partial class VirtualMachineOperationsExtensions
    {
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginCapturing(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginCapturingAsync(resourceGroupName, vmName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginCapturingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return operations.BeginCapturingAsync(resourceGroupName, vmName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineCreateOrUpdateResponse BeginCreatingOrUpdating(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginCreatingOrUpdatingAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineCreateOrUpdateResponse> BeginCreatingOrUpdatingAsync(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return operations.BeginCreatingOrUpdatingAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginDeallocating(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginDeallocatingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginDeallocatingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginDeallocatingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse BeginDeleting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginDeletingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> BeginDeletingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginDeletingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginPoweringOff(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginPoweringOffAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginPoweringOffAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginPoweringOffAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginRestarting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginRestartingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginRestartingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginRestartingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static ComputeOperationResponse BeginStarting(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).BeginStartingAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<ComputeOperationResponse> BeginStartingAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.BeginStartingAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Capture(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).CaptureAsync(resourceGroupName, vmName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Captures the VM by copying VirtualHardDisks of the VM and outputs a
        /// template that can be used to create similar VMs.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> CaptureAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName, VirtualMachineCaptureParameters parameters)
        {
            return operations.CaptureAsync(resourceGroupName, vmName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse CreateOrUpdate(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to create or update a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> CreateOrUpdateAsync(this IVirtualMachineOperations operations, string resourceGroupName, VirtualMachine parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Deallocate(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).DeallocateAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Shuts down the Virtual Machine and releases the compute resources.
        /// You are not billed for the compute resources that this Virtual
        /// Machine uses.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> DeallocateAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.DeallocateAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static DeleteOperationResponse Delete(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).DeleteAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to delete a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The compute long running operation response.
        /// </returns>
        public static Task<DeleteOperationResponse> DeleteAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.DeleteAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Generalize(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GeneralizeAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the state of the VM as Generalized.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> GeneralizeAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GeneralizeAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static VirtualMachineGetResponse Get(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GetAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static Task<VirtualMachineGetResponse> GetAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GetAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static VirtualMachineGetResponse GetWithInstanceView(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).GetWithInstanceViewAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to get a virtual machine along with its instance view.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The GetVM operation response.
        /// </returns>
        public static Task<VirtualMachineGetResponse> GetWithInstanceViewAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.GetWithInstanceViewAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse List(this IVirtualMachineOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to list virtual machines under a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListAsync(this IVirtualMachineOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse ListAll(this IVirtualMachineOperations operations, ListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAllAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the list of Virtual Machines in the subscription. Use nextLink
        /// property in the response to get the next page of Virtual Machines.
        /// Do this till nextLink is not null to fetch all the Virtual
        /// Machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='parameters'>
        /// Optional.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListAllAsync(this IVirtualMachineOperations operations, ListParameters parameters)
        {
            return operations.ListAllAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineSizeListResponse ListAvailableSizes(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListAvailableSizesAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists virtual-machine-sizes available to be used for a virtual
        /// machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineSizeListResponse> ListAvailableSizesAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.ListAvailableSizesAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineListResponse ListNext(this IVirtualMachineOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of Virtual Machines. NextLink is obtained by
        /// making a ListAll() callwhich fetches the first page of Virtual
        /// Machines and a link to fetch the next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// ListVirtualMachines operation.
        /// </param>
        /// <returns>
        /// The List Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineListResponse> ListNextAsync(this IVirtualMachineOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse PowerOff(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).PowerOffAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to power off (stop) a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> PowerOffAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.PowerOffAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Restart(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).RestartAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to restart a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> RestartAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.RestartAsync(resourceGroupName, vmName, CancellationToken.None);
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static ComputeLongRunningOperationResponse Start(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualMachineOperations)s).StartAsync(resourceGroupName, vmName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The operation to start a virtual machine.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='vmName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Compute service response for long-running operations.
        /// </returns>
        public static Task<ComputeLongRunningOperationResponse> StartAsync(this IVirtualMachineOperations operations, string resourceGroupName, string vmName)
        {
            return operations.StartAsync(resourceGroupName, vmName, CancellationToken.None);
        }
    }
}
