// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Management.Network.Models;

namespace Microsoft.Azure.Management.Network.Models
{
    /// <summary>
    /// Outbound NAT pool of the loadbalancer
    /// </summary>
    public partial class OutboundNatRule : ChildResource
    {
        private int _allocatedOutboundPorts;
        
        /// <summary>
        /// Required. Gets or sets the number of outbound ports to be used for
        /// SNAT
        /// </summary>
        public int AllocatedOutboundPorts
        {
            get { return this._allocatedOutboundPorts; }
            set { this._allocatedOutboundPorts = value; }
        }
        
        private ResourceId _backendAddressPool;
        
        /// <summary>
        /// Required. Gets or sets a reference to a pool of DIPs. Outbound
        /// traffic is randomly load balanced across IPs in the backend IPs
        /// </summary>
        public ResourceId BackendAddressPool
        {
            get { return this._backendAddressPool; }
            set { this._backendAddressPool = value; }
        }
        
        private IList<ResourceId> _frontendIpConfigurations;
        
        /// <summary>
        /// Optional. Gets or sets Frontend IP addresses of the load balancer
        /// </summary>
        public IList<ResourceId> FrontendIpConfigurations
        {
            get { return this._frontendIpConfigurations; }
            set { this._frontendIpConfigurations = value; }
        }
        
        private string _provisioningState;
        
        /// <summary>
        /// Optional. Gets or sets Provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OutboundNatRule class.
        /// </summary>
        public OutboundNatRule()
        {
            this.FrontendIpConfigurations = new LazyList<ResourceId>();
        }
        
        /// <summary>
        /// Initializes a new instance of the OutboundNatRule class with
        /// required arguments.
        /// </summary>
        public OutboundNatRule(int allocatedOutboundPorts, ResourceId backendAddressPool)
            : this()
        {
            if (backendAddressPool == null)
            {
                throw new ArgumentNullException("backendAddressPool");
            }
            this.AllocatedOutboundPorts = allocatedOutboundPorts;
            this.BackendAddressPool = backendAddressPool;
        }
    }
}
