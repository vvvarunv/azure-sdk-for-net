// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Windows Azure Network management API provides a RESTful set of web
    /// services that interact with Windows Azure Networks service to manage
    /// your network resrources. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Networks
    /// service.
    /// </summary>
    public static partial class ExpressRouteCircuitPeeringOperationsExtensions
    {
        /// <summary>
        /// The Put Pering operation creates/updates an peering in the
        /// specified ExpressRouteCircuits
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <returns>
        /// Response for Put ExpressRouteCircuit Peering Api service call
        /// </returns>
        public static ExpressRouteCircuitPeeringPutResponse BeginCreateOrUpdating(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).BeginCreateOrUpdatingAsync(resourceGroupName, circuitName, peeringName, peeringParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Put Pering operation creates/updates an peering in the
        /// specified ExpressRouteCircuits
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <returns>
        /// Response for Put ExpressRouteCircuit Peering Api service call
        /// </returns>
        public static Task<ExpressRouteCircuitPeeringPutResponse> BeginCreateOrUpdatingAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters)
        {
            return operations.BeginCreateOrUpdatingAsync(resourceGroupName, circuitName, peeringName, peeringParameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public static UpdateOperationResponse BeginDeleting(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).BeginDeletingAsync(resourceGroupName, circuitName, peeringName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public static Task<UpdateOperationResponse> BeginDeletingAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return operations.BeginDeletingAsync(resourceGroupName, circuitName, peeringName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Put Pering operation creates/updates an peering in thespecified
        /// ExpressRouteCircuits
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse CreateOrUpdate(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).CreateOrUpdateAsync(resourceGroupName, circuitName, peeringName, peeringParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Put Pering operation creates/updates an peering in thespecified
        /// ExpressRouteCircuits
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <param name='peeringParameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit Peering operation
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName, ExpressRouteCircuitPeering peeringParameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, circuitName, peeringName, peeringParameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).DeleteAsync(resourceGroupName, circuitName, peeringName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The delete peering operation deletes the specified peering from the
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return operations.DeleteAsync(resourceGroupName, circuitName, peeringName, CancellationToken.None);
        }
        
        /// <summary>
        /// The GET peering operation retrieves the specified authorization
        /// from the ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// Response for GET ExpressRouteCircuit Peering Api service call
        /// </returns>
        public static ExpressRouteCircuitPeeringGetResponse Get(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).GetAsync(resourceGroupName, circuitName, peeringName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The GET peering operation retrieves the specified authorization
        /// from the ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='peeringName'>
        /// Required. The name of the peering.
        /// </param>
        /// <returns>
        /// Response for GET ExpressRouteCircuit Peering Api service call
        /// </returns>
        public static Task<ExpressRouteCircuitPeeringGetResponse> GetAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName, string peeringName)
        {
            return operations.GetAsync(resourceGroupName, circuitName, peeringName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List peering operation retrieves all the peerings in an
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the curcuit.
        /// </param>
        /// <returns>
        /// Response for ListPeering Api service callRetrieves all Peerings
        /// that belongs to an ExpressRouteCircuit
        /// </returns>
        public static ExpressRouteCircuitPeeringListResponse List(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExpressRouteCircuitPeeringOperations)s).ListAsync(resourceGroupName, circuitName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List peering operation retrieves all the peerings in an
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Network.IExpressRouteCircuitPeeringOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the curcuit.
        /// </param>
        /// <returns>
        /// Response for ListPeering Api service callRetrieves all Peerings
        /// that belongs to an ExpressRouteCircuit
        /// </returns>
        public static Task<ExpressRouteCircuitPeeringListResponse> ListAsync(this IExpressRouteCircuitPeeringOperations operations, string resourceGroupName, string circuitName)
        {
            return operations.ListAsync(resourceGroupName, circuitName, CancellationToken.None);
        }
    }
}
