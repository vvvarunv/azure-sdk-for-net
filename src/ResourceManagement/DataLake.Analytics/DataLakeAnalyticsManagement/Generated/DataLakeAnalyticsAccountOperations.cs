// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.Analytics;
using Microsoft.Azure.Management.DataLake.Analytics.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    /// <summary>
    /// Operations for managing Data Lake Analytics accounts
    /// </summary>
    internal partial class DataLakeAnalyticsAccountOperations : IServiceOperations<DataLakeAnalyticsManagementClient>, IDataLakeAnalyticsAccountOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DataLakeAnalyticsAccountOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DataLakeAnalyticsAccountOperations(DataLakeAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private DataLakeAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.DataLakeAnalyticsManagementClient.
        /// </summary>
        public DataLakeAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Data Lake Store account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Data Lake
        /// Store account to
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to add
        /// </param>
        /// <param name='parameters'>
        /// Optional. The parameters containing the optional properties
        /// associated with the named Data Lake account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> AddDataLakeStoreAccountAsync(string resourceGroupName, string accountName, string dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (dataLakeStoreAccountName == null)
            {
                throw new ArgumentNullException("dataLakeStoreAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("dataLakeStoreAccountName", dataLakeStoreAccountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "AddDataLakeStoreAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/DataLakeStoreAccounts/";
            url = url + Uri.EscapeDataString(dataLakeStoreAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (parameters != null)
                {
                    JObject addDataLakeStoreParametersValue = new JObject();
                    requestDoc = addDataLakeStoreParametersValue;
                    
                    if (parameters.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        addDataLakeStoreParametersValue["properties"] = propertiesValue;
                        
                        if (parameters.Properties.Suffix != null)
                        {
                            propertiesValue["suffix"] = parameters.Properties.Suffix;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Azure Storage account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Azure
        /// Storage account to
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to add
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and optional
        /// suffix for the Azure Storage Account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> AddStorageAccountAsync(string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "AddStorageAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject addStorageAccountParametersValue = new JObject();
                requestDoc = addStorageAccountParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    addStorageAccountParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.AccessKey != null)
                    {
                        propertiesValue["accessKey"] = parameters.Properties.AccessKey;
                    }
                    
                    if (parameters.Properties.Suffix != null)
                    {
                        propertiesValue["suffix"] = parameters.Properties.Suffix;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins the creation process for the specified Data Lake Analytics
        /// account.This supplies the user with computation services for Data
        /// Lake Analytics workloads
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account will be
        /// associated with.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> BeginCreateAsync(string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataLakeAnalyticsAccount == null)
            {
                throw new ArgumentNullException("parameters.DataLakeAnalyticsAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            if (parameters.DataLakeAnalyticsAccount.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.DataLakeAnalyticsAccount.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataLakeAnalyticsAccountCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataLakeAnalyticsAccountCreateOrUpdateParametersValue;
                
                if (parameters.DataLakeAnalyticsAccount.Location != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["location"] = parameters.DataLakeAnalyticsAccount.Location;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Name != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["name"] = parameters.DataLakeAnalyticsAccount.Name;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Type != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["type"] = parameters.DataLakeAnalyticsAccount.Type;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Id != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["id"] = parameters.DataLakeAnalyticsAccount.Id;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Tags != null)
                {
                    if (parameters.DataLakeAnalyticsAccount.Tags is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.DataLakeAnalyticsAccount.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        dataLakeAnalyticsAccountCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.DataLakeAnalyticsAccount.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = DataLakeAnalyticsManagementClient.DataLakeAnalyticsAccountStatusToString(parameters.DataLakeAnalyticsAccount.Properties.ProvisioningState.Value);
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.State != null)
                    {
                        propertiesValue["state"] = DataLakeAnalyticsManagementClient.DataLakeAnalyticsAccountStateToString(parameters.DataLakeAnalyticsAccount.Properties.State.Value);
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.DefaultDataLakeStoreAccount != null)
                    {
                        propertiesValue["defaultDataLakeStoreAccount"] = parameters.DataLakeAnalyticsAccount.Properties.DefaultDataLakeStoreAccount;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.MaxDegreeOfParallelism != null)
                    {
                        propertiesValue["maxDegreeOfParallelism"] = parameters.DataLakeAnalyticsAccount.Properties.MaxDegreeOfParallelism.Value;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.MaxJobCount != null)
                    {
                        propertiesValue["maxJobCount"] = parameters.DataLakeAnalyticsAccount.Properties.MaxJobCount.Value;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts != null)
                    {
                        if (parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts).IsInitialized)
                        {
                            JArray dataLakeStoreAccountsArray = new JArray();
                            foreach (DataLakeStoreAccount dataLakeStoreAccountsItem in parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts)
                            {
                                JObject dataLakeStoreAccountValue = new JObject();
                                dataLakeStoreAccountsArray.Add(dataLakeStoreAccountValue);
                                
                                if (dataLakeStoreAccountsItem.Name != null)
                                {
                                    dataLakeStoreAccountValue["name"] = dataLakeStoreAccountsItem.Name;
                                }
                                
                                if (dataLakeStoreAccountsItem.Properties != null)
                                {
                                    JObject propertiesValue2 = new JObject();
                                    dataLakeStoreAccountValue["properties"] = propertiesValue2;
                                    
                                    if (dataLakeStoreAccountsItem.Properties.Suffix != null)
                                    {
                                        propertiesValue2["suffix"] = dataLakeStoreAccountsItem.Properties.Suffix;
                                    }
                                }
                            }
                            propertiesValue["dataLakeStoreAccounts"] = dataLakeStoreAccountsArray;
                        }
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts != null)
                    {
                        if (parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts).IsInitialized)
                        {
                            JArray storageAccountsArray = new JArray();
                            foreach (StorageAccount storageAccountsItem in parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts)
                            {
                                JObject storageAccountValue = new JObject();
                                storageAccountsArray.Add(storageAccountValue);
                                
                                if (storageAccountsItem.Name != null)
                                {
                                    storageAccountValue["name"] = storageAccountsItem.Name;
                                }
                                
                                if (storageAccountsItem.Properties != null)
                                {
                                    JObject propertiesValue3 = new JObject();
                                    storageAccountValue["properties"] = propertiesValue3;
                                    
                                    if (storageAccountsItem.Properties.AccessKey != null)
                                    {
                                        propertiesValue3["accessKey"] = storageAccountsItem.Properties.AccessKey;
                                    }
                                    
                                    if (storageAccountsItem.Properties.Suffix != null)
                                    {
                                        propertiesValue3["suffix"] = storageAccountsItem.Properties.Suffix;
                                    }
                                }
                            }
                            propertiesValue["storageAccounts"] = storageAccountsArray;
                        }
                    }
                    
                    propertiesValue["creationTime"] = parameters.DataLakeAnalyticsAccount.Properties.CreationTime;
                    
                    propertiesValue["lastModifiedTime"] = parameters.DataLakeAnalyticsAccount.Properties.LastModifiedTime;
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.Endpoint != null)
                    {
                        propertiesValue["endpoint"] = parameters.DataLakeAnalyticsAccount.Properties.Endpoint;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureAsyncOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureAsyncOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins the delete delete process for the Data Lake Analytics
        /// account object specified by the account name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> BeginDeleteAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureAsyncOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureAsyncOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> BeginUpdateAsync(string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataLakeAnalyticsAccount == null)
            {
                throw new ArgumentNullException("parameters.DataLakeAnalyticsAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            if (parameters.DataLakeAnalyticsAccount.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.DataLakeAnalyticsAccount.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataLakeAnalyticsAccountCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataLakeAnalyticsAccountCreateOrUpdateParametersValue;
                
                if (parameters.DataLakeAnalyticsAccount.Location != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["location"] = parameters.DataLakeAnalyticsAccount.Location;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Name != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["name"] = parameters.DataLakeAnalyticsAccount.Name;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Type != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["type"] = parameters.DataLakeAnalyticsAccount.Type;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Id != null)
                {
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["id"] = parameters.DataLakeAnalyticsAccount.Id;
                }
                
                if (parameters.DataLakeAnalyticsAccount.Tags != null)
                {
                    if (parameters.DataLakeAnalyticsAccount.Tags is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.DataLakeAnalyticsAccount.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        dataLakeAnalyticsAccountCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.DataLakeAnalyticsAccount.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    dataLakeAnalyticsAccountCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = DataLakeAnalyticsManagementClient.DataLakeAnalyticsAccountStatusToString(parameters.DataLakeAnalyticsAccount.Properties.ProvisioningState.Value);
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.State != null)
                    {
                        propertiesValue["state"] = DataLakeAnalyticsManagementClient.DataLakeAnalyticsAccountStateToString(parameters.DataLakeAnalyticsAccount.Properties.State.Value);
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.DefaultDataLakeStoreAccount != null)
                    {
                        propertiesValue["defaultDataLakeStoreAccount"] = parameters.DataLakeAnalyticsAccount.Properties.DefaultDataLakeStoreAccount;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.MaxDegreeOfParallelism != null)
                    {
                        propertiesValue["maxDegreeOfParallelism"] = parameters.DataLakeAnalyticsAccount.Properties.MaxDegreeOfParallelism.Value;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.MaxJobCount != null)
                    {
                        propertiesValue["maxJobCount"] = parameters.DataLakeAnalyticsAccount.Properties.MaxJobCount.Value;
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts != null)
                    {
                        if (parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts).IsInitialized)
                        {
                            JArray dataLakeStoreAccountsArray = new JArray();
                            foreach (DataLakeStoreAccount dataLakeStoreAccountsItem in parameters.DataLakeAnalyticsAccount.Properties.DataLakeStoreAccounts)
                            {
                                JObject dataLakeStoreAccountValue = new JObject();
                                dataLakeStoreAccountsArray.Add(dataLakeStoreAccountValue);
                                
                                if (dataLakeStoreAccountsItem.Name != null)
                                {
                                    dataLakeStoreAccountValue["name"] = dataLakeStoreAccountsItem.Name;
                                }
                                
                                if (dataLakeStoreAccountsItem.Properties != null)
                                {
                                    JObject propertiesValue2 = new JObject();
                                    dataLakeStoreAccountValue["properties"] = propertiesValue2;
                                    
                                    if (dataLakeStoreAccountsItem.Properties.Suffix != null)
                                    {
                                        propertiesValue2["suffix"] = dataLakeStoreAccountsItem.Properties.Suffix;
                                    }
                                }
                            }
                            propertiesValue["dataLakeStoreAccounts"] = dataLakeStoreAccountsArray;
                        }
                    }
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts != null)
                    {
                        if (parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts).IsInitialized)
                        {
                            JArray storageAccountsArray = new JArray();
                            foreach (StorageAccount storageAccountsItem in parameters.DataLakeAnalyticsAccount.Properties.StorageAccounts)
                            {
                                JObject storageAccountValue = new JObject();
                                storageAccountsArray.Add(storageAccountValue);
                                
                                if (storageAccountsItem.Name != null)
                                {
                                    storageAccountValue["name"] = storageAccountsItem.Name;
                                }
                                
                                if (storageAccountsItem.Properties != null)
                                {
                                    JObject propertiesValue3 = new JObject();
                                    storageAccountValue["properties"] = propertiesValue3;
                                    
                                    if (storageAccountsItem.Properties.AccessKey != null)
                                    {
                                        propertiesValue3["accessKey"] = storageAccountsItem.Properties.AccessKey;
                                    }
                                    
                                    if (storageAccountsItem.Properties.Suffix != null)
                                    {
                                        propertiesValue3["suffix"] = storageAccountsItem.Properties.Suffix;
                                    }
                                }
                            }
                            propertiesValue["storageAccounts"] = storageAccountsArray;
                        }
                    }
                    
                    propertiesValue["creationTime"] = parameters.DataLakeAnalyticsAccount.Properties.CreationTime;
                    
                    propertiesValue["lastModifiedTime"] = parameters.DataLakeAnalyticsAccount.Properties.LastModifiedTime;
                    
                    if (parameters.DataLakeAnalyticsAccount.Properties.Endpoint != null)
                    {
                        propertiesValue["endpoint"] = parameters.DataLakeAnalyticsAccount.Properties.Endpoint;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureAsyncOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureAsyncOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates the specified Data Lake Analytics account.This supplies the
        /// user with computation services for Data Lake Analytics workloads
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateAsync(string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataLakeAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse response = await client.DataLakeAnalyticsAccount.BeginCreateAsync(resourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account with the link to the
        /// next page, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Store account page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListDataLakeStoreResponse> DataLakeStoreAccountListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "DataLakeStoreAccountListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListDataLakeStoreResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListDataLakeStoreResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                                    result.Value.Add(dataLakeStoreAccountInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataLakeStoreAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DataLakeStoreAccountProperties propertiesInstance = new DataLakeStoreAccountProperties();
                                        dataLakeStoreAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken suffixValue = propertiesValue["suffix"];
                                        if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                        {
                                            string suffixInstance = ((string)suffixValue);
                                            propertiesInstance.Suffix = suffixInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                result.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> DeleteAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            DataLakeAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse response = await client.DataLakeAnalyticsAccount.BeginDeleteAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Data Lake Store account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Data
        /// Lake Store account from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to remove
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteDataLakeStoreAccountAsync(string resourceGroupName, string accountName, string dataLakeStoreAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (dataLakeStoreAccountName == null)
            {
                throw new ArgumentNullException("dataLakeStoreAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("dataLakeStoreAccountName", dataLakeStoreAccountName);
                TracingAdapter.Enter(invocationId, this, "DeleteDataLakeStoreAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/DataLakeStoreAccounts/";
            url = url + Uri.EscapeDataString(dataLakeStoreAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Azure Storage account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Azure
        /// Storage account from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to remove
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteStorageAccountAsync(string resourceGroupName, string accountName, string storageAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                TracingAdapter.Enter(invocationId, this, "DeleteStorageAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics Account information response.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountGetResponse> GetAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DataLakeAnalyticsAccount dataLakeAnalyticsAccountInstance = new DataLakeAnalyticsAccount();
                            result.DataLakeAnalyticsAccount = dataLakeAnalyticsAccountInstance;
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                dataLakeAnalyticsAccountInstance.Location = locationInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                dataLakeAnalyticsAccountInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                dataLakeAnalyticsAccountInstance.Type = typeInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                dataLakeAnalyticsAccountInstance.Id = idInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    dataLakeAnalyticsAccountInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DataLakeAnalyticsAccountProperties propertiesInstance = new DataLakeAnalyticsAccountProperties();
                                dataLakeAnalyticsAccountInstance.Properties = propertiesInstance;
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    DataLakeAnalyticsAccountStatus provisioningStateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountStatus(((string)provisioningStateValue));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    DataLakeAnalyticsAccountState stateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountState(((string)stateValue));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken defaultDataLakeStoreAccountValue = propertiesValue["defaultDataLakeStoreAccount"];
                                if (defaultDataLakeStoreAccountValue != null && defaultDataLakeStoreAccountValue.Type != JTokenType.Null)
                                {
                                    string defaultDataLakeStoreAccountInstance = ((string)defaultDataLakeStoreAccountValue);
                                    propertiesInstance.DefaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
                                }
                                
                                JToken maxDegreeOfParallelismValue = propertiesValue["maxDegreeOfParallelism"];
                                if (maxDegreeOfParallelismValue != null && maxDegreeOfParallelismValue.Type != JTokenType.Null)
                                {
                                    int maxDegreeOfParallelismInstance = ((int)maxDegreeOfParallelismValue);
                                    propertiesInstance.MaxDegreeOfParallelism = maxDegreeOfParallelismInstance;
                                }
                                
                                JToken maxJobCountValue = propertiesValue["maxJobCount"];
                                if (maxJobCountValue != null && maxJobCountValue.Type != JTokenType.Null)
                                {
                                    int maxJobCountInstance = ((int)maxJobCountValue);
                                    propertiesInstance.MaxJobCount = maxJobCountInstance;
                                }
                                
                                JToken dataLakeStoreAccountsArray = propertiesValue["dataLakeStoreAccounts"];
                                if (dataLakeStoreAccountsArray != null && dataLakeStoreAccountsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken dataLakeStoreAccountsValue in ((JArray)dataLakeStoreAccountsArray))
                                    {
                                        DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                                        propertiesInstance.DataLakeStoreAccounts.Add(dataLakeStoreAccountInstance);
                                        
                                        JToken nameValue2 = dataLakeStoreAccountsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataLakeStoreAccountInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken propertiesValue2 = dataLakeStoreAccountsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            DataLakeStoreAccountProperties propertiesInstance2 = new DataLakeStoreAccountProperties();
                                            dataLakeStoreAccountInstance.Properties = propertiesInstance2;
                                            
                                            JToken suffixValue = propertiesValue2["suffix"];
                                            if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                            {
                                                string suffixInstance = ((string)suffixValue);
                                                propertiesInstance2.Suffix = suffixInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                    {
                                        StorageAccount storageAccountInstance = new StorageAccount();
                                        propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                        
                                        JToken nameValue3 = storageAccountsValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            storageAccountInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken propertiesValue3 = storageAccountsValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            StorageAccountProperties propertiesInstance3 = new StorageAccountProperties();
                                            storageAccountInstance.Properties = propertiesInstance3;
                                            
                                            JToken accessKeyValue = propertiesValue3["accessKey"];
                                            if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                            {
                                                string accessKeyInstance = ((string)accessKeyValue);
                                                propertiesInstance3.AccessKey = accessKeyInstance;
                                            }
                                            
                                            JToken suffixValue2 = propertiesValue3["suffix"];
                                            if (suffixValue2 != null && suffixValue2.Type != JTokenType.Null)
                                            {
                                                string suffixInstance2 = ((string)suffixValue2);
                                                propertiesInstance3.Suffix = suffixInstance2;
                                            }
                                        }
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken endpointValue = propertiesValue["endpoint"];
                                if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                {
                                    string endpointInstance = ((string)endpointValue);
                                    propertiesInstance.Endpoint = endpointInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified Data Lake Store account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Data Lake Store
        /// account details from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Account information response.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountGetDataLakeStoreAccountResponse> GetDataLakeStoreAccountAsync(string resourceGroupName, string accountName, string dataLakeStoreAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (dataLakeStoreAccountName == null)
            {
                throw new ArgumentNullException("dataLakeStoreAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("dataLakeStoreAccountName", dataLakeStoreAccountName);
                TracingAdapter.Enter(invocationId, this, "GetDataLakeStoreAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/DataLakeStoreAccounts/";
            url = url + Uri.EscapeDataString(dataLakeStoreAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountGetDataLakeStoreAccountResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountGetDataLakeStoreAccountResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                            result.DataLakeStoreAccount = dataLakeStoreAccountInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                dataLakeStoreAccountInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DataLakeStoreAccountProperties propertiesInstance = new DataLakeStoreAccountProperties();
                                dataLakeStoreAccountInstance.Properties = propertiesInstance;
                                
                                JToken suffixValue = propertiesValue["suffix"];
                                if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                {
                                    string suffixInstance = ((string)suffixValue);
                                    propertiesInstance.Suffix = suffixInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified Azure storage account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Azure storage
        /// account details from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Storage Account information response.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountGetStorageAccountResponse> GetStorageAccountAsync(string resourceGroupName, string accountName, string storageAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                TracingAdapter.Enter(invocationId, this, "GetStorageAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountGetStorageAccountResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountGetStorageAccountResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccount storageAccountInstance = new StorageAccount();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageAccountInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                StorageAccountProperties propertiesInstance = new StorageAccountProperties();
                                storageAccountInstance.Properties = propertiesInstance;
                                
                                JToken accessKeyValue = propertiesValue["accessKey"];
                                if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                {
                                    string accessKeyInstance = ((string)accessKeyValue);
                                    propertiesInstance.AccessKey = accessKeyInstance;
                                }
                                
                                JToken suffixValue = propertiesValue["suffix"];
                                if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                {
                                    string suffixInstance = ((string)suffixValue);
                                    propertiesInstance.Suffix = suffixInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified Azure Storage container object associated with
        /// the specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob container for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Storage Container information response.
        /// </returns>
        public async Task<GetBlobContainerResponse> GetStorageContainerAsync(string resourceGroupName, string accountName, string storageAccountName, string containerName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                tracingParameters.Add("containerName", containerName);
                TracingAdapter.Enter(invocationId, this, "GetStorageContainerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            url = url + "/Containers/";
            url = url + Uri.EscapeDataString(containerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetBlobContainerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetBlobContainerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobContainer containerInstance = new BlobContainer();
                            result.Container = containerInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                containerInstance.Name = nameInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                containerInstance.Id = idInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                containerInstance.Type = typeInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                BlobContainerProperties propertiesInstance = new BlobContainerProperties();
                                containerInstance.Properties = propertiesInstance;
                                
                                JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListResponse> ListAsync(string resourceGroupName, DataLakeAnalyticsAccountListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/";
            if (resourceGroupName != null)
            {
                url = url + "resourceGroups/" + Uri.EscapeDataString(resourceGroupName) + "/";
            }
            url = url + "providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            List<string> queryParameters = new List<string>();
            if (parameters != null && parameters.Filter != null)
            {
                queryParameters.Add("$filter=" + Uri.EscapeDataString(parameters.Filter));
            }
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            if (parameters != null && parameters.Expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(parameters.Expand));
            }
            if (parameters != null && parameters.Select != null)
            {
                queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.Select));
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                queryParameters.Add("$orderby=" + Uri.EscapeDataString(parameters.OrderBy));
            }
            if (parameters != null && parameters.Count != null)
            {
                queryParameters.Add("$count=" + Uri.EscapeDataString(parameters.Count.Value.ToString().ToLower()));
            }
            if (parameters != null && parameters.Search != null)
            {
                queryParameters.Add("$search=" + Uri.EscapeDataString(parameters.Search));
            }
            if (parameters != null && parameters.Format != null)
            {
                queryParameters.Add("$format=" + Uri.EscapeDataString(parameters.Format));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DataLakeAnalyticsAccount dataLakeAnalyticsAccountInstance = new DataLakeAnalyticsAccount();
                                    result.Value.Add(dataLakeAnalyticsAccountInstance);
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        dataLakeAnalyticsAccountInstance.Location = locationInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataLakeAnalyticsAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataLakeAnalyticsAccountInstance.Type = typeInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dataLakeAnalyticsAccountInstance.Id = idInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            dataLakeAnalyticsAccountInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DataLakeAnalyticsAccountProperties propertiesInstance = new DataLakeAnalyticsAccountProperties();
                                        dataLakeAnalyticsAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            DataLakeAnalyticsAccountStatus provisioningStateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountStatus(((string)provisioningStateValue));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            DataLakeAnalyticsAccountState stateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountState(((string)stateValue));
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken defaultDataLakeStoreAccountValue = propertiesValue["defaultDataLakeStoreAccount"];
                                        if (defaultDataLakeStoreAccountValue != null && defaultDataLakeStoreAccountValue.Type != JTokenType.Null)
                                        {
                                            string defaultDataLakeStoreAccountInstance = ((string)defaultDataLakeStoreAccountValue);
                                            propertiesInstance.DefaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
                                        }
                                        
                                        JToken maxDegreeOfParallelismValue = propertiesValue["maxDegreeOfParallelism"];
                                        if (maxDegreeOfParallelismValue != null && maxDegreeOfParallelismValue.Type != JTokenType.Null)
                                        {
                                            int maxDegreeOfParallelismInstance = ((int)maxDegreeOfParallelismValue);
                                            propertiesInstance.MaxDegreeOfParallelism = maxDegreeOfParallelismInstance;
                                        }
                                        
                                        JToken maxJobCountValue = propertiesValue["maxJobCount"];
                                        if (maxJobCountValue != null && maxJobCountValue.Type != JTokenType.Null)
                                        {
                                            int maxJobCountInstance = ((int)maxJobCountValue);
                                            propertiesInstance.MaxJobCount = maxJobCountInstance;
                                        }
                                        
                                        JToken dataLakeStoreAccountsArray = propertiesValue["dataLakeStoreAccounts"];
                                        if (dataLakeStoreAccountsArray != null && dataLakeStoreAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken dataLakeStoreAccountsValue in ((JArray)dataLakeStoreAccountsArray))
                                            {
                                                DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                                                propertiesInstance.DataLakeStoreAccounts.Add(dataLakeStoreAccountInstance);
                                                
                                                JToken nameValue2 = dataLakeStoreAccountsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataLakeStoreAccountInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken propertiesValue2 = dataLakeStoreAccountsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    DataLakeStoreAccountProperties propertiesInstance2 = new DataLakeStoreAccountProperties();
                                                    dataLakeStoreAccountInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken suffixValue = propertiesValue2["suffix"];
                                                    if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                                    {
                                                        string suffixInstance = ((string)suffixValue);
                                                        propertiesInstance2.Suffix = suffixInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken nameValue3 = storageAccountsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    storageAccountInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken propertiesValue3 = storageAccountsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    StorageAccountProperties propertiesInstance3 = new StorageAccountProperties();
                                                    storageAccountInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken accessKeyValue = propertiesValue3["accessKey"];
                                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accessKeyInstance = ((string)accessKeyValue);
                                                        propertiesInstance3.AccessKey = accessKeyInstance;
                                                    }
                                                    
                                                    JToken suffixValue2 = propertiesValue3["suffix"];
                                                    if (suffixValue2 != null && suffixValue2.Type != JTokenType.Null)
                                                    {
                                                        string suffixInstance2 = ((string)suffixValue2);
                                                        propertiesInstance3.Suffix = suffixInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken endpointValue = propertiesValue["endpoint"];
                                        if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                        {
                                            string endpointInstance = ((string)endpointValue);
                                            propertiesInstance.Endpoint = endpointInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account. This includes a link to
        /// the next page, if any.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list Data
        /// Lake Store accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListDataLakeStoreResponse> ListDataLakeStoreAccountsAsync(string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListDataLakeStoreAccountsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/DataLakeStoreAccounts/";
            List<string> queryParameters = new List<string>();
            if (parameters != null && parameters.Filter != null)
            {
                queryParameters.Add("$filter=" + Uri.EscapeDataString(parameters.Filter));
            }
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            if (parameters != null && parameters.Expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(parameters.Expand));
            }
            if (parameters != null && parameters.Select != null)
            {
                queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.Select));
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                queryParameters.Add("$orderby=" + Uri.EscapeDataString(parameters.OrderBy));
            }
            if (parameters != null && parameters.Count != null)
            {
                queryParameters.Add("$count=" + Uri.EscapeDataString(parameters.Count.Value.ToString().ToLower()));
            }
            if (parameters != null && parameters.Search != null)
            {
                queryParameters.Add("$search=" + Uri.EscapeDataString(parameters.Search));
            }
            if (parameters != null && parameters.Format != null)
            {
                queryParameters.Add("$format=" + Uri.EscapeDataString(parameters.Format));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListDataLakeStoreResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListDataLakeStoreResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                                    result.Value.Add(dataLakeStoreAccountInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataLakeStoreAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DataLakeStoreAccountProperties propertiesInstance = new DataLakeStoreAccountProperties();
                                        dataLakeStoreAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken suffixValue = propertiesValue["suffix"];
                                        if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                        {
                                            string suffixInstance = ((string)suffixValue);
                                            propertiesInstance.Suffix = suffixInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                result.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group with
        /// the link to the next page, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Analytics account page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DataLakeAnalyticsAccount dataLakeAnalyticsAccountInstance = new DataLakeAnalyticsAccount();
                                    result.Value.Add(dataLakeAnalyticsAccountInstance);
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        dataLakeAnalyticsAccountInstance.Location = locationInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataLakeAnalyticsAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        dataLakeAnalyticsAccountInstance.Type = typeInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dataLakeAnalyticsAccountInstance.Id = idInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            dataLakeAnalyticsAccountInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DataLakeAnalyticsAccountProperties propertiesInstance = new DataLakeAnalyticsAccountProperties();
                                        dataLakeAnalyticsAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            DataLakeAnalyticsAccountStatus provisioningStateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountStatus(((string)provisioningStateValue));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            DataLakeAnalyticsAccountState stateInstance = DataLakeAnalyticsManagementClient.ParseDataLakeAnalyticsAccountState(((string)stateValue));
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken defaultDataLakeStoreAccountValue = propertiesValue["defaultDataLakeStoreAccount"];
                                        if (defaultDataLakeStoreAccountValue != null && defaultDataLakeStoreAccountValue.Type != JTokenType.Null)
                                        {
                                            string defaultDataLakeStoreAccountInstance = ((string)defaultDataLakeStoreAccountValue);
                                            propertiesInstance.DefaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
                                        }
                                        
                                        JToken maxDegreeOfParallelismValue = propertiesValue["maxDegreeOfParallelism"];
                                        if (maxDegreeOfParallelismValue != null && maxDegreeOfParallelismValue.Type != JTokenType.Null)
                                        {
                                            int maxDegreeOfParallelismInstance = ((int)maxDegreeOfParallelismValue);
                                            propertiesInstance.MaxDegreeOfParallelism = maxDegreeOfParallelismInstance;
                                        }
                                        
                                        JToken maxJobCountValue = propertiesValue["maxJobCount"];
                                        if (maxJobCountValue != null && maxJobCountValue.Type != JTokenType.Null)
                                        {
                                            int maxJobCountInstance = ((int)maxJobCountValue);
                                            propertiesInstance.MaxJobCount = maxJobCountInstance;
                                        }
                                        
                                        JToken dataLakeStoreAccountsArray = propertiesValue["dataLakeStoreAccounts"];
                                        if (dataLakeStoreAccountsArray != null && dataLakeStoreAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken dataLakeStoreAccountsValue in ((JArray)dataLakeStoreAccountsArray))
                                            {
                                                DataLakeStoreAccount dataLakeStoreAccountInstance = new DataLakeStoreAccount();
                                                propertiesInstance.DataLakeStoreAccounts.Add(dataLakeStoreAccountInstance);
                                                
                                                JToken nameValue2 = dataLakeStoreAccountsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataLakeStoreAccountInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken propertiesValue2 = dataLakeStoreAccountsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    DataLakeStoreAccountProperties propertiesInstance2 = new DataLakeStoreAccountProperties();
                                                    dataLakeStoreAccountInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken suffixValue = propertiesValue2["suffix"];
                                                    if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                                    {
                                                        string suffixInstance = ((string)suffixValue);
                                                        propertiesInstance2.Suffix = suffixInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken nameValue3 = storageAccountsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    storageAccountInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken propertiesValue3 = storageAccountsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    StorageAccountProperties propertiesInstance3 = new StorageAccountProperties();
                                                    storageAccountInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken accessKeyValue = propertiesValue3["accessKey"];
                                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accessKeyInstance = ((string)accessKeyValue);
                                                        propertiesInstance3.AccessKey = accessKeyInstance;
                                                    }
                                                    
                                                    JToken suffixValue2 = propertiesValue3["suffix"];
                                                    if (suffixValue2 != null && suffixValue2.Type != JTokenType.Null)
                                                    {
                                                        string suffixInstance2 = ((string)suffixValue2);
                                                        propertiesInstance3.Suffix = suffixInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken endpointValue = propertiesValue["endpoint"];
                                        if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                        {
                                            string endpointInstance = ((string)endpointValue);
                                            propertiesInstance.Endpoint = endpointInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the SAS token associated with the specified Data Lake
        /// Analytics and WASB storage account and container combination.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// SAS token for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public async Task<ListSasTokensResponse> ListSasTokensAsync(string resourceGroupName, string accountName, string storageAccountName, string containerName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                tracingParameters.Add("containerName", containerName);
                TracingAdapter.Enter(invocationId, this, "ListSasTokensAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            url = url + "/Containers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/listSasTokens";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSasTokensResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListSasTokensResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SasTokenInfo sasTokenInfoInstance = new SasTokenInfo();
                                    result.Value.Add(sasTokenInfoInstance);
                                    
                                    JToken accessTokenValue = valueValue["accessToken"];
                                    if (accessTokenValue != null && accessTokenValue.Type != JTokenType.Null)
                                    {
                                        string accessTokenInstance = ((string)accessTokenValue);
                                        sasTokenInfoInstance.AccessToken = accessTokenInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list
        /// Storage accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListStorageAccountsResponse> ListStorageAccountsAsync(string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListStorageAccountsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            List<string> queryParameters = new List<string>();
            if (parameters != null && parameters.Filter != null)
            {
                queryParameters.Add("$filter=" + Uri.EscapeDataString(parameters.Filter));
            }
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            if (parameters != null && parameters.Expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(parameters.Expand));
            }
            if (parameters != null && parameters.Select != null)
            {
                queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.Select));
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                queryParameters.Add("$orderby=" + Uri.EscapeDataString(parameters.OrderBy));
            }
            if (parameters != null && parameters.Count != null)
            {
                queryParameters.Add("$count=" + Uri.EscapeDataString(parameters.Count.Value.ToString().ToLower()));
            }
            if (parameters != null && parameters.Search != null)
            {
                queryParameters.Add("$search=" + Uri.EscapeDataString(parameters.Search));
            }
            if (parameters != null && parameters.Format != null)
            {
                queryParameters.Add("$format=" + Uri.EscapeDataString(parameters.Format));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListStorageAccountsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListStorageAccountsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccount storageAccountInstance = new StorageAccount();
                                    result.Value.Add(storageAccountInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageAccountProperties propertiesInstance = new StorageAccountProperties();
                                        storageAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken accessKeyValue = propertiesValue["accessKey"];
                                        if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                        {
                                            string accessKeyInstance = ((string)accessKeyValue);
                                            propertiesInstance.AccessKey = accessKeyInstance;
                                        }
                                        
                                        JToken suffixValue = propertiesValue["suffix"];
                                        if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                        {
                                            string suffixInstance = ((string)suffixValue);
                                            propertiesInstance.Suffix = suffixInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                result.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the Azure Storage containers object associated with the
        /// specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob containers for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve blob
        /// containers from
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public async Task<ListBlobContainersResponse> ListStorageContainersAsync(string resourceGroupName, string accountName, string storageAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                TracingAdapter.Enter(invocationId, this, "ListStorageContainersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            url = url + "/Containers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListBlobContainersResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListBlobContainersResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    BlobContainer blobContainerInstance = new BlobContainer();
                                    result.Value.Add(blobContainerInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        blobContainerInstance.Name = nameInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        blobContainerInstance.Id = idInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        blobContainerInstance.Type = typeInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        BlobContainerProperties propertiesInstance = new BlobContainerProperties();
                                        blobContainerInstance.Properties = propertiesInstance;
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of the SAS token objects within the specified
        /// Azure Storage account and container, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container SAS token
        /// page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public async Task<ListSasTokensResponse> SasTokensListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "SasTokensListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListSasTokensResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListSasTokensResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SasTokenInfo sasTokenInfoInstance = new SasTokenInfo();
                                    result.Value.Add(sasTokenInfoInstance);
                                    
                                    JToken accessTokenValue = valueValue["accessToken"];
                                    if (accessTokenValue != null && accessTokenValue.Type != JTokenType.Null)
                                    {
                                        string accessTokenInstance = ((string)accessTokenValue);
                                        sasTokenInfoInstance.AccessToken = accessTokenInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage account objects within the
        /// specified Data Lake Analytics account with the link to the next
        /// page, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage account page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public async Task<DataLakeAnalyticsAccountListStorageAccountsResponse> StorageAccountListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "StorageAccountListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataLakeAnalyticsAccountListStorageAccountsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataLakeAnalyticsAccountListStorageAccountsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccount storageAccountInstance = new StorageAccount();
                                    result.Value.Add(storageAccountInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageAccountInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageAccountProperties propertiesInstance = new StorageAccountProperties();
                                        storageAccountInstance.Properties = propertiesInstance;
                                        
                                        JToken accessKeyValue = propertiesValue["accessKey"];
                                        if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                        {
                                            string accessKeyInstance = ((string)accessKeyValue);
                                            propertiesInstance.AccessKey = accessKeyInstance;
                                        }
                                        
                                        JToken suffixValue = propertiesValue["suffix"];
                                        if (suffixValue != null && suffixValue.Type != JTokenType.Null)
                                        {
                                            string suffixInstance = ((string)suffixValue);
                                            propertiesInstance.Suffix = suffixInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                result.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage Container objects within
        /// the specified Azure Storage account, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public async Task<ListBlobContainersResponse> StorageContainersListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "StorageContainersListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListBlobContainersResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListBlobContainersResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    BlobContainer blobContainerInstance = new BlobContainer();
                                    result.Value.Add(blobContainerInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        blobContainerInstance.Name = nameInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        blobContainerInstance.Id = idInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        blobContainerInstance.Type = typeInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        BlobContainerProperties propertiesInstance = new BlobContainerProperties();
                                        blobContainerInstance.Properties = propertiesInstance;
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeInstance = ((DateTime)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> UpdateAsync(string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataLakeAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse response = await client.DataLakeAnalyticsAccount.BeginUpdateAsync(resourceGroupName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Updates the specified storage account. This is currently only
        /// supported for Azure blob accounts to update their access keys and
        /// suffix.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to modify storage
        /// accounts in
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The Azure Storage account to modify
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and suffix to
        /// update the storage account with.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateStorageAccountAsync(string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (storageAccountName == null)
            {
                throw new ArgumentNullException("storageAccountName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("storageAccountName", storageAccountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateStorageAccountAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DataLakeAnalytics";
            url = url + "/";
            url = url + "accounts";
            url = url + "/";
            url = url + Uri.EscapeDataString(accountName);
            url = url + "/StorageAccounts/";
            url = url + Uri.EscapeDataString(storageAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject addStorageAccountParametersValue = new JObject();
                requestDoc = addStorageAccountParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    addStorageAccountParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.AccessKey != null)
                    {
                        propertiesValue["accessKey"] = parameters.Properties.AccessKey;
                    }
                    
                    if (parameters.Properties.Suffix != null)
                    {
                        propertiesValue["suffix"] = parameters.Properties.Suffix;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
