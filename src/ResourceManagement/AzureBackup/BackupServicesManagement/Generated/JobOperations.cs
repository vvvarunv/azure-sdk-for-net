// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.BackupServices;
using Microsoft.Azure.Management.BackupServices.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.BackupServices
{
    /// <summary>
    /// Definition of Job operations for Azure backup extension.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<BackupServicesManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(BackupServicesManagementClient client)
        {
            this._client = client;
        }
        
        private BackupServicesManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.BackupServices.BackupServicesManagementClient.
        /// </summary>
        public BackupServicesManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get details of a particular job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='name'>
        /// Optional. Name of the job whose details should be retrieved.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for job details operation
        /// </returns>
        public async Task<CSMJobDetails> GetAsync(string resourceGroupName, string resourceName, string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/jobs/";
            if (name != null)
            {
                url = url + Uri.EscapeDataString(name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CSMJobDetails result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CSMJobDetails();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            CSMJobDetailsResponse valueInstance = new CSMJobDetailsResponse();
                            result.Value = valueInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                CSMJobDetailedProperties propertiesInstance = new CSMJobDetailedProperties();
                                valueInstance.JobDetailedProperties = propertiesInstance;
                                
                                JToken tasksListArray = propertiesValue["tasksList"];
                                if (tasksListArray != null && tasksListArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken tasksListValue in ((JArray)tasksListArray))
                                    {
                                        CSMJobTaskDetails cSMJobTaskDetailsInstance = new CSMJobTaskDetails();
                                        propertiesInstance.TasksList.Add(cSMJobTaskDetailsInstance);
                                        
                                        JToken taskIdValue = tasksListValue["taskId"];
                                        if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                        {
                                            string taskIdInstance = ((string)taskIdValue);
                                            cSMJobTaskDetailsInstance.TaskId = taskIdInstance;
                                        }
                                        
                                        JToken startTimeValue = tasksListValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            cSMJobTaskDetailsInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = tasksListValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            cSMJobTaskDetailsInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = tasksListValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            cSMJobTaskDetailsInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken statusValue = tasksListValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            string statusInstance = ((string)statusValue);
                                            cSMJobTaskDetailsInstance.Status = statusInstance;
                                        }
                                        
                                        JToken progressPercentageValue = tasksListValue["progressPercentage"];
                                        if (progressPercentageValue != null && progressPercentageValue.Type != JTokenType.Null)
                                        {
                                            double progressPercentageInstance = ((double)progressPercentageValue);
                                            cSMJobTaskDetailsInstance.ProgressPercentage = progressPercentageInstance;
                                        }
                                    }
                                }
                                
                                JToken propertyBagSequenceElement = ((JToken)propertiesValue["propertyBag"]);
                                if (propertyBagSequenceElement != null && propertyBagSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in propertyBagSequenceElement)
                                    {
                                        string propertyBagKey = ((string)property.Name);
                                        string propertyBagValue = ((string)property.Value);
                                        propertiesInstance.PropertyBag.Add(propertyBagKey, propertyBagValue);
                                    }
                                }
                                
                                JToken progressPercentageValue2 = propertiesValue["progressPercentage"];
                                if (progressPercentageValue2 != null && progressPercentageValue2.Type != JTokenType.Null)
                                {
                                    double progressPercentageInstance2 = ((double)progressPercentageValue2);
                                    propertiesInstance.ProgressPercentage = progressPercentageInstance2;
                                }
                                
                                JToken dynamicErrorMessageValue = propertiesValue["dynamicErrorMessage"];
                                if (dynamicErrorMessageValue != null && dynamicErrorMessageValue.Type != JTokenType.Null)
                                {
                                    string dynamicErrorMessageInstance = ((string)dynamicErrorMessageValue);
                                    propertiesInstance.DynamicErrorMessage = dynamicErrorMessageInstance;
                                }
                                
                                JToken workloadTypeValue = propertiesValue["workloadType"];
                                if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                {
                                    string workloadTypeInstance = ((string)workloadTypeValue);
                                    propertiesInstance.WorkloadType = workloadTypeInstance;
                                }
                                
                                JToken operationValue = propertiesValue["operation"];
                                if (operationValue != null && operationValue.Type != JTokenType.Null)
                                {
                                    string operationInstance = ((string)operationValue);
                                    propertiesInstance.Operation = operationInstance;
                                }
                                
                                JToken statusValue2 = propertiesValue["status"];
                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                {
                                    string statusInstance2 = ((string)statusValue2);
                                    propertiesInstance.Status = statusInstance2;
                                }
                                
                                JToken startTimestampValue = propertiesValue["startTimestamp"];
                                if (startTimestampValue != null && startTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimestampInstance = ((DateTime)startTimestampValue);
                                    propertiesInstance.StartTimestamp = startTimestampInstance;
                                }
                                
                                JToken endTimestampValue = propertiesValue["endTimestamp"];
                                if (endTimestampValue != null && endTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimestampInstance = ((DateTime)endTimestampValue);
                                    propertiesInstance.EndTimestamp = endTimestampInstance;
                                }
                                
                                JToken durationValue2 = propertiesValue["duration"];
                                if (durationValue2 != null && durationValue2.Type != JTokenType.Null)
                                {
                                    TimeSpan durationInstance2 = TimeSpan.Parse(((string)durationValue2), CultureInfo.InvariantCulture);
                                    propertiesInstance.Duration = durationInstance2;
                                }
                                
                                JToken entityFriendlyNameValue = propertiesValue["entityFriendlyName"];
                                if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                    propertiesInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                }
                                
                                JToken actionsInfoArray = propertiesValue["actionsInfo"];
                                if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                    {
                                        propertiesInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                    }
                                }
                                
                                JToken errorDetailsArray = propertiesValue["errorDetails"];
                                if (errorDetailsArray != null && errorDetailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorDetailsValue in ((JArray)errorDetailsArray))
                                    {
                                        CSMJobErrorInfo cSMJobErrorInfoInstance = new CSMJobErrorInfo();
                                        propertiesInstance.ErrorDetails.Add(cSMJobErrorInfoInstance);
                                        
                                        JToken errorCodeValue = errorDetailsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            int errorCodeInstance = ((int)errorCodeValue);
                                            cSMJobErrorInfoInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorTitleValue = errorDetailsValue["errorTitle"];
                                        if (errorTitleValue != null && errorTitleValue.Type != JTokenType.Null)
                                        {
                                            string errorTitleInstance = ((string)errorTitleValue);
                                            cSMJobErrorInfoInstance.ErrorTitle = errorTitleInstance;
                                        }
                                        
                                        JToken errorStringValue = errorDetailsValue["errorString"];
                                        if (errorStringValue != null && errorStringValue.Type != JTokenType.Null)
                                        {
                                            string errorStringInstance = ((string)errorStringValue);
                                            cSMJobErrorInfoInstance.ErrorString = errorStringInstance;
                                        }
                                        
                                        JToken recommendationsArray = errorDetailsValue["recommendations"];
                                        if (recommendationsArray != null && recommendationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken recommendationsValue in ((JArray)recommendationsArray))
                                            {
                                                cSMJobErrorInfoInstance.Recommendations.Add(((string)recommendationsValue));
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                valueInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                valueInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                valueInstance.Type = typeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all jobs queried by specified filters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Job query parameter.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Powershell response object
        /// </returns>
        public async Task<CSMJobList> ListAsync(string resourceGroupName, string resourceName, CSMJobQueryObject parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/jobs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            List<string> odataFilter = new List<string>();
            if (parameters != null && parameters.Status != null)
            {
                odataFilter.Add("status eq '" + Uri.EscapeDataString(parameters.Status) + "'");
            }
            if (parameters != null && parameters.WorkloadType != null)
            {
                odataFilter.Add("workloadType eq '" + Uri.EscapeDataString(parameters.WorkloadType) + "'");
            }
            if (parameters != null && parameters.Operation != null)
            {
                odataFilter.Add("operation eq '" + Uri.EscapeDataString(parameters.Operation) + "'");
            }
            if (parameters != null && parameters.Name != null)
            {
                odataFilter.Add("name eq '" + Uri.EscapeDataString(parameters.Name) + "'");
            }
            if (parameters != null && parameters.StartTime != null)
            {
                odataFilter.Add("startTime eq '" + Uri.EscapeDataString(parameters.StartTime) + "'");
            }
            if (parameters != null && parameters.EndTime != null)
            {
                odataFilter.Add("endTime eq '" + Uri.EscapeDataString(parameters.EndTime) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CSMJobList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CSMJobList();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            CSMJobListResponse listInstance = new CSMJobListResponse();
                            result.List = listInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    CSMJobResponse cSMJobResponseInstance = new CSMJobResponse();
                                    listInstance.Value.Add(cSMJobResponseInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        CSMJobProperties propertiesInstance = new CSMJobProperties();
                                        cSMJobResponseInstance.Properties = propertiesInstance;
                                        
                                        JToken workloadTypeValue = propertiesValue["workloadType"];
                                        if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                        {
                                            string workloadTypeInstance = ((string)workloadTypeValue);
                                            propertiesInstance.WorkloadType = workloadTypeInstance;
                                        }
                                        
                                        JToken operationValue = propertiesValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            propertiesInstance.Operation = operationInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            string statusInstance = ((string)statusValue);
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken startTimestampValue = propertiesValue["startTimestamp"];
                                        if (startTimestampValue != null && startTimestampValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimestampInstance = ((DateTime)startTimestampValue);
                                            propertiesInstance.StartTimestamp = startTimestampInstance;
                                        }
                                        
                                        JToken endTimestampValue = propertiesValue["endTimestamp"];
                                        if (endTimestampValue != null && endTimestampValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimestampInstance = ((DateTime)endTimestampValue);
                                            propertiesInstance.EndTimestamp = endTimestampInstance;
                                        }
                                        
                                        JToken durationValue = propertiesValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            propertiesInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken entityFriendlyNameValue = propertiesValue["entityFriendlyName"];
                                        if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                            propertiesInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                        }
                                        
                                        JToken actionsInfoArray = propertiesValue["actionsInfo"];
                                        if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                            {
                                                propertiesInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                            }
                                        }
                                        
                                        JToken errorDetailsArray = propertiesValue["errorDetails"];
                                        if (errorDetailsArray != null && errorDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken errorDetailsValue in ((JArray)errorDetailsArray))
                                            {
                                                CSMJobErrorInfo cSMJobErrorInfoInstance = new CSMJobErrorInfo();
                                                propertiesInstance.ErrorDetails.Add(cSMJobErrorInfoInstance);
                                                
                                                JToken errorCodeValue = errorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    int errorCodeInstance = ((int)errorCodeValue);
                                                    cSMJobErrorInfoInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorTitleValue = errorDetailsValue["errorTitle"];
                                                if (errorTitleValue != null && errorTitleValue.Type != JTokenType.Null)
                                                {
                                                    string errorTitleInstance = ((string)errorTitleValue);
                                                    cSMJobErrorInfoInstance.ErrorTitle = errorTitleInstance;
                                                }
                                                
                                                JToken errorStringValue = errorDetailsValue["errorString"];
                                                if (errorStringValue != null && errorStringValue.Type != JTokenType.Null)
                                                {
                                                    string errorStringInstance = ((string)errorStringValue);
                                                    cSMJobErrorInfoInstance.ErrorString = errorStringInstance;
                                                }
                                                
                                                JToken recommendationsArray = errorDetailsValue["recommendations"];
                                                if (recommendationsArray != null && recommendationsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken recommendationsValue in ((JArray)recommendationsArray))
                                                    {
                                                        cSMJobErrorInfoInstance.Recommendations.Add(((string)recommendationsValue));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        cSMJobResponseInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        cSMJobResponseInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        cSMJobResponseInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                listInstance.NextLink = nextLinkInstance;
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                listInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                listInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                listInstance.Type = typeInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Trigger cancellation of a job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='name'>
        /// Optional. Name of the job which should be stopped.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Custom request headers to make the call.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a Operation Response.
        /// </returns>
        public async Task<OperationResponse> StopAsync(string resourceGroupName, string resourceName, string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "StopAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/jobs/";
            if (name != null)
            {
                url = url + Uri.EscapeDataString(name);
            }
            url = url + "/cancel";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Guid operationIdInstance = Guid.Parse(((string)responseDoc));
                            result.OperationId = operationIdInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
