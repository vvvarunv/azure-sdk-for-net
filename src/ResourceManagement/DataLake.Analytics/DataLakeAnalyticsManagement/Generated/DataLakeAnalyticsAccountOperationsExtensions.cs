// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.Analytics;
using Microsoft.Azure.Management.DataLake.Analytics.Models;

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    /// <summary>
    /// Creates an Azure Data Lake Analytics account management client.
    /// </summary>
    public static partial class DataLakeAnalyticsAccountOperationsExtensions
    {
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Data Lake
        /// Store account to
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to add
        /// </param>
        /// <param name='parameters'>
        /// Optional. The parameters containing the optional properties
        /// associated with the named Data Lake account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse AddDataLakeStoreAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).AddDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Data Lake
        /// Store account to
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to add
        /// </param>
        /// <param name='parameters'>
        /// Optional. The parameters containing the optional properties
        /// associated with the named Data Lake account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> AddDataLakeStoreAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
        {
            return operations.AddDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Azure Storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Azure
        /// Storage account to
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to add
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and optional
        /// suffix for the Azure Storage Account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse AddStorageAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).AddStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to include the
        /// additional Azure Storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to add the Azure
        /// Storage account to
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to add
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and optional
        /// suffix for the Azure Storage Account.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> AddStorageAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
        {
            return operations.AddStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begins the creation process for the specified Data Lake Analytics
        /// account.This supplies the user with computation services for Data
        /// Lake Analytics workloads
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account will be
        /// associated with.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginCreate(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).BeginCreateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begins the creation process for the specified Data Lake Analytics
        /// account.This supplies the user with computation services for Data
        /// Lake Analytics workloads
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group the account will be
        /// associated with.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginCreateAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begins the delete delete process for the Data Lake Analytics
        /// account object specified by the account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginDelete(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).BeginDeleteAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begins the delete delete process for the Data Lake Analytics
        /// account object specified by the account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginDeleteAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.BeginDeleteAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse BeginUpdate(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).BeginUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> BeginUpdateAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return operations.BeginUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates the specified Data Lake Analytics account.This supplies the
        /// user with computation services for Data Lake Analytics workloads
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Create(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).CreateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates the specified Data Lake Analytics account.This supplies the
        /// user with computation services for Data Lake Analytics workloads
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> CreateAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account with the link to the
        /// next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Store account page.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListDataLakeStoreResponse DataLakeStoreAccountListNext(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).DataLakeStoreAccountListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account with the link to the
        /// next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Store account page.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListDataLakeStoreResponse> DataLakeStoreAccountListNextAsync(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return operations.DataLakeStoreAccountListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Delete(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).DeleteAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to delete
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> DeleteAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.DeleteAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Data
        /// Lake Store account from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to remove
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteDataLakeStoreAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).DeleteDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Data Lake Store account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Data
        /// Lake Store account from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the Data Lake Store account to remove
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteDataLakeStoreAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
        {
            return operations.DeleteDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Azure Storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Azure
        /// Storage account from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to remove
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteStorageAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).DeleteStorageAccountAsync(resourceGroupName, accountName, storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account specified to remove the
        /// specified Azure Storage account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to remove the Azure
        /// Storage account from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure Storage account to remove
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteStorageAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return operations.DeleteStorageAccountAsync(resourceGroupName, accountName, storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Analytics Account information response.
        /// </returns>
        public static DataLakeAnalyticsAccountGetResponse Get(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).GetAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Data Lake Analytics account object specified by the
        /// account name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Analytics Account information response.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountGetResponse> GetAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName)
        {
            return operations.GetAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified Data Lake Store account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Data Lake Store
        /// account details from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Account information response.
        /// </returns>
        public static DataLakeAnalyticsAccountGetDataLakeStoreAccountResponse GetDataLakeStoreAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).GetDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified Data Lake Store account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Data Lake Store
        /// account details from
        /// </param>
        /// <param name='dataLakeStoreAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Data Lake Account information response.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountGetDataLakeStoreAccountResponse> GetDataLakeStoreAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
        {
            return operations.GetDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified Azure storage account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Azure storage
        /// account details from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Storage Account information response.
        /// </returns>
        public static DataLakeAnalyticsAccountGetStorageAccountResponse GetStorageAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).GetStorageAccountAsync(resourceGroupName, accountName, storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified Azure storage account details in the specified
        /// Data Lake Analytics account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to retrieve the Azure storage
        /// account details from
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the account to retrieve
        /// </param>
        /// <returns>
        /// Storage Account information response.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountGetStorageAccountResponse> GetStorageAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return operations.GetStorageAccountAsync(resourceGroupName, accountName, storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified Azure Storage container object associated with
        /// the specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob container for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <returns>
        /// Storage Container information response.
        /// </returns>
        public static GetBlobContainerResponse GetStorageContainer(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).GetStorageContainerAsync(resourceGroupName, accountName, storageAccountName, containerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified Azure Storage container object associated with
        /// the specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob container for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <returns>
        /// Storage Container information response.
        /// </returns>
        public static Task<GetBlobContainerResponse> GetStorageContainerAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
        {
            return operations.GetStorageContainerAsync(resourceGroupName, accountName, storageAccountName, containerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListResponse List(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListResponse> ListAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account. This includes a link to
        /// the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list Data
        /// Lake Store accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListDataLakeStoreResponse ListDataLakeStoreAccounts(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListDataLakeStoreAccountsAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Store account objects within
        /// the specified Data Lake Analytics account. This includes a link to
        /// the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list Data
        /// Lake Store accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// Data Lake Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListDataLakeStoreResponse> ListDataLakeStoreAccountsAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return operations.ListDataLakeStoreAccountsAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group with
        /// the link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Analytics account page.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListResponse ListNext(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group with
        /// the link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Data Lake Analytics account page.
        /// </param>
        /// <returns>
        /// DataLakeAnalytics Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListResponse> ListNextAsync(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the SAS token associated with the specified Data Lake
        /// Analytics and WASB storage account and container combination.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// SAS token for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public static ListSasTokensResponse ListSasTokens(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListSasTokensAsync(resourceGroupName, accountName, storageAccountName, containerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the SAS token associated with the specified Data Lake
        /// Analytics and WASB storage account and container combination.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// SAS token for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve the
        /// blob container from
        /// </param>
        /// <param name='containerName'>
        /// Required. The name of the Azure storage container to retrieve
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public static Task<ListSasTokensResponse> ListSasTokensAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
        {
            return operations.ListSasTokensAsync(resourceGroupName, accountName, storageAccountName, containerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list
        /// Storage accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListStorageAccountsResponse ListStorageAccounts(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListStorageAccountsAsync(resourceGroupName, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics account objects
        /// within the subscription or within a specific resource group. This
        /// includes a link to the next page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to list
        /// Storage accounts for.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all account
        /// items.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListStorageAccountsResponse> ListStorageAccountsAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, DataLakeAnalyticsAccountListParameters parameters)
        {
            return operations.ListStorageAccountsAsync(resourceGroupName, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Azure Storage containers object associated with the
        /// specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob containers for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve blob
        /// containers from
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public static ListBlobContainersResponse ListStorageContainers(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).ListStorageContainersAsync(resourceGroupName, accountName, storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Azure Storage containers object associated with the
        /// specified Data Lake Analytics and Azure Storage accounts.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to retrieve
        /// blob containers for
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The name of the Azure storage account to retrieve blob
        /// containers from
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public static Task<ListBlobContainersResponse> ListStorageContainersAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
        {
            return operations.ListStorageContainersAsync(resourceGroupName, accountName, storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the SAS token objects within the specified
        /// Azure Storage account and container, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container SAS token
        /// page.
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public static ListSasTokensResponse SasTokensListNext(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).SasTokensListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the SAS token objects within the specified
        /// Azure Storage account and container, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container SAS token
        /// page.
        /// </param>
        /// <returns>
        /// The SAS response that contains the storage account, container and
        /// associated SAS token for connection use.
        /// </returns>
        public static Task<ListSasTokensResponse> SasTokensListNextAsync(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return operations.SasTokensListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage account objects within the
        /// specified Data Lake Analytics account with the link to the next
        /// page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage account page.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public static DataLakeAnalyticsAccountListStorageAccountsResponse StorageAccountListNext(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).StorageAccountListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage account objects within the
        /// specified Data Lake Analytics account with the link to the next
        /// page, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage account page.
        /// </param>
        /// <returns>
        /// Azure Storage Account list information.
        /// </returns>
        public static Task<DataLakeAnalyticsAccountListStorageAccountsResponse> StorageAccountListNextAsync(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return operations.StorageAccountListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage Container objects within
        /// the specified Azure Storage account, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container page.
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public static ListBlobContainersResponse StorageContainersListNext(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).StorageContainersListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of the Azure Storage Container objects within
        /// the specified Azure Storage account, if any.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next Azure Storage Container page.
        /// </param>
        /// <returns>
        /// The list of blob containers associated with the storage account
        /// attached to the Data Lake Analytics account.
        /// </returns>
        public static Task<ListBlobContainersResponse> StorageContainersListNextAsync(this IDataLakeAnalyticsAccountOperations operations, string nextLink)
        {
            return operations.StorageContainersListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static AzureAsyncOperationResponse Update(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).UpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the Data Lake Analytics account object specified by the
        /// accountName with the contents of the account object.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the update Data Lake Analytics
        /// account operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<AzureAsyncOperationResponse> UpdateAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, DataLakeAnalyticsAccountCreateOrUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the specified storage account. This is currently only
        /// supported for Azure blob accounts to update their access keys and
        /// suffix.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to modify storage
        /// accounts in
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The Azure Storage account to modify
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and suffix to
        /// update the storage account with.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateStorageAccount(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataLakeAnalyticsAccountOperations)s).UpdateStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the specified storage account. This is currently only
        /// supported for Azure blob accounts to update their access keys and
        /// suffix.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.Analytics.IDataLakeAnalyticsAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The Data Lake Analytics account name to modify storage
        /// accounts in
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. The Azure Storage account to modify
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters containing the access key and suffix to
        /// update the storage account with.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateStorageAccountAsync(this IDataLakeAnalyticsAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
        {
            return operations.UpdateStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters, CancellationToken.None);
        }
    }
}
