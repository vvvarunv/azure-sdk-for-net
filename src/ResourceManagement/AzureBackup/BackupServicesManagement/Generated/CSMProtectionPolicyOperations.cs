// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.BackupServices;
using Microsoft.Azure.Management.BackupServices.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.BackupServices
{
    /// <summary>
    /// Definition of Protection Policy operations for the Azure Backup
    /// extension.
    /// </summary>
    internal partial class CSMProtectionPolicyOperations : IServiceOperations<BackupServicesManagementClient>, ICSMProtectionPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the CSMProtectionPolicyOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CSMProtectionPolicyOperations(BackupServicesManagementClient client)
        {
            this._client = client;
        }
        
        private BackupServicesManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.BackupServices.BackupServicesManagementClient.
        /// </summary>
        public BackupServicesManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create new Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='policyName'>
        /// Required. The protection policy Name to be updated.
        /// </param>
        /// <param name='cSMAddProtectionPolicyRequest'>
        /// Required. The protection policy creation request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> AddAsync(string resourceGroupName, string resourceName, string policyName, CSMAddProtectionPolicyRequest cSMAddProtectionPolicyRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (cSMAddProtectionPolicyRequest == null)
            {
                throw new ArgumentNullException("cSMAddProtectionPolicyRequest");
            }
            if (cSMAddProtectionPolicyRequest.Properties != null)
            {
                if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule != null)
                {
                    if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule.BackupType == null)
                    {
                        throw new ArgumentNullException("cSMAddProtectionPolicyRequest.Properties.BackupSchedule.BackupType");
                    }
                    if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun == null)
                    {
                        throw new ArgumentNullException("cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun");
                    }
                    if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes == null)
                    {
                        throw new ArgumentNullException("cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("cSMAddProtectionPolicyRequest", cSMAddProtectionPolicyRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "AddAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/protectionPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject cSMAddProtectionPolicyRequestValue = new JObject();
                requestDoc = cSMAddProtectionPolicyRequestValue;
                
                if (cSMAddProtectionPolicyRequest.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    cSMAddProtectionPolicyRequestValue["properties"] = propertiesValue;
                    
                    if (cSMAddProtectionPolicyRequest.Properties.WorkloadType != null)
                    {
                        propertiesValue["WorkloadType"] = cSMAddProtectionPolicyRequest.Properties.WorkloadType;
                    }
                    
                    if (cSMAddProtectionPolicyRequest.Properties.PolicyName != null)
                    {
                        propertiesValue["PolicyName"] = cSMAddProtectionPolicyRequest.Properties.PolicyName;
                    }
                    
                    if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule != null)
                    {
                        JObject backupScheduleValue = new JObject();
                        propertiesValue["BackupSchedule"] = backupScheduleValue;
                        
                        backupScheduleValue["backupType"] = cSMAddProtectionPolicyRequest.Properties.BackupSchedule.BackupType;
                        
                        backupScheduleValue["scheduleRun"] = cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun;
                        
                        if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunDays != null)
                        {
                            JArray scheduleRunDaysArray = new JArray();
                            foreach (DayOfWeek scheduleRunDaysItem in cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunDays)
                            {
                                scheduleRunDaysArray.Add(scheduleRunDaysItem.ToString());
                            }
                            backupScheduleValue["scheduleRunDays"] = scheduleRunDaysArray;
                        }
                        
                        if (cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes != null)
                        {
                            JArray scheduleRunTimesArray = new JArray();
                            foreach (DateTime scheduleRunTimesItem in cSMAddProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes)
                            {
                                scheduleRunTimesArray.Add(scheduleRunTimesItem);
                            }
                            backupScheduleValue["scheduleRunTimes"] = scheduleRunTimesArray;
                        }
                    }
                    
                    if (cSMAddProtectionPolicyRequest.Properties.RetentionPolicy != null)
                    {
                        JObject retentionPolicyValue = new JObject();
                        propertiesValue["RetentionPolicy"] = retentionPolicyValue;
                        
                        retentionPolicyValue["retentionType"] = cSMAddProtectionPolicyRequest.Properties.RetentionPolicy.RetentionType.ToString();
                        
                        retentionPolicyValue["retentionDuration"] = cSMAddProtectionPolicyRequest.Properties.RetentionPolicy.RetentionDuration;
                    }
                    
                    if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy != null)
                    {
                        JObject lTRRetentionPolicyValue = new JObject();
                        propertiesValue["LTRRetentionPolicy"] = lTRRetentionPolicyValue;
                        
                        if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule != null)
                        {
                            JObject dailyScheduleValue = new JObject();
                            lTRRetentionPolicyValue["DailySchedule"] = dailyScheduleValue;
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.RetentionTimes != null)
                            {
                                JArray retentionTimesArray = new JArray();
                                foreach (DateTime retentionTimesItem in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.RetentionTimes)
                                {
                                    retentionTimesArray.Add(retentionTimesItem);
                                }
                                dailyScheduleValue["RetentionTimes"] = retentionTimesArray;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration != null)
                            {
                                JObject cSMRetentionDurationValue = new JObject();
                                dailyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue;
                                
                                cSMRetentionDurationValue["Count"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration.Count;
                                
                                cSMRetentionDurationValue["DurationType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration.DurationType.ToString();
                            }
                        }
                        
                        if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule != null)
                        {
                            JObject weeklyScheduleValue = new JObject();
                            lTRRetentionPolicyValue["WeeklySchedule"] = weeklyScheduleValue;
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.DaysOfTheWeek != null)
                            {
                                JArray daysOfTheWeekArray = new JArray();
                                foreach (DayOfWeek daysOfTheWeekItem in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.DaysOfTheWeek)
                                {
                                    daysOfTheWeekArray.Add(daysOfTheWeekItem.ToString());
                                }
                                weeklyScheduleValue["DaysOfTheWeek"] = daysOfTheWeekArray;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.RetentionTimes != null)
                            {
                                JArray retentionTimesArray2 = new JArray();
                                foreach (DateTime retentionTimesItem2 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.RetentionTimes)
                                {
                                    retentionTimesArray2.Add(retentionTimesItem2);
                                }
                                weeklyScheduleValue["RetentionTimes"] = retentionTimesArray2;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration != null)
                            {
                                JObject cSMRetentionDurationValue2 = new JObject();
                                weeklyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue2;
                                
                                cSMRetentionDurationValue2["Count"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration.Count;
                                
                                cSMRetentionDurationValue2["DurationType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration.DurationType.ToString();
                            }
                        }
                        
                        if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule != null)
                        {
                            JObject monthlyScheduleValue = new JObject();
                            lTRRetentionPolicyValue["MonthlySchedule"] = monthlyScheduleValue;
                            
                            monthlyScheduleValue["RetentionScheduleType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleType.ToString();
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily != null)
                            {
                                JObject retentionScheduleDailyValue = new JObject();
                                monthlyScheduleValue["RetentionScheduleDaily"] = retentionScheduleDailyValue;
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                                {
                                    JArray daysOfTheMonthArray = new JArray();
                                    foreach (Day daysOfTheMonthItem in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                    {
                                        JObject dayValue = new JObject();
                                        daysOfTheMonthArray.Add(dayValue);
                                        
                                        dayValue["Date"] = daysOfTheMonthItem.Date;
                                        
                                        dayValue["IsLast"] = daysOfTheMonthItem.IsLast;
                                    }
                                    retentionScheduleDailyValue["DaysOfTheMonth"] = daysOfTheMonthArray;
                                }
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly != null)
                            {
                                JObject retentionScheduleWeeklyValue = new JObject();
                                monthlyScheduleValue["RetentionScheduleWeekly"] = retentionScheduleWeeklyValue;
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                                {
                                    JArray daysOfTheWeekArray2 = new JArray();
                                    foreach (DayOfWeek daysOfTheWeekItem2 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                    {
                                        daysOfTheWeekArray2.Add(daysOfTheWeekItem2.ToString());
                                    }
                                    retentionScheduleWeeklyValue["DaysOfTheWeek"] = daysOfTheWeekArray2;
                                }
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                                {
                                    JArray weeksOfTheMonthArray = new JArray();
                                    foreach (WeekNumber weeksOfTheMonthItem in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                    {
                                        weeksOfTheMonthArray.Add(weeksOfTheMonthItem.ToString());
                                    }
                                    retentionScheduleWeeklyValue["WeeksOfTheMonth"] = weeksOfTheMonthArray;
                                }
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionTimes != null)
                            {
                                JArray retentionTimesArray3 = new JArray();
                                foreach (DateTime retentionTimesItem3 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionTimes)
                                {
                                    retentionTimesArray3.Add(retentionTimesItem3);
                                }
                                monthlyScheduleValue["RetentionTimes"] = retentionTimesArray3;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration != null)
                            {
                                JObject cSMRetentionDurationValue3 = new JObject();
                                monthlyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue3;
                                
                                cSMRetentionDurationValue3["Count"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration.Count;
                                
                                cSMRetentionDurationValue3["DurationType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration.DurationType.ToString();
                            }
                        }
                        
                        if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule != null)
                        {
                            JObject yearlyScheduleValue = new JObject();
                            lTRRetentionPolicyValue["YearlySchedule"] = yearlyScheduleValue;
                            
                            yearlyScheduleValue["RetentionScheduleType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleType.ToString();
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.MonthsOfYear != null)
                            {
                                JArray monthsOfYearArray = new JArray();
                                foreach (Month monthsOfYearItem in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.MonthsOfYear)
                                {
                                    monthsOfYearArray.Add(monthsOfYearItem.ToString());
                                }
                                yearlyScheduleValue["MonthsOfYear"] = monthsOfYearArray;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily != null)
                            {
                                JObject retentionScheduleDailyValue2 = new JObject();
                                yearlyScheduleValue["RetentionScheduleDaily"] = retentionScheduleDailyValue2;
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                                {
                                    JArray daysOfTheMonthArray2 = new JArray();
                                    foreach (Day daysOfTheMonthItem2 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                    {
                                        JObject dayValue2 = new JObject();
                                        daysOfTheMonthArray2.Add(dayValue2);
                                        
                                        dayValue2["Date"] = daysOfTheMonthItem2.Date;
                                        
                                        dayValue2["IsLast"] = daysOfTheMonthItem2.IsLast;
                                    }
                                    retentionScheduleDailyValue2["DaysOfTheMonth"] = daysOfTheMonthArray2;
                                }
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly != null)
                            {
                                JObject retentionScheduleWeeklyValue2 = new JObject();
                                yearlyScheduleValue["RetentionScheduleWeekly"] = retentionScheduleWeeklyValue2;
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                                {
                                    JArray daysOfTheWeekArray3 = new JArray();
                                    foreach (DayOfWeek daysOfTheWeekItem3 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                    {
                                        daysOfTheWeekArray3.Add(daysOfTheWeekItem3.ToString());
                                    }
                                    retentionScheduleWeeklyValue2["DaysOfTheWeek"] = daysOfTheWeekArray3;
                                }
                                
                                if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                                {
                                    JArray weeksOfTheMonthArray2 = new JArray();
                                    foreach (WeekNumber weeksOfTheMonthItem2 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                    {
                                        weeksOfTheMonthArray2.Add(weeksOfTheMonthItem2.ToString());
                                    }
                                    retentionScheduleWeeklyValue2["WeeksOfTheMonth"] = weeksOfTheMonthArray2;
                                }
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionTimes != null)
                            {
                                JArray retentionTimesArray4 = new JArray();
                                foreach (DateTime retentionTimesItem4 in cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionTimes)
                                {
                                    retentionTimesArray4.Add(retentionTimesItem4);
                                }
                                yearlyScheduleValue["RetentionTimes"] = retentionTimesArray4;
                            }
                            
                            if (cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration != null)
                            {
                                JObject cSMRetentionDurationValue4 = new JObject();
                                yearlyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue4;
                                
                                cSMRetentionDurationValue4["Count"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration.Count;
                                
                                cSMRetentionDurationValue4["DurationType"] = cSMAddProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration.DurationType.ToString();
                            }
                        }
                    }
                }
                
                if (cSMAddProtectionPolicyRequest.PolicyName != null)
                {
                    cSMAddProtectionPolicyRequestValue["PolicyName"] = cSMAddProtectionPolicyRequest.PolicyName;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='policyName'>
        /// Required. The protection policy Name to be deleted.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string resourceName, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/protectionPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a CSMProtectionPolicyListOperationResponse.
        /// </returns>
        public async Task<CSMProtectionPolicyListOperationResponse> ListAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/protectionPolicies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CSMProtectionPolicyListOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CSMProtectionPolicyListOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            CSMProtectionPolicyListResponse cSMProtectionPolicyListResponseInstance = new CSMProtectionPolicyListResponse();
                            result.CSMProtectionPolicyListResponse = cSMProtectionPolicyListResponseInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    CSMProtectionPolicyResponse cSMProtectionPolicyResponseInstance = new CSMProtectionPolicyResponse();
                                    cSMProtectionPolicyListResponseInstance.Value.Add(cSMProtectionPolicyResponseInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        CSMProtectionPolicyProperties propertiesInstance = new CSMProtectionPolicyProperties();
                                        cSMProtectionPolicyResponseInstance.Properties = propertiesInstance;
                                        
                                        JToken workloadTypeValue = propertiesValue["workloadType"];
                                        if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                        {
                                            string workloadTypeInstance = ((string)workloadTypeValue);
                                            propertiesInstance.WorkloadType = workloadTypeInstance;
                                        }
                                        
                                        JToken policyNameValue = propertiesValue["policyName"];
                                        if (policyNameValue != null && policyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyNameInstance = ((string)policyNameValue);
                                            propertiesInstance.PolicyName = policyNameInstance;
                                        }
                                        
                                        JToken backupScheduleValue = propertiesValue["backupSchedule"];
                                        if (backupScheduleValue != null && backupScheduleValue.Type != JTokenType.Null)
                                        {
                                            CSMBackupSchedule backupScheduleInstance = new CSMBackupSchedule();
                                            propertiesInstance.BackupSchedule = backupScheduleInstance;
                                            
                                            JToken backupTypeValue = backupScheduleValue["backupType"];
                                            if (backupTypeValue != null && backupTypeValue.Type != JTokenType.Null)
                                            {
                                                string backupTypeInstance = ((string)backupTypeValue);
                                                backupScheduleInstance.BackupType = backupTypeInstance;
                                            }
                                            
                                            JToken scheduleRunValue = backupScheduleValue["scheduleRun"];
                                            if (scheduleRunValue != null && scheduleRunValue.Type != JTokenType.Null)
                                            {
                                                string scheduleRunInstance = ((string)scheduleRunValue);
                                                backupScheduleInstance.ScheduleRun = scheduleRunInstance;
                                            }
                                            
                                            JToken scheduleRunDaysArray = backupScheduleValue["scheduleRunDays"];
                                            if (scheduleRunDaysArray != null && scheduleRunDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray))
                                                {
                                                    backupScheduleInstance.ScheduleRunDays.Add(((DayOfWeek)Enum.Parse(typeof(DayOfWeek), ((string)scheduleRunDaysValue), true)));
                                                }
                                            }
                                            
                                            JToken scheduleRunTimesArray = backupScheduleValue["scheduleRunTimes"];
                                            if (scheduleRunTimesArray != null && scheduleRunTimesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray))
                                                {
                                                    backupScheduleInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                }
                                            }
                                        }
                                        
                                        JToken retentionPolicyValue = propertiesValue["retentionPolicy"];
                                        if (retentionPolicyValue != null && retentionPolicyValue.Type != JTokenType.Null)
                                        {
                                            CSMRetentionPolicy retentionPolicyInstance = new CSMRetentionPolicy();
                                            propertiesInstance.RetentionPolicy = retentionPolicyInstance;
                                            
                                            JToken retentionTypeValue = retentionPolicyValue["retentionType"];
                                            if (retentionTypeValue != null && retentionTypeValue.Type != JTokenType.Null)
                                            {
                                                RetentionDurationType retentionTypeInstance = ((RetentionDurationType)Enum.Parse(typeof(RetentionDurationType), ((string)retentionTypeValue), true));
                                                retentionPolicyInstance.RetentionType = retentionTypeInstance;
                                            }
                                            
                                            JToken retentionDurationValue = retentionPolicyValue["retentionDuration"];
                                            if (retentionDurationValue != null && retentionDurationValue.Type != JTokenType.Null)
                                            {
                                                int retentionDurationInstance = ((int)retentionDurationValue);
                                                retentionPolicyInstance.RetentionDuration = retentionDurationInstance;
                                            }
                                        }
                                        
                                        JToken ltrRetentionPolicyValue = propertiesValue["ltrRetentionPolicy"];
                                        if (ltrRetentionPolicyValue != null && ltrRetentionPolicyValue.Type != JTokenType.Null)
                                        {
                                            CSMLongTermRetentionPolicy ltrRetentionPolicyInstance = new CSMLongTermRetentionPolicy();
                                            propertiesInstance.LtrRetentionPolicy = ltrRetentionPolicyInstance;
                                            
                                            JToken dailyScheduleValue = ltrRetentionPolicyValue["DailySchedule"];
                                            if (dailyScheduleValue != null && dailyScheduleValue.Type != JTokenType.Null)
                                            {
                                                CSMDailyRetentionSchedule dailyScheduleInstance = new CSMDailyRetentionSchedule();
                                                ltrRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                
                                                JToken retentionTimesArray = dailyScheduleValue["RetentionTimes"];
                                                if (retentionTimesArray != null && retentionTimesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray))
                                                    {
                                                        dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                    }
                                                }
                                                
                                                JToken cSMRetentionDurationValue = dailyScheduleValue["CSMRetentionDuration"];
                                                if (cSMRetentionDurationValue != null && cSMRetentionDurationValue.Type != JTokenType.Null)
                                                {
                                                    CSMRetentionDuration cSMRetentionDurationInstance = new CSMRetentionDuration();
                                                    dailyScheduleInstance.CSMRetentionDuration = cSMRetentionDurationInstance;
                                                    
                                                    JToken countValue = cSMRetentionDurationValue["Count"];
                                                    if (countValue != null && countValue.Type != JTokenType.Null)
                                                    {
                                                        int countInstance = ((int)countValue);
                                                        cSMRetentionDurationInstance.Count = countInstance;
                                                    }
                                                    
                                                    JToken durationTypeValue = cSMRetentionDurationValue["DurationType"];
                                                    if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        RetentionDurationType durationTypeInstance = ((RetentionDurationType)Enum.Parse(typeof(RetentionDurationType), ((string)durationTypeValue), true));
                                                        cSMRetentionDurationInstance.DurationType = durationTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken weeklyScheduleValue = ltrRetentionPolicyValue["WeeklySchedule"];
                                            if (weeklyScheduleValue != null && weeklyScheduleValue.Type != JTokenType.Null)
                                            {
                                                CSMWeeklyRetentionSchedule weeklyScheduleInstance = new CSMWeeklyRetentionSchedule();
                                                ltrRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                
                                                JToken daysOfTheWeekArray = weeklyScheduleValue["DaysOfTheWeek"];
                                                if (daysOfTheWeekArray != null && daysOfTheWeekArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray))
                                                    {
                                                        weeklyScheduleInstance.DaysOfTheWeek.Add(((DayOfWeek)Enum.Parse(typeof(DayOfWeek), ((string)daysOfTheWeekValue), true)));
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray2 = weeklyScheduleValue["RetentionTimes"];
                                                if (retentionTimesArray2 != null && retentionTimesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray2))
                                                    {
                                                        weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                    }
                                                }
                                                
                                                JToken cSMRetentionDurationValue2 = weeklyScheduleValue["CSMRetentionDuration"];
                                                if (cSMRetentionDurationValue2 != null && cSMRetentionDurationValue2.Type != JTokenType.Null)
                                                {
                                                    CSMRetentionDuration cSMRetentionDurationInstance2 = new CSMRetentionDuration();
                                                    weeklyScheduleInstance.CSMRetentionDuration = cSMRetentionDurationInstance2;
                                                    
                                                    JToken countValue2 = cSMRetentionDurationValue2["Count"];
                                                    if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                    {
                                                        int countInstance2 = ((int)countValue2);
                                                        cSMRetentionDurationInstance2.Count = countInstance2;
                                                    }
                                                    
                                                    JToken durationTypeValue2 = cSMRetentionDurationValue2["DurationType"];
                                                    if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        RetentionDurationType durationTypeInstance2 = ((RetentionDurationType)Enum.Parse(typeof(RetentionDurationType), ((string)durationTypeValue2), true));
                                                        cSMRetentionDurationInstance2.DurationType = durationTypeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken monthlyScheduleValue = ltrRetentionPolicyValue["MonthlySchedule"];
                                            if (monthlyScheduleValue != null && monthlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                CSMMonthlyRetentionSchedule monthlyScheduleInstance = new CSMMonthlyRetentionSchedule();
                                                ltrRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                
                                                JToken retentionScheduleTypeValue = monthlyScheduleValue["RetentionScheduleType"];
                                                if (retentionScheduleTypeValue != null && retentionScheduleTypeValue.Type != JTokenType.Null)
                                                {
                                                    RetentionScheduleFormat retentionScheduleTypeInstance = ((RetentionScheduleFormat)Enum.Parse(typeof(RetentionScheduleFormat), ((string)retentionScheduleTypeValue), true));
                                                    monthlyScheduleInstance.RetentionScheduleType = retentionScheduleTypeInstance;
                                                }
                                                
                                                JToken retentionScheduleDailyValue = monthlyScheduleValue["RetentionScheduleDaily"];
                                                if (retentionScheduleDailyValue != null && retentionScheduleDailyValue.Type != JTokenType.Null)
                                                {
                                                    CSMDailyRetentionFormat retentionScheduleDailyInstance = new CSMDailyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                    
                                                    JToken daysOfTheMonthArray = retentionScheduleDailyValue["DaysOfTheMonth"];
                                                    if (daysOfTheMonthArray != null && daysOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray))
                                                        {
                                                            Day dayInstance = new Day();
                                                            retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                            
                                                            JToken dateValue = daysOfTheMonthValue["Date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance = ((int)dateValue);
                                                                dayInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken isLastValue = daysOfTheMonthValue["IsLast"];
                                                            if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance = ((bool)isLastValue);
                                                                dayInstance.IsLast = isLastInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue = monthlyScheduleValue["RetentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue != null && retentionScheduleWeeklyValue.Type != JTokenType.Null)
                                                {
                                                    CSMWeeklyRetentionFormat retentionScheduleWeeklyInstance = new CSMWeeklyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                    
                                                    JToken daysOfTheWeekArray2 = retentionScheduleWeeklyValue["DaysOfTheWeek"];
                                                    if (daysOfTheWeekArray2 != null && daysOfTheWeekArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((DayOfWeek)Enum.Parse(typeof(DayOfWeek), ((string)daysOfTheWeekValue2), true)));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray = retentionScheduleWeeklyValue["WeeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray != null && weeksOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray))
                                                        {
                                                            retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((WeekNumber)Enum.Parse(typeof(WeekNumber), ((string)weeksOfTheMonthValue), true)));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray3 = monthlyScheduleValue["RetentionTimes"];
                                                if (retentionTimesArray3 != null && retentionTimesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray3))
                                                    {
                                                        monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                    }
                                                }
                                                
                                                JToken cSMRetentionDurationValue3 = monthlyScheduleValue["CSMRetentionDuration"];
                                                if (cSMRetentionDurationValue3 != null && cSMRetentionDurationValue3.Type != JTokenType.Null)
                                                {
                                                    CSMRetentionDuration cSMRetentionDurationInstance3 = new CSMRetentionDuration();
                                                    monthlyScheduleInstance.CSMRetentionDuration = cSMRetentionDurationInstance3;
                                                    
                                                    JToken countValue3 = cSMRetentionDurationValue3["Count"];
                                                    if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                    {
                                                        int countInstance3 = ((int)countValue3);
                                                        cSMRetentionDurationInstance3.Count = countInstance3;
                                                    }
                                                    
                                                    JToken durationTypeValue3 = cSMRetentionDurationValue3["DurationType"];
                                                    if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        RetentionDurationType durationTypeInstance3 = ((RetentionDurationType)Enum.Parse(typeof(RetentionDurationType), ((string)durationTypeValue3), true));
                                                        cSMRetentionDurationInstance3.DurationType = durationTypeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken yearlyScheduleValue = ltrRetentionPolicyValue["YearlySchedule"];
                                            if (yearlyScheduleValue != null && yearlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                CSMYearlyRetentionSchedule yearlyScheduleInstance = new CSMYearlyRetentionSchedule();
                                                ltrRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                
                                                JToken retentionScheduleTypeValue2 = yearlyScheduleValue["RetentionScheduleType"];
                                                if (retentionScheduleTypeValue2 != null && retentionScheduleTypeValue2.Type != JTokenType.Null)
                                                {
                                                    RetentionScheduleFormat retentionScheduleTypeInstance2 = ((RetentionScheduleFormat)Enum.Parse(typeof(RetentionScheduleFormat), ((string)retentionScheduleTypeValue2), true));
                                                    yearlyScheduleInstance.RetentionScheduleType = retentionScheduleTypeInstance2;
                                                }
                                                
                                                JToken monthsOfYearArray = yearlyScheduleValue["MonthsOfYear"];
                                                if (monthsOfYearArray != null && monthsOfYearArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray))
                                                    {
                                                        yearlyScheduleInstance.MonthsOfYear.Add(((Month)Enum.Parse(typeof(Month), ((string)monthsOfYearValue), true)));
                                                    }
                                                }
                                                
                                                JToken retentionScheduleDailyValue2 = yearlyScheduleValue["RetentionScheduleDaily"];
                                                if (retentionScheduleDailyValue2 != null && retentionScheduleDailyValue2.Type != JTokenType.Null)
                                                {
                                                    CSMDailyRetentionFormat retentionScheduleDailyInstance2 = new CSMDailyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                    
                                                    JToken daysOfTheMonthArray2 = retentionScheduleDailyValue2["DaysOfTheMonth"];
                                                    if (daysOfTheMonthArray2 != null && daysOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray2))
                                                        {
                                                            Day dayInstance2 = new Day();
                                                            retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                            
                                                            JToken dateValue2 = daysOfTheMonthValue2["Date"];
                                                            if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance2 = ((int)dateValue2);
                                                                dayInstance2.Date = dateInstance2;
                                                            }
                                                            
                                                            JToken isLastValue2 = daysOfTheMonthValue2["IsLast"];
                                                            if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance2 = ((bool)isLastValue2);
                                                                dayInstance2.IsLast = isLastInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue2 = yearlyScheduleValue["RetentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue2 != null && retentionScheduleWeeklyValue2.Type != JTokenType.Null)
                                                {
                                                    CSMWeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new CSMWeeklyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                    
                                                    JToken daysOfTheWeekArray3 = retentionScheduleWeeklyValue2["DaysOfTheWeek"];
                                                    if (daysOfTheWeekArray3 != null && daysOfTheWeekArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray3))
                                                        {
                                                            retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((DayOfWeek)Enum.Parse(typeof(DayOfWeek), ((string)daysOfTheWeekValue3), true)));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2["WeeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray2 != null && weeksOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((WeekNumber)Enum.Parse(typeof(WeekNumber), ((string)weeksOfTheMonthValue2), true)));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray4 = yearlyScheduleValue["RetentionTimes"];
                                                if (retentionTimesArray4 != null && retentionTimesArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray4))
                                                    {
                                                        yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                    }
                                                }
                                                
                                                JToken cSMRetentionDurationValue4 = yearlyScheduleValue["CSMRetentionDuration"];
                                                if (cSMRetentionDurationValue4 != null && cSMRetentionDurationValue4.Type != JTokenType.Null)
                                                {
                                                    CSMRetentionDuration cSMRetentionDurationInstance4 = new CSMRetentionDuration();
                                                    yearlyScheduleInstance.CSMRetentionDuration = cSMRetentionDurationInstance4;
                                                    
                                                    JToken countValue4 = cSMRetentionDurationValue4["Count"];
                                                    if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                    {
                                                        int countInstance4 = ((int)countValue4);
                                                        cSMRetentionDurationInstance4.Count = countInstance4;
                                                    }
                                                    
                                                    JToken durationTypeValue4 = cSMRetentionDurationValue4["DurationType"];
                                                    if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                    {
                                                        RetentionDurationType durationTypeInstance4 = ((RetentionDurationType)Enum.Parse(typeof(RetentionDurationType), ((string)durationTypeValue4), true));
                                                        cSMRetentionDurationInstance4.DurationType = durationTypeInstance4;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        cSMProtectionPolicyResponseInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        cSMProtectionPolicyResponseInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        cSMProtectionPolicyResponseInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                cSMProtectionPolicyListResponseInstance.NextLink = nextLinkInstance;
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                cSMProtectionPolicyListResponseInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                cSMProtectionPolicyListResponseInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                cSMProtectionPolicyListResponseInstance.Type = typeInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='policyName'>
        /// Required. The protection policy Name to be updated.
        /// </param>
        /// <param name='cSMUpdateProtectionPolicyRequest'>
        /// Required. The protection policy creation request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a Operation Response.
        /// </returns>
        public async Task<OperationResponse> UpdateAsync(string resourceGroupName, string resourceName, string policyName, CSMUpdateProtectionPolicyRequest cSMUpdateProtectionPolicyRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (cSMUpdateProtectionPolicyRequest == null)
            {
                throw new ArgumentNullException("cSMUpdateProtectionPolicyRequest");
            }
            if (cSMUpdateProtectionPolicyRequest.Properties == null)
            {
                throw new ArgumentNullException("cSMUpdateProtectionPolicyRequest.Properties");
            }
            if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule != null)
            {
                if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.BackupType == null)
                {
                    throw new ArgumentNullException("cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.BackupType");
                }
                if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun == null)
                {
                    throw new ArgumentNullException("cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun");
                }
                if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes == null)
                {
                    throw new ArgumentNullException("cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("cSMUpdateProtectionPolicyRequest", cSMUpdateProtectionPolicyRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "BackupVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/protectionPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject cSMUpdateProtectionPolicyRequestValue = new JObject();
                requestDoc = cSMUpdateProtectionPolicyRequestValue;
                
                JObject propertiesValue = new JObject();
                cSMUpdateProtectionPolicyRequestValue["properties"] = propertiesValue;
                
                if (cSMUpdateProtectionPolicyRequest.Properties.PolicyName != null)
                {
                    propertiesValue["policyName"] = cSMUpdateProtectionPolicyRequest.Properties.PolicyName;
                }
                
                if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule != null)
                {
                    JObject backupScheduleValue = new JObject();
                    propertiesValue["backupSchedule"] = backupScheduleValue;
                    
                    backupScheduleValue["backupType"] = cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.BackupType;
                    
                    backupScheduleValue["scheduleRun"] = cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRun;
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunDays != null)
                    {
                        JArray scheduleRunDaysArray = new JArray();
                        foreach (DayOfWeek scheduleRunDaysItem in cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunDays)
                        {
                            scheduleRunDaysArray.Add(scheduleRunDaysItem.ToString());
                        }
                        backupScheduleValue["scheduleRunDays"] = scheduleRunDaysArray;
                    }
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes != null)
                    {
                        JArray scheduleRunTimesArray = new JArray();
                        foreach (DateTime scheduleRunTimesItem in cSMUpdateProtectionPolicyRequest.Properties.BackupSchedule.ScheduleRunTimes)
                        {
                            scheduleRunTimesArray.Add(scheduleRunTimesItem);
                        }
                        backupScheduleValue["scheduleRunTimes"] = scheduleRunTimesArray;
                    }
                }
                
                if (cSMUpdateProtectionPolicyRequest.Properties.RetentionPolicy != null)
                {
                    JObject retentionPolicyValue = new JObject();
                    propertiesValue["retentionPolicy"] = retentionPolicyValue;
                    
                    retentionPolicyValue["retentionType"] = cSMUpdateProtectionPolicyRequest.Properties.RetentionPolicy.RetentionType.ToString();
                    
                    retentionPolicyValue["retentionDuration"] = cSMUpdateProtectionPolicyRequest.Properties.RetentionPolicy.RetentionDuration;
                }
                
                if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy != null)
                {
                    JObject ltrRetentionPolicyValue = new JObject();
                    propertiesValue["ltrRetentionPolicy"] = ltrRetentionPolicyValue;
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule != null)
                    {
                        JObject dailyScheduleValue = new JObject();
                        ltrRetentionPolicyValue["DailySchedule"] = dailyScheduleValue;
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.RetentionTimes != null)
                        {
                            JArray retentionTimesArray = new JArray();
                            foreach (DateTime retentionTimesItem in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.RetentionTimes)
                            {
                                retentionTimesArray.Add(retentionTimesItem);
                            }
                            dailyScheduleValue["RetentionTimes"] = retentionTimesArray;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration != null)
                        {
                            JObject cSMRetentionDurationValue = new JObject();
                            dailyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue;
                            
                            cSMRetentionDurationValue["Count"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration.Count;
                            
                            cSMRetentionDurationValue["DurationType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.DailySchedule.CSMRetentionDuration.DurationType.ToString();
                        }
                    }
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule != null)
                    {
                        JObject weeklyScheduleValue = new JObject();
                        ltrRetentionPolicyValue["WeeklySchedule"] = weeklyScheduleValue;
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.DaysOfTheWeek != null)
                        {
                            JArray daysOfTheWeekArray = new JArray();
                            foreach (DayOfWeek daysOfTheWeekItem in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.DaysOfTheWeek)
                            {
                                daysOfTheWeekArray.Add(daysOfTheWeekItem.ToString());
                            }
                            weeklyScheduleValue["DaysOfTheWeek"] = daysOfTheWeekArray;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.RetentionTimes != null)
                        {
                            JArray retentionTimesArray2 = new JArray();
                            foreach (DateTime retentionTimesItem2 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.RetentionTimes)
                            {
                                retentionTimesArray2.Add(retentionTimesItem2);
                            }
                            weeklyScheduleValue["RetentionTimes"] = retentionTimesArray2;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration != null)
                        {
                            JObject cSMRetentionDurationValue2 = new JObject();
                            weeklyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue2;
                            
                            cSMRetentionDurationValue2["Count"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration.Count;
                            
                            cSMRetentionDurationValue2["DurationType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.WeeklySchedule.CSMRetentionDuration.DurationType.ToString();
                        }
                    }
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule != null)
                    {
                        JObject monthlyScheduleValue = new JObject();
                        ltrRetentionPolicyValue["MonthlySchedule"] = monthlyScheduleValue;
                        
                        monthlyScheduleValue["RetentionScheduleType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleType.ToString();
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily != null)
                        {
                            JObject retentionScheduleDailyValue = new JObject();
                            monthlyScheduleValue["RetentionScheduleDaily"] = retentionScheduleDailyValue;
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                            {
                                JArray daysOfTheMonthArray = new JArray();
                                foreach (Day daysOfTheMonthItem in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                {
                                    JObject dayValue = new JObject();
                                    daysOfTheMonthArray.Add(dayValue);
                                    
                                    dayValue["Date"] = daysOfTheMonthItem.Date;
                                    
                                    dayValue["IsLast"] = daysOfTheMonthItem.IsLast;
                                }
                                retentionScheduleDailyValue["DaysOfTheMonth"] = daysOfTheMonthArray;
                            }
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly != null)
                        {
                            JObject retentionScheduleWeeklyValue = new JObject();
                            monthlyScheduleValue["RetentionScheduleWeekly"] = retentionScheduleWeeklyValue;
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                            {
                                JArray daysOfTheWeekArray2 = new JArray();
                                foreach (DayOfWeek daysOfTheWeekItem2 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                {
                                    daysOfTheWeekArray2.Add(daysOfTheWeekItem2.ToString());
                                }
                                retentionScheduleWeeklyValue["DaysOfTheWeek"] = daysOfTheWeekArray2;
                            }
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                            {
                                JArray weeksOfTheMonthArray = new JArray();
                                foreach (WeekNumber weeksOfTheMonthItem in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                {
                                    weeksOfTheMonthArray.Add(weeksOfTheMonthItem.ToString());
                                }
                                retentionScheduleWeeklyValue["WeeksOfTheMonth"] = weeksOfTheMonthArray;
                            }
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionTimes != null)
                        {
                            JArray retentionTimesArray3 = new JArray();
                            foreach (DateTime retentionTimesItem3 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.RetentionTimes)
                            {
                                retentionTimesArray3.Add(retentionTimesItem3);
                            }
                            monthlyScheduleValue["RetentionTimes"] = retentionTimesArray3;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration != null)
                        {
                            JObject cSMRetentionDurationValue3 = new JObject();
                            monthlyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue3;
                            
                            cSMRetentionDurationValue3["Count"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration.Count;
                            
                            cSMRetentionDurationValue3["DurationType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.MonthlySchedule.CSMRetentionDuration.DurationType.ToString();
                        }
                    }
                    
                    if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule != null)
                    {
                        JObject yearlyScheduleValue = new JObject();
                        ltrRetentionPolicyValue["YearlySchedule"] = yearlyScheduleValue;
                        
                        yearlyScheduleValue["RetentionScheduleType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleType.ToString();
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.MonthsOfYear != null)
                        {
                            JArray monthsOfYearArray = new JArray();
                            foreach (Month monthsOfYearItem in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.MonthsOfYear)
                            {
                                monthsOfYearArray.Add(monthsOfYearItem.ToString());
                            }
                            yearlyScheduleValue["MonthsOfYear"] = monthsOfYearArray;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily != null)
                        {
                            JObject retentionScheduleDailyValue2 = new JObject();
                            yearlyScheduleValue["RetentionScheduleDaily"] = retentionScheduleDailyValue2;
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                            {
                                JArray daysOfTheMonthArray2 = new JArray();
                                foreach (Day daysOfTheMonthItem2 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                {
                                    JObject dayValue2 = new JObject();
                                    daysOfTheMonthArray2.Add(dayValue2);
                                    
                                    dayValue2["Date"] = daysOfTheMonthItem2.Date;
                                    
                                    dayValue2["IsLast"] = daysOfTheMonthItem2.IsLast;
                                }
                                retentionScheduleDailyValue2["DaysOfTheMonth"] = daysOfTheMonthArray2;
                            }
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly != null)
                        {
                            JObject retentionScheduleWeeklyValue2 = new JObject();
                            yearlyScheduleValue["RetentionScheduleWeekly"] = retentionScheduleWeeklyValue2;
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                            {
                                JArray daysOfTheWeekArray3 = new JArray();
                                foreach (DayOfWeek daysOfTheWeekItem3 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                {
                                    daysOfTheWeekArray3.Add(daysOfTheWeekItem3.ToString());
                                }
                                retentionScheduleWeeklyValue2["DaysOfTheWeek"] = daysOfTheWeekArray3;
                            }
                            
                            if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                            {
                                JArray weeksOfTheMonthArray2 = new JArray();
                                foreach (WeekNumber weeksOfTheMonthItem2 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                {
                                    weeksOfTheMonthArray2.Add(weeksOfTheMonthItem2.ToString());
                                }
                                retentionScheduleWeeklyValue2["WeeksOfTheMonth"] = weeksOfTheMonthArray2;
                            }
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionTimes != null)
                        {
                            JArray retentionTimesArray4 = new JArray();
                            foreach (DateTime retentionTimesItem4 in cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.RetentionTimes)
                            {
                                retentionTimesArray4.Add(retentionTimesItem4);
                            }
                            yearlyScheduleValue["RetentionTimes"] = retentionTimesArray4;
                        }
                        
                        if (cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration != null)
                        {
                            JObject cSMRetentionDurationValue4 = new JObject();
                            yearlyScheduleValue["CSMRetentionDuration"] = cSMRetentionDurationValue4;
                            
                            cSMRetentionDurationValue4["Count"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration.Count;
                            
                            cSMRetentionDurationValue4["DurationType"] = cSMUpdateProtectionPolicyRequest.Properties.LtrRetentionPolicy.YearlySchedule.CSMRetentionDuration.DurationType.ToString();
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Guid operationIdInstance = Guid.Parse(((string)responseDoc));
                            result.OperationId = operationIdInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
